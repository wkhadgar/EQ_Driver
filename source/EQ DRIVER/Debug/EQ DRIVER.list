
EQ DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000429c  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d70  08008d70  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08008d70  08008d70  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d70  08008d70  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d74  08008d74  00018d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08008d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  200000d0  08008e48  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08008e48  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106ca  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad1  00000000  00000000  000307c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00033298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00034260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186bf  00000000  00000000  000350f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b08  00000000  00000000  0004d7b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f558  00000000  00000000  000612bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0817  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004198  00000000  00000000  000f0868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004abc 	.word	0x08004abc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	08004abc 	.word	0x08004abc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_ADC2_Init+0x74>)
 800065a:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <MX_ADC2_Init+0x78>)
 800065c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_ADC2_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_ADC2_Init+0x74>)
 8000666:	2201      	movs	r2, #1
 8000668:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_ADC2_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_ADC2_Init+0x74>)
 8000672:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000676:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_ADC2_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_ADC2_Init+0x74>)
 8000680:	2201      	movs	r2, #1
 8000682:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_ADC2_Init+0x74>)
 8000686:	f001 fcf9 	bl	800207c <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000690:	f000 fbae 	bl	8000df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000698:	2301      	movs	r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_ADC2_Init+0x74>)
 80006a6:	f001 ffad 	bl	8002604 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80006b0:	f000 fb9e 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000ec 	.word	0x200000ec
 80006c0:	40012800 	.word	0x40012800

080006c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC2)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a14      	ldr	r2, [pc, #80]	; (8000730 <HAL_ADC_MspInit+0x6c>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d121      	bne.n	8000728 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <HAL_ADC_MspInit+0x70>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <HAL_ADC_MspInit+0x70>)
 80006ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_ADC_MspInit+0x70>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <HAL_ADC_MspInit+0x70>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <HAL_ADC_MspInit+0x70>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_ADC_MspInit+0x70>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0-WKUP     ------> ADC2_IN0
    */
    GPIO_InitStruct.Pin = V_BATTERY_Pin;
 8000714:	2301      	movs	r3, #1
 8000716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000718:	2303      	movs	r3, #3
 800071a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_BATTERY_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <HAL_ADC_MspInit+0x74>)
 8000724:	f002 f9e2 	bl	8002aec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40012800 	.word	0x40012800
 8000734:	40021000 	.word	0x40021000
 8000738:	40010800 	.word	0x40010800

0800073c <voltage_read>:
/*
 * @brief: reads the analog input on battery vcc and returns the voltage based on the given vref x 100
 * @param VREFH_x100: the given reference voltage max to convert the raw adc reading into, times 100 for float avoiding.
 * @retval: converted adc reading into the voltage reference frame, only scaled by 10 times.
 */
uint16_t voltage_read(uint16_t VREFH_x10)	{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]
	uint32_t v = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
	HAL_ADC_PollForConversion(&hadc2, 100);
 800074a:	2164      	movs	r1, #100	; 0x64
 800074c:	4813      	ldr	r0, [pc, #76]	; (800079c <voltage_read+0x60>)
 800074e:	f001 fe47 	bl	80023e0 <HAL_ADC_PollForConversion>
	for (uint8_t samples = 0; samples < 64; samples++)	{
 8000752:	2300      	movs	r3, #0
 8000754:	72fb      	strb	r3, [r7, #11]
 8000756:	e009      	b.n	800076c <voltage_read+0x30>
		v += HAL_ADC_GetValue(&hadc2);
 8000758:	4810      	ldr	r0, [pc, #64]	; (800079c <voltage_read+0x60>)
 800075a:	f001 ff47 	bl	80025ec <HAL_ADC_GetValue>
 800075e:	4602      	mov	r2, r0
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	4413      	add	r3, r2
 8000764:	60fb      	str	r3, [r7, #12]
	for (uint8_t samples = 0; samples < 64; samples++)	{
 8000766:	7afb      	ldrb	r3, [r7, #11]
 8000768:	3301      	adds	r3, #1
 800076a:	72fb      	strb	r3, [r7, #11]
 800076c:	7afb      	ldrb	r3, [r7, #11]
 800076e:	2b3f      	cmp	r3, #63	; 0x3f
 8000770:	d9f2      	bls.n	8000758 <voltage_read+0x1c>
	}
	v >>= 6; // v / 64
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	099b      	lsrs	r3, r3, #6
 8000776:	60fb      	str	r3, [r7, #12]
	v = (v*VREFH_x10)/4025; //correlates analog read to voltage value
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	fb03 f202 	mul.w	r2, r3, r2
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <voltage_read+0x64>)
 8000782:	fba3 1302 	umull	r1, r3, r3, r2
 8000786:	1ad2      	subs	r2, r2, r3
 8000788:	0852      	lsrs	r2, r2, #1
 800078a:	4413      	add	r3, r2
 800078c:	0adb      	lsrs	r3, r3, #11
 800078e:	60fb      	str	r3, [r7, #12]
	return v;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	b29b      	uxth	r3, r3
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000ec 	.word	0x200000ec
 80007a0:	048409ed 	.word	0x048409ed

080007a4 <BKP_read>:
/*
 * @brief: reads byte from given addr, splitting each bkp register 2byte writable space into 2 bytes
 * @param addr: address of the bkp register to be read, can be from 0 to 19 (20 bytes total)
 * @retval: byte readed from the given adress
 */
uint8_t BKP_read(uint8_t addr)	{
 80007a4:	b480      	push	{r7}
 80007a6:	b087      	sub	sp, #28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	if (addr < 20)	{
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b13      	cmp	r3, #19
 80007b2:	d813      	bhi.n	80007dc <BKP_read+0x38>
		uint32_t* target_DR = &BKP->DR1; // base
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <BKP_read+0x44>)
 80007b6:	617b      	str	r3, [r7, #20]

		target_DR += addr >> 1; // selects the bkp register address
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	085b      	lsrs	r3, r3, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	4413      	add	r3, r2
 80007c4:	617b      	str	r3, [r7, #20]
		bool_t target_DR_shift = addr & 1; // selects if the byte should be written shifted
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	74fb      	strb	r3, [r7, #19]

		uint8_t* saved_data = (uint8_t*) target_DR; //resizes the pointer to do 1byte steps
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	60fb      	str	r3, [r7, #12]

		return saved_data[target_DR_shift]; //reads the byte sized pointer content
 80007d2:	7cfb      	ldrb	r3, [r7, #19]
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	4413      	add	r3, r2
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	e000      	b.n	80007de <BKP_read+0x3a>
	}
	return 0;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	371c      	adds	r7, #28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	40006c04 	.word	0x40006c04

080007ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000800:	4b4e      	ldr	r3, [pc, #312]	; (800093c <MX_GPIO_Init+0x150>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a4d      	ldr	r2, [pc, #308]	; (800093c <MX_GPIO_Init+0x150>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b4b      	ldr	r3, [pc, #300]	; (800093c <MX_GPIO_Init+0x150>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0310 	and.w	r3, r3, #16
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000818:	4b48      	ldr	r3, [pc, #288]	; (800093c <MX_GPIO_Init+0x150>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a47      	ldr	r2, [pc, #284]	; (800093c <MX_GPIO_Init+0x150>)
 800081e:	f043 0320 	orr.w	r3, r3, #32
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b45      	ldr	r3, [pc, #276]	; (800093c <MX_GPIO_Init+0x150>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0320 	and.w	r3, r3, #32
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b42      	ldr	r3, [pc, #264]	; (800093c <MX_GPIO_Init+0x150>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a41      	ldr	r2, [pc, #260]	; (800093c <MX_GPIO_Init+0x150>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b3f      	ldr	r3, [pc, #252]	; (800093c <MX_GPIO_Init+0x150>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b3c      	ldr	r3, [pc, #240]	; (800093c <MX_GPIO_Init+0x150>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a3b      	ldr	r2, [pc, #236]	; (800093c <MX_GPIO_Init+0x150>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b39      	ldr	r3, [pc, #228]	; (800093c <MX_GPIO_Init+0x150>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M1_STEP_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	21e0      	movs	r1, #224	; 0xe0
 8000864:	4836      	ldr	r0, [pc, #216]	; (8000940 <MX_GPIO_Init+0x154>)
 8000866:	f002 fac5 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_STEP_GPIO_Port, M2_STEP_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2101      	movs	r1, #1
 800086e:	4835      	ldr	r0, [pc, #212]	; (8000944 <MX_GPIO_Init+0x158>)
 8000870:	f002 fac0 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000874:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087a:	2303      	movs	r3, #3
 800087c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4619      	mov	r1, r3
 8000884:	4830      	ldr	r0, [pc, #192]	; (8000948 <MX_GPIO_Init+0x15c>)
 8000886:	f002 f931 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800088a:	f649 731e 	movw	r3, #40734	; 0x9f1e
 800088e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000890:	2303      	movs	r3, #3
 8000892:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	4829      	ldr	r0, [pc, #164]	; (8000940 <MX_GPIO_Init+0x154>)
 800089c:	f002 f926 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M1_STEP_Pin|M2_DIR_Pin;
 80008a0:	23e0      	movs	r3, #224	; 0xe0
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	4822      	ldr	r0, [pc, #136]	; (8000940 <MX_GPIO_Init+0x154>)
 80008b8:	f002 f918 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_STEP_Pin;
 80008bc:	2301      	movs	r3, #1
 80008be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_STEP_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	481c      	ldr	r0, [pc, #112]	; (8000944 <MX_GPIO_Init+0x158>)
 80008d4:	f002 f90a 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80008d8:	f648 733e 	movw	r3, #36670	; 0x8f3e
 80008dc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008de:	2303      	movs	r3, #3
 80008e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4619      	mov	r1, r3
 80008e8:	4816      	ldr	r0, [pc, #88]	; (8000944 <MX_GPIO_Init+0x158>)
 80008ea:	f002 f8ff 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SELECT_Pin|ROTARY_TRIG_Pin;
 80008ee:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_GPIO_Init+0x160>)
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	; (8000944 <MX_GPIO_Init+0x158>)
 8000904:	f002 f8f2 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROTARY_CLKW_Pin;
 8000908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000912:	2301      	movs	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROTARY_CLKW_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	4619      	mov	r1, r3
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_GPIO_Init+0x158>)
 800091e:	f002 f8e5 	bl	8002aec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2028      	movs	r0, #40	; 0x28
 8000928:	f002 f8b5 	bl	8002a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092c:	2028      	movs	r0, #40	; 0x28
 800092e:	f002 f8ce 	bl	8002ace <HAL_NVIC_EnableIRQ>

}
 8000932:	bf00      	nop
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000
 8000940:	40010800 	.word	0x40010800
 8000944:	40010c00 	.word	0x40010c00
 8000948:	40011000 	.word	0x40011000
 800094c:	10210000 	.word	0x10210000

08000950 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000956:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <MX_I2C1_Init+0x54>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_I2C1_Init+0x50>)
 800095c:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_I2C1_Init+0x58>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 120;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000968:	2278      	movs	r2, #120	; 0x78
 800096a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_I2C1_Init+0x50>)
 800096e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_I2C1_Init+0x50>)
 800098e:	f002 fa57 	bl	8002e40 <HAL_I2C_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000998:	f000 fa2a 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000011c 	.word	0x2000011c
 80009a4:	40005400 	.word	0x40005400
 80009a8:	00061a80 	.word	0x00061a80

080009ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <HAL_I2C_MspInit+0x70>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d123      	bne.n	8000a14 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_I2C_MspInit+0x74>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <HAL_I2C_MspInit+0x74>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_I2C_MspInit+0x74>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80009e4:	23c0      	movs	r3, #192	; 0xc0
 80009e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e8:	2312      	movs	r3, #18
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	480b      	ldr	r0, [pc, #44]	; (8000a24 <HAL_I2C_MspInit+0x78>)
 80009f8:	f002 f878 	bl	8002aec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_I2C_MspInit+0x74>)
 80009fe:	69db      	ldr	r3, [r3, #28]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_I2C_MspInit+0x74>)
 8000a02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a06:	61d3      	str	r3, [r2, #28]
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_I2C_MspInit+0x74>)
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010c00 	.word	0x40010c00

08000a28 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ROTARY_TRIG_Pin) {
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a38:	d10c      	bne.n	8000a54 <HAL_GPIO_EXTI_Callback+0x2c>
    set_flag(rotary_triggered);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f000 fb68 	bl	8001110 <set_flag>
    if (ROTARY_CLKW_GPIO_Port->IDR & ROTARY_CLKW_Pin)	{
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_GPIO_EXTI_Callback+0x44>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d00a      	beq.n	8000a62 <HAL_GPIO_EXTI_Callback+0x3a>
    	set_flag(ccw);
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	f000 fb5f 	bl	8001110 <set_flag>
    }
  } else if (GPIO_Pin == SELECT_Pin) {
    set_flag(selected);
  }
}
 8000a52:	e006      	b.n	8000a62 <HAL_GPIO_EXTI_Callback+0x3a>
  } else if (GPIO_Pin == SELECT_Pin) {
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a5a:	d102      	bne.n	8000a62 <HAL_GPIO_EXTI_Callback+0x3a>
    set_flag(selected);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 fb57 	bl	8001110 <set_flag>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40010c00 	.word	0x40010c00

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a76:	f001 faab 	bl	8001fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7a:	f000 f8d5 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7e:	f7ff feb5 	bl	80007ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a82:	f7ff ff65 	bl	8000950 <MX_I2C1_Init>
  MX_ADC2_Init();
 8000a86:	f7ff fddf 	bl	8000648 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000a8a:	f000 facf 	bl	800102c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SH1106_cleanInit();
 8000a8e:	f000 fc99 	bl	80013c4 <SH1106_cleanInit>

  //data recover
  battery_charge = get_bat_percentage();
 8000a92:	f000 f925 	bl	8000ce0 <get_bat_percentage>
 8000a96:	4603      	mov	r3, r0
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b57      	ldr	r3, [pc, #348]	; (8000bf8 <main+0x188>)
 8000a9c:	701a      	strb	r2, [r3, #0]
  menu_op_value[brilho_tela] = BKP_read(0);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fe80 	bl	80007a4 <BKP_read>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	4b54      	ldr	r3, [pc, #336]	; (8000bfc <main+0x18c>)
 8000aaa:	815a      	strh	r2, [r3, #10]
  menu_op_value[hemisphere] = BKP_read(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fe79 	bl	80007a4 <BKP_read>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b51      	ldr	r3, [pc, #324]	; (8000bfc <main+0x18c>)
 8000ab8:	809a      	strh	r2, [r3, #4]
  menu_op_value[tempo_tela] = BKP_read(2);
 8000aba:	2002      	movs	r0, #2
 8000abc:	f7ff fe72 	bl	80007a4 <BKP_read>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b4d      	ldr	r3, [pc, #308]	; (8000bfc <main+0x18c>)
 8000ac6:	819a      	strh	r2, [r3, #12]

  //logo display
  SH1106_drawBitmapFullscreen(eqmount_logo);
 8000ac8:	484d      	ldr	r0, [pc, #308]	; (8000c00 <main+0x190>)
 8000aca:	f001 fa6d 	bl	8001fa8 <SH1106_drawBitmapFullscreen>
  SH1106_flush();
 8000ace:	f000 fc45 	bl	800135c <SH1106_flush>
  SH1106_clear();
 8000ad2:	f000 fc21 	bl	8001318 <SH1106_clear>
  HAL_Delay(2500);
 8000ad6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000ada:	f001 faab 	bl	8002034 <HAL_Delay>

  //transition fake load
  SH1106_printStr(16, 15, "Carregando Menu", fnt5x7);
 8000ade:	4b49      	ldr	r3, [pc, #292]	; (8000c04 <main+0x194>)
 8000ae0:	4a49      	ldr	r2, [pc, #292]	; (8000c08 <main+0x198>)
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	2010      	movs	r0, #16
 8000ae6:	f001 f975 	bl	8001dd4 <SH1106_printStr>
  for (uint8_t s = 0; s <= 100; s+=2)	{
 8000aea:	2300      	movs	r3, #0
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	e00f      	b.n	8000b10 <main+0xa0>
	  SH1106_drawRoundRectFill(s, 7, 32, 110, 8);
 8000af0:	79f8      	ldrb	r0, [r7, #7]
 8000af2:	2308      	movs	r3, #8
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	236e      	movs	r3, #110	; 0x6e
 8000af8:	2220      	movs	r2, #32
 8000afa:	2107      	movs	r1, #7
 8000afc:	f000 fe7a 	bl	80017f4 <SH1106_drawRoundRectFill>
	  SH1106_flush();
 8000b00:	f000 fc2c 	bl	800135c <SH1106_flush>
	  HAL_Delay(1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f001 fa95 	bl	8002034 <HAL_Delay>
  for (uint8_t s = 0; s <= 100; s+=2)	{
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2b64      	cmp	r3, #100	; 0x64
 8000b14:	d9ec      	bls.n	8000af0 <main+0x80>
  }
  SH1106_clear();
 8000b16:	f000 fbff 	bl	8001318 <SH1106_clear>

  last_move_ticks = TICKS_NOW; //start time reference
 8000b1a:	f001 fa81 	bl	8002020 <HAL_GetTick>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a3a      	ldr	r2, [pc, #232]	; (8000c0c <main+0x19c>)
 8000b22:	6013      	str	r3, [r2, #0]
  ra_last_tick = last_move_ticks;
 8000b24:	4b39      	ldr	r3, [pc, #228]	; (8000c0c <main+0x19c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a39      	ldr	r2, [pc, #228]	; (8000c10 <main+0x1a0>)
 8000b2a:	6013      	str	r3, [r2, #0]
  bat_ticks_update = last_move_ticks;
 8000b2c:	4b37      	ldr	r3, [pc, #220]	; (8000c0c <main+0x19c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a38      	ldr	r2, [pc, #224]	; (8000c14 <main+0x1a4>)
 8000b32:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if (toggle_horse) {
      if (frame > 14)	frame = 0;
 8000b34:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <main+0x1a8>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b0e      	cmp	r3, #14
 8000b3a:	d902      	bls.n	8000b42 <main+0xd2>
 8000b3c:	4b36      	ldr	r3, [pc, #216]	; (8000c18 <main+0x1a8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
      SH1106_drawBitmapFullscreen(horse_running[frame++]);
 8000b42:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <main+0x1a8>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	b2d1      	uxtb	r1, r2
 8000b4a:	4a33      	ldr	r2, [pc, #204]	; (8000c18 <main+0x1a8>)
 8000b4c:	7011      	strb	r1, [r2, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <main+0x1ac>)
 8000b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fa26 	bl	8001fa8 <SH1106_drawBitmapFullscreen>
      //SH1106_drawRoundRectFill(battery_charge, 105, 2, 20, 5);
      SH1106_flush();
 8000b5c:	f000 fbfe 	bl	800135c <SH1106_flush>
    }
    SH1106_clear();
 8000b60:	f000 fbda 	bl	8001318 <SH1106_clear>


    //battery info
    if (TICKS_NOW - bat_ticks_update > 10000)	{
 8000b64:	f001 fa5c 	bl	8002020 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <main+0x1a4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d911      	bls.n	8000b9c <main+0x12c>
    	battery_charge = get_bat_percentage();
 8000b78:	f000 f8b2 	bl	8000ce0 <get_bat_percentage>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <main+0x188>)
 8000b82:	701a      	strb	r2, [r3, #0]
    	if (battery_charge < 20)	set_flag(low_battery);
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <main+0x188>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b13      	cmp	r3, #19
 8000b8a:	d802      	bhi.n	8000b92 <main+0x122>
 8000b8c:	2006      	movs	r0, #6
 8000b8e:	f000 fabf 	bl	8001110 <set_flag>
    	bat_ticks_update = TICKS_NOW;
 8000b92:	f001 fa45 	bl	8002020 <HAL_GetTick>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <main+0x1a4>)
 8000b9a:	6013      	str	r3, [r2, #0]
    }
    SH1106_drawRoundRectFill(battery_charge, 105, 2, 20, 5);
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <main+0x188>)
 8000b9e:	7818      	ldrb	r0, [r3, #0]
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2314      	movs	r3, #20
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	2169      	movs	r1, #105	; 0x69
 8000baa:	f000 fe23 	bl	80017f4 <SH1106_drawRoundRectFill>
    if (get_flag(low_battery))	SH1106_drawBitmap(96, 1, 5, 8, alert);
 8000bae:	2006      	movs	r0, #6
 8000bb0:	f000 face 	bl	8001150 <get_flag>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <main+0x15a>
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <main+0x1b0>)
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	2205      	movs	r2, #5
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	2060      	movs	r0, #96	; 0x60
 8000bc6:	f001 f93f 	bl	8001e48 <SH1106_drawBitmap>


    rot_val += handle_rotary_events();
 8000bca:	f000 f8ab 	bl	8000d24 <handle_rotary_events>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <main+0x1b4>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <main+0x1b4>)
 8000bdc:	801a      	strh	r2, [r3, #0]



    if (get_flag(update_display)) {
 8000bde:	2003      	movs	r0, #3
 8000be0:	f000 fab6 	bl	8001150 <get_flag>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0a4      	beq.n	8000b34 <main+0xc4>
      reset_flag(update_display);
 8000bea:	2003      	movs	r0, #3
 8000bec:	f000 faa0 	bl	8001130 <reset_flag>
      SH1106_flush();
 8000bf0:	f000 fbb4 	bl	800135c <SH1106_flush>
    if (toggle_horse) {
 8000bf4:	e79e      	b.n	8000b34 <main+0xc4>
 8000bf6:	bf00      	nop
 8000bf8:	2000018c 	.word	0x2000018c
 8000bfc:	20000170 	.word	0x20000170
 8000c00:	0800875c 	.word	0x0800875c
 8000c04:	08008b64 	.word	0x08008b64
 8000c08:	08004b2c 	.word	0x08004b2c
 8000c0c:	20000180 	.word	0x20000180
 8000c10:	20000184 	.word	0x20000184
 8000c14:	20000188 	.word	0x20000188
 8000c18:	2000018d 	.word	0x2000018d
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	08008b5c 	.word	0x08008b5c
 8000c24:	2000018e 	.word	0x2000018e

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b094      	sub	sp, #80	; 0x50
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c32:	2228      	movs	r2, #40	; 0x28
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 ff38 	bl	8004aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c66:	2301      	movs	r3, #1
 8000c68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c74:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 fd28 	bl	80036d4 <HAL_RCC_OscConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c8a:	f000 f8b1 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8e:	230f      	movs	r3, #15
 8000c90:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 ff94 	bl	8003bd8 <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cb6:	f000 f89b 	bl	8000df0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cc2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 f94e 	bl	8003f68 <HAL_RCCEx_PeriphCLKConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cd2:	f000 f88d 	bl	8000df0 <Error_Handler>
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	3750      	adds	r7, #80	; 0x50
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <get_bat_percentage>:

/* USER CODE BEGIN 4 */
uint8_t get_bat_percentage(void)	{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 8000ce6:	480e      	ldr	r0, [pc, #56]	; (8000d20 <get_bat_percentage+0x40>)
 8000ce8:	f001 faa0 	bl	800222c <HAL_ADC_Start>

	uint16_t readed_voltage = voltage_read(5*10); //5v * 10 of reference on board
 8000cec:	2032      	movs	r0, #50	; 0x32
 8000cee:	f7ff fd25 	bl	800073c <voltage_read>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
	uint8_t percent = ((readed_voltage >= V_BAT_MIN ? readed_voltage : V_BAT_MIN) - V_BAT_MIN) * (100/(V_BAT_MAX - V_BAT_MIN));	// converting [bat_min, bat_max] to [0, 100]
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	2b20      	cmp	r3, #32
 8000cfa:	bf38      	it	cc
 8000cfc:	2320      	movcc	r3, #32
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	3b20      	subs	r3, #32
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	717b      	strb	r3, [r7, #5]

	HAL_ADC_Stop(&hadc2);
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <get_bat_percentage+0x40>)
 8000d10:	f001 fb3a 	bl	8002388 <HAL_ADC_Stop>

	return percent;
 8000d14:	797b      	ldrb	r3, [r7, #5]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200000ec 	.word	0x200000ec

08000d24 <handle_rotary_events>:

int8_t handle_rotary_events(void)	{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	if (get_flag(rotary_triggered)) { // rotary encoder triggered
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f000 fa11 	bl	8001150 <get_flag>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d01b      	beq.n	8000d6c <handle_rotary_events+0x48>
	  reset_flag(rotary_triggered);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f000 f9fb 	bl	8001130 <reset_flag>
	  set_flag(wake);
 8000d3a:	2004      	movs	r0, #4
 8000d3c:	f000 f9e8 	bl	8001110 <set_flag>

	  if ((TICKS_NOW - last_move_ticks) >= ROT_DEBOUNCE_DELAY_MS) {
 8000d40:	f001 f96e 	bl	8002020 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <handle_rotary_events+0xa4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b09      	cmp	r3, #9
 8000d4e:	d937      	bls.n	8000dc0 <handle_rotary_events+0x9c>

		if (get_flag(ccw)) { //counter-clockwise rotation
 8000d50:	2002      	movs	r0, #2
 8000d52:	f000 f9fd 	bl	8001150 <get_flag>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d005      	beq.n	8000d68 <handle_rotary_events+0x44>

		  reset_flag(ccw);
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f000 f9e7 	bl	8001130 <reset_flag>
		  return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e02c      	b.n	8000dc2 <handle_rotary_events+0x9e>
		}
		else { // clockwise rotation
		  return 1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e02a      	b.n	8000dc2 <handle_rotary_events+0x9e>

		last_move_ticks = TICKS_NOW;
	  }
	}

	else if (get_flag(selected)) { // rotary encoder pressed
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f000 f9ef 	bl	8001150 <get_flag>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d023      	beq.n	8000dc0 <handle_rotary_events+0x9c>
	  reset_flag(selected);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 f9d9 	bl	8001130 <reset_flag>
	  set_flag(wake);
 8000d7e:	2004      	movs	r0, #4
 8000d80:	f000 f9c6 	bl	8001110 <set_flag>

	  if ((TICKS_NOW - last_move_ticks) >= PUSH_DEBOUNCE_DELAY_MS) {
 8000d84:	f001 f94c 	bl	8002020 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <handle_rotary_events+0xa4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d94:	d314      	bcc.n	8000dc0 <handle_rotary_events+0x9c>

		SH1106_setContrast(255);
 8000d96:	20ff      	movs	r0, #255	; 0xff
 8000d98:	f000 fa9c 	bl	80012d4 <SH1106_setContrast>
		if (get_flag(on_menu)) reset_flag(on_menu);
 8000d9c:	2008      	movs	r0, #8
 8000d9e:	f000 f9d7 	bl	8001150 <get_flag>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <handle_rotary_events+0x8c>
 8000da8:	2008      	movs	r0, #8
 8000daa:	f000 f9c1 	bl	8001130 <reset_flag>
 8000dae:	e002      	b.n	8000db6 <handle_rotary_events+0x92>
		else set_flag(on_menu);
 8000db0:	2008      	movs	r0, #8
 8000db2:	f000 f9ad 	bl	8001110 <set_flag>

		last_move_ticks = TICKS_NOW;
 8000db6:	f001 f933 	bl	8002020 <HAL_GetTick>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a02      	ldr	r2, [pc, #8]	; (8000dc8 <handle_rotary_events+0xa4>)
 8000dbe:	6013      	str	r3, [r2, #0]
	  }
	}
	return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000180 	.word	0x20000180

08000dcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d101      	bne.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dde:	f001 f90d 	bl	8001ffc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40012c00 	.word	0x40012c00

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000df8:	e7fe      	b.n	8000df8 <Error_Handler+0x8>
	...

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_MspInit+0x6c>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <HAL_MspInit+0x6c>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_MspInit+0x6c>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_MspInit+0x6c>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <HAL_MspInit+0x6c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_MspInit+0x6c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2005      	movs	r0, #5
 8000e38:	f001 fe2d 	bl	8002a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000e3c:	2005      	movs	r0, #5
 8000e3e:	f001 fe46 	bl	8002ace <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_MspInit+0x70>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_MspInit+0x70>)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010000 	.word	0x40010000

08000e70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <HAL_InitTick+0xd0>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a2d      	ldr	r2, [pc, #180]	; (8000f40 <HAL_InitTick+0xd0>)
 8000e8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <HAL_InitTick+0xd0>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e9e:	f107 020c 	add.w	r2, r7, #12
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 f80f 	bl	8003ecc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000eae:	f002 fff9 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 8000eb2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb6:	4a23      	ldr	r2, [pc, #140]	; (8000f44 <HAL_InitTick+0xd4>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	0c9b      	lsrs	r3, r3, #18
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <HAL_InitTick+0xd8>)
 8000ec4:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <HAL_InitTick+0xdc>)
 8000ec6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <HAL_InitTick+0xd8>)
 8000eca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ece:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ed0:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <HAL_InitTick+0xd8>)
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <HAL_InitTick+0xd8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <HAL_InitTick+0xd8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_InitTick+0xd8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ee8:	4817      	ldr	r0, [pc, #92]	; (8000f48 <HAL_InitTick+0xd8>)
 8000eea:	f003 f9b3 	bl	8004254 <HAL_TIM_Base_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ef4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d11b      	bne.n	8000f34 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000efc:	4812      	ldr	r0, [pc, #72]	; (8000f48 <HAL_InitTick+0xd8>)
 8000efe:	f003 f9f9 	bl	80042f4 <HAL_TIM_Base_Start_IT>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d111      	bne.n	8000f34 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f10:	2019      	movs	r0, #25
 8000f12:	f001 fddc 	bl	8002ace <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d808      	bhi.n	8000f2e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	2019      	movs	r0, #25
 8000f22:	f001 fdb8 	bl	8002a96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_InitTick+0xe0>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	e002      	b.n	8000f34 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3730      	adds	r7, #48	; 0x30
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000
 8000f44:	431bde83 	.word	0x431bde83
 8000f48:	20000190 	.word	0x20000190
 8000f4c:	40012c00 	.word	0x40012c00
 8000f50:	200000c8 	.word	0x200000c8

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000f58:	e7fe      	b.n	8000f58 <NMI_Handler+0x4>

08000f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <MemManage_Handler+0x4>

08000f66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
	...

08000fb0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <TIM1_UP_IRQHandler+0x10>)
 8000fb6:	f003 f9ef 	bl	8004398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000190 	.word	0x20000190

08000fc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <TIM2_IRQHandler+0x10>)
 8000fca:	f003 f9e5 	bl	8004398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001d8 	.word	0x200001d8

08000fd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (EXTI->PR & SELECT_Pin) {
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <EXTI15_10_IRQHandler+0x44>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d008      	beq.n	8000ffa <EXTI15_10_IRQHandler+0x22>
		/* Clear bit */
		EXTI->PR = SELECT_Pin;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <EXTI15_10_IRQHandler+0x44>)
 8000fea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fee:	615a      	str	r2, [r3, #20]
		/* Call global function */
		HAL_GPIO_EXTI_IRQHandler(SELECT_Pin);
 8000ff0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ff4:	f001 ff16 	bl	8002e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 0 */

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ff8:	e00d      	b.n	8001016 <EXTI15_10_IRQHandler+0x3e>
	else if (EXTI->PR & ROTARY_TRIG_Pin) {
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <EXTI15_10_IRQHandler+0x44>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d007      	beq.n	8001016 <EXTI15_10_IRQHandler+0x3e>
		EXTI->PR = ROTARY_TRIG_Pin;
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <EXTI15_10_IRQHandler+0x44>)
 8001008:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100c:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_IRQHandler(ROTARY_TRIG_Pin);
 800100e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001012:	f001 ff07 	bl	8002e24 <HAL_GPIO_EXTI_IRQHandler>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40010400 	.word	0x40010400

08001020 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	463b      	mov	r3, r7
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MX_TIM2_Init+0x98>)
 800104a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800104e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 -1;
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_TIM2_Init+0x98>)
 8001052:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001056:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_TIM2_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000 -1;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_TIM2_Init+0x98>)
 8001060:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001064:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_TIM2_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_TIM2_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <MX_TIM2_Init+0x98>)
 8001074:	f003 f8ee 	bl	8004254 <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800107e:	f7ff feb7 	bl	8000df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_TIM2_Init+0x98>)
 8001090:	f003 fa8a 	bl	80045a8 <HAL_TIM_ConfigClockSource>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800109a:	f7ff fea9 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_TIM2_Init+0x98>)
 80010ac:	f003 fc5c 	bl	8004968 <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010b6:	f7ff fe9b 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001d8 	.word	0x200001d8

080010c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010d8:	d113      	bne.n	8001102 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <HAL_TIM_Base_MspInit+0x44>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <HAL_TIM_Base_MspInit+0x44>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_TIM_Base_MspInit+0x44>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	201c      	movs	r0, #28
 80010f8:	f001 fccd 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010fc:	201c      	movs	r0, #28
 80010fe:	f001 fce6 	bl	8002ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000

08001110 <set_flag>:
#include "variables.h"

void set_flag(bool_var_t bool_var) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	boolVariables[bool_var] = 1;
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4a03      	ldr	r2, [pc, #12]	; (800112c <set_flag+0x1c>)
 800111e:	2101      	movs	r1, #1
 8001120:	54d1      	strb	r1, [r2, r3]
	return;
 8001122:	bf00      	nop
}
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	20000220 	.word	0x20000220

08001130 <reset_flag>:

void reset_flag(bool_var_t bool_var) {
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	boolVariables[bool_var] = 0;
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	4a03      	ldr	r2, [pc, #12]	; (800114c <reset_flag+0x1c>)
 800113e:	2100      	movs	r1, #0
 8001140:	54d1      	strb	r1, [r2, r3]
	return;
 8001142:	bf00      	nop
}
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	20000220 	.word	0x20000220

08001150 <get_flag>:

bool_t get_flag(bool_var_t bool_var) {
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	return boolVariables[bool_var];
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4a03      	ldr	r2, [pc, #12]	; (800116c <get_flag+0x1c>)
 800115e:	5cd3      	ldrb	r3, [r2, r3]
 8001160:	b2db      	uxtb	r3, r3
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	20000220 	.word	0x20000220

08001170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001172:	490d      	ldr	r1, [pc, #52]	; (80011a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001188:	4c0a      	ldr	r4, [pc, #40]	; (80011b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001196:	f7ff ff43 	bl	8001020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119a:	f003 fc55 	bl	8004a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119e:	f7ff fc67 	bl	8000a70 <main>
  bx lr
 80011a2:	4770      	bx	lr
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80011ac:	08008d78 	.word	0x08008d78
  ldr r2, =_sbss
 80011b0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80011b4:	200006b0 	.word	0x200006b0

080011b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC1_2_IRQHandler>
	...

080011bc <SH1106_cmd>:
		{ 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

// Send single byte command to display
// input:
//   cmd - display command
static void SH1106_cmd(uint8_t cmd) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	// Send command to display
	uint8_t command[] = {0x00, cmd};
 80011c6:	2300      	movs	r3, #0
 80011c8:	733b      	strb	r3, [r7, #12]
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, command,
 80011ce:	f107 020c 	add.w	r2, r7, #12
 80011d2:	230a      	movs	r3, #10
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2302      	movs	r3, #2
 80011d8:	2178      	movs	r1, #120	; 0x78
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <SH1106_cmd+0x2c>)
 80011dc:	f001 ff74 	bl	80030c8 <HAL_I2C_Master_Transmit>
			sizeof(command), 10);
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000011c 	.word	0x2000011c

080011ec <SH1106_data>:

// Send double byte command to display
// input:
//   data - page buffer data with 0x40 blocks
//   num_bytes - number of bytes to display in the page
static void SH1106_data(uint8_t* data, uint8_t num_bytes) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
	// Send double byte command to display
	HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, data,
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	220a      	movs	r2, #10
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	2178      	movs	r1, #120	; 0x78
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <SH1106_data+0x28>)
 8001206:	f001 ff5f 	bl	80030c8 <HAL_I2C_Master_Transmit>
			num_bytes, 10);
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000011c 	.word	0x2000011c

08001218 <SH1106_Init>:

// Initialize SDA peripheral and SH1106 display
// note: SDA peripheral must be initialized before
void SH1106_Init(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	// Initial display configuration
	HAL_Delay(100);
 800121c:	2064      	movs	r0, #100	; 0x64
 800121e:	f000 ff09 	bl	8002034 <HAL_Delay>

	SH1106_cmd(SH1106_CMD_DISP_OFF);
 8001222:	20ae      	movs	r0, #174	; 0xae
 8001224:	f7ff ffca 	bl	80011bc <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_COL_LOW);
 8001228:	2002      	movs	r0, #2
 800122a:	f7ff ffc7 	bl	80011bc <SH1106_cmd>
	SH1106_cmd(SH1106_CMD_COL_HIGH);
 800122e:	2010      	movs	r0, #16
 8001230:	f7ff ffc4 	bl	80011bc <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_STARTLINE);
 8001234:	2040      	movs	r0, #64	; 0x40
 8001236:	f7ff ffc1 	bl	80011bc <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_PAGE_ADDR);
 800123a:	20b0      	movs	r0, #176	; 0xb0
 800123c:	f7ff ffbe 	bl	80011bc <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_CONTRAST);
 8001240:	2081      	movs	r0, #129	; 0x81
 8001242:	f7ff ffbb 	bl	80011bc <SH1106_cmd>
	SH1106_cmd(0x88); // 0x00...0xff
 8001246:	2088      	movs	r0, #136	; 0x88
 8001248:	f7ff ffb8 	bl	80011bc <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SEG_NORM + 1);
 800124c:	20a1      	movs	r0, #161	; 0xa1
 800124e:	f7ff ffb5 	bl	80011bc <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_EDOFF); // Display follows RAM content
 8001252:	20a4      	movs	r0, #164	; 0xa4
 8001254:	f7ff ffb2 	bl	80011bc <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_INV_OFF); // Normal display mode
 8001258:	20a6      	movs	r0, #166	; 0xa6
 800125a:	f7ff ffaf 	bl	80011bc <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SETMUX);
 800125e:	20a8      	movs	r0, #168	; 0xa8
 8001260:	f7ff ffac 	bl	80011bc <SH1106_cmd>
	SH1106_cmd(0x3F); // 63 -> 64mux
 8001264:	203f      	movs	r0, #63	; 0x3f
 8001266:	f7ff ffa9 	bl	80011bc <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_DC_DC_SET);
 800126a:	20ad      	movs	r0, #173	; 0xad
 800126c:	f7ff ffa6 	bl	80011bc <SH1106_cmd>
	SH1106_cmd(0x8B); // on
 8001270:	208b      	movs	r0, #139	; 0x8b
 8001272:	f7ff ffa3 	bl	80011bc <SH1106_cmd>
	SH1106_cmd(0x32); // 8v
 8001276:	2032      	movs	r0, #50	; 0x32
 8001278:	f7ff ffa0 	bl	80011bc <SH1106_cmd>


	SH1106_cmd(SH1106_CMD_COM_INV);
 800127c:	20c8      	movs	r0, #200	; 0xc8
 800127e:	f7ff ff9d 	bl	80011bc <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SETOFFS);
 8001282:	20d3      	movs	r0, #211	; 0xd3
 8001284:	f7ff ff9a 	bl	80011bc <SH1106_cmd>
	SH1106_cmd(0x00); // 0px
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff ff97 	bl	80011bc <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_CLOCKDIV);
 800128e:	20d5      	movs	r0, #213	; 0xd5
 8001290:	f7ff ff94 	bl	80011bc <SH1106_cmd>
	SH1106_cmd(0xF0); // ~100Hz
 8001294:	20f0      	movs	r0, #240	; 0xf0
 8001296:	f7ff ff91 	bl	80011bc <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SET_CHARGE);
 800129a:	20d9      	movs	r0, #217	; 0xd9
 800129c:	f7ff ff8e 	bl	80011bc <SH1106_cmd>
	SH1106_cmd(0x2A); //4MSb are discharge ticks and 4LSb are pre charge ticks
 80012a0:	202a      	movs	r0, #42	; 0x2a
 80012a2:	f7ff ff8b 	bl	80011bc <SH1106_cmd>
	// Set COM pins hardware configuration
	// bit[4]: reset - sequential COM pin configuration
	//         set   - alternative COM pin configuration (reset value)
	// bit[5]: reset - disable COM left/right remap (reset value)
	//         set   - enable COM left/right remap
	SH1106_cmd(SH1106_CMD_COM_HW);
 80012a6:	20da      	movs	r0, #218	; 0xda
 80012a8:	f7ff ff88 	bl	80011bc <SH1106_cmd>
	SH1106_cmd(0x12);
 80012ac:	2012      	movs	r0, #18
 80012ae:	f7ff ff85 	bl	80011bc <SH1106_cmd>

	SH1106_cmd(0xDB);
 80012b2:	20db      	movs	r0, #219	; 0xdb
 80012b4:	f7ff ff82 	bl	80011bc <SH1106_cmd>
	SH1106_cmd(0x40);
 80012b8:	2040      	movs	r0, #64	; 0x40
 80012ba:	f7ff ff7f 	bl	80011bc <SH1106_cmd>

	HAL_Delay(100);
 80012be:	2064      	movs	r0, #100	; 0x64
 80012c0:	f000 feb8 	bl	8002034 <HAL_Delay>

	SH1106_cmd(SH1106_CMD_DISP_ON); // Display enabled
 80012c4:	20af      	movs	r0, #175	; 0xaf
 80012c6:	f7ff ff79 	bl	80011bc <SH1106_cmd>

	HAL_Delay(100);
 80012ca:	2064      	movs	r0, #100	; 0x64
 80012cc:	f000 feb2 	bl	8002034 <HAL_Delay>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <SH1106_setContrast>:

// set display contrast
// input:
//   contrast - new contrast value (0x00..0xff)
void SH1106_setContrast(uint8_t contrast) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
	SH1106_cmd(SH1106_CMD_CONTRAST);
 80012de:	2081      	movs	r0, #129	; 0x81
 80012e0:	f7ff ff6c 	bl	80011bc <SH1106_cmd>
	SH1106_cmd(contrast);
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff68 	bl	80011bc <SH1106_cmd>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <SH1106_setAllPixelsOn>:
// set entire LCD pixels on or off
// input:
//   eon_state - new pixels state (one of SH1106_ENTIRE_PIXELS_XXX values)
// note: SH1106_ENTIRE_PIXELS_ON means what all pixels on display will be on
//       without regard of display memory contents
void SH1106_setAllPixelsOn(uint8_t eon_state) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	SH1106_cmd(eon_state ? SH1106_CMD_EDON : SH1106_CMD_EDOFF);
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SH1106_setAllPixelsOn+0x14>
 8001304:	23a5      	movs	r3, #165	; 0xa5
 8001306:	e000      	b.n	800130a <SH1106_setAllPixelsOn+0x16>
 8001308:	23a4      	movs	r3, #164	; 0xa4
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff56 	bl	80011bc <SH1106_cmd>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <SH1106_clear>:
	// Store orientation
	scr_orientation = orientation;
}

// clear vRAM buffer
void SH1106_clear(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
	uint8_t page;
	static uint8_t null_buff[SCR_W] = {0x00};
	for (page = 0; page < 8; page++)	{
 800131e:	2300      	movs	r3, #0
 8001320:	71fb      	strb	r3, [r7, #7]
 8001322:	e00e      	b.n	8001342 <SH1106_clear+0x2a>
		memcpy(vRAM + (page << 7), null_buff, SCR_W);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	01db      	lsls	r3, r3, #7
 8001328:	461a      	mov	r2, r3
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <SH1106_clear+0x3c>)
 800132c:	4413      	add	r3, r2
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <SH1106_clear+0x40>)
 8001330:	4618      	mov	r0, r3
 8001332:	4611      	mov	r1, r2
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	461a      	mov	r2, r3
 8001338:	f003 fbaa 	bl	8004a90 <memcpy>
	for (page = 0; page < 8; page++)	{
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	3301      	adds	r3, #1
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b07      	cmp	r3, #7
 8001346:	d9ed      	bls.n	8001324 <SH1106_clear+0xc>
	}
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000022c 	.word	0x2000022c
 8001358:	2000062c 	.word	0x2000062c

0800135c <SH1106_flush>:

// Send vRAM buffer into display
void SH1106_flush(void) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	uint8_t page;
	static uint8_t screen_buffer[SCR_W + 1] = {0x40};
	for (page = 0; page < 8; page++) {
 8001362:	2300      	movs	r3, #0
 8001364:	71fb      	strb	r3, [r7, #7]
 8001366:	e01e      	b.n	80013a6 <SH1106_flush+0x4a>

		uint8_t* page_content = vRAM + (page << 7);
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	01db      	lsls	r3, r3, #7
 800136c:	461a      	mov	r2, r3
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <SH1106_flush+0x5c>)
 8001370:	4413      	add	r3, r2
 8001372:	603b      	str	r3, [r7, #0]
		memcpy(screen_buffer + 1, page_content, SCR_W);
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <SH1106_flush+0x60>)
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	6839      	ldr	r1, [r7, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f003 fb88 	bl	8004a90 <memcpy>

		SH1106_cmd(SH1106_CMD_PAGE_ADDR + page);
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	3b50      	subs	r3, #80	; 0x50
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff18 	bl	80011bc <SH1106_cmd>
		SH1106_cmd(SH1106_CMD_COL_LOW);
 800138c:	2002      	movs	r0, #2
 800138e:	f7ff ff15 	bl	80011bc <SH1106_cmd>
		SH1106_cmd(SH1106_CMD_COL_HIGH);
 8001392:	2010      	movs	r0, #16
 8001394:	f7ff ff12 	bl	80011bc <SH1106_cmd>

		SH1106_data(screen_buffer, sizeof(screen_buffer));
 8001398:	2181      	movs	r1, #129	; 0x81
 800139a:	4809      	ldr	r0, [pc, #36]	; (80013c0 <SH1106_flush+0x64>)
 800139c:	f7ff ff26 	bl	80011ec <SH1106_data>
	for (page = 0; page < 8; page++) {
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	3301      	adds	r3, #1
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b07      	cmp	r3, #7
 80013aa:	d9dd      	bls.n	8001368 <SH1106_flush+0xc>
	}
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000022c 	.word	0x2000022c
 80013bc:	20000045 	.word	0x20000045
 80013c0:	20000044 	.word	0x20000044

080013c4 <SH1106_cleanInit>:
		memcpy(vRAM + (page << 7), fill_buff, SCR_W);
	}
}

//init routine grouped in one function
void SH1106_cleanInit(void)	{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	SH1106_Init();
 80013c8:	f7ff ff26 	bl	8001218 <SH1106_Init>
	SH1106_setAllPixelsOn(0);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff ff91 	bl	80012f4 <SH1106_setAllPixelsOn>
	SH1106_clear();
 80013d2:	f7ff ffa1 	bl	8001318 <SH1106_clear>
	SH1106_flush();
 80013d6:	f7ff ffc1 	bl	800135c <SH1106_flush>
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <SH1106_drawHLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   x - horizontal coordinate of line start
//   y - vertical coordinate
//   w - line width
static void SH1106_drawHLineInt(uint8_t x, uint8_t y, uint8_t w) {
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
 80013ea:	460b      	mov	r3, r1
 80013ec:	71bb      	strb	r3, [r7, #6]
 80013ee:	4613      	mov	r3, r2
 80013f0:	717b      	strb	r3, [r7, #5]
	uint8_t *ptr;
	uint8_t mask;

	// Pointer to the first byte of line in video buffer
	// This is optimized formula, original is "((y >> 3) * SCR_W) + x"
	ptr = &vRAM[((y >> 3) << 7)] + x;
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	01db      	lsls	r3, r3, #7
 80013fa:	4a23      	ldr	r2, [pc, #140]	; (8001488 <SH1106_drawHLineInt+0xa8>)
 80013fc:	441a      	add	r2, r3
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	4413      	add	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]

	// Mask bit for pixel in byte
	mask = 1 << (y & 0x07);
 8001404:	79bb      	ldrb	r3, [r7, #6]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	2201      	movs	r2, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	72fb      	strb	r3, [r7, #11]

	// Draw line
	switch (SH1106_PixelMode) {
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <SH1106_drawHLineInt+0xac>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d002      	beq.n	8001420 <SH1106_drawHLineInt+0x40>
 800141a:	2b02      	cmp	r3, #2
 800141c:	d01a      	beq.n	8001454 <SH1106_drawHLineInt+0x74>
 800141e:	e01f      	b.n	8001460 <SH1106_drawHLineInt+0x80>
	case SH1106_PRES:
		mask = ~mask;
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	43db      	mvns	r3, r3
 8001424:	72fb      	strb	r3, [r7, #11]
		while (w--)
 8001426:	e007      	b.n	8001438 <SH1106_drawHLineInt+0x58>
			*ptr++ &= mask;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	60fa      	str	r2, [r7, #12]
 800142e:	7819      	ldrb	r1, [r3, #0]
 8001430:	7afa      	ldrb	r2, [r7, #11]
 8001432:	400a      	ands	r2, r1
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	701a      	strb	r2, [r3, #0]
		while (w--)
 8001438:	797b      	ldrb	r3, [r7, #5]
 800143a:	1e5a      	subs	r2, r3, #1
 800143c:	717a      	strb	r2, [r7, #5]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f2      	bne.n	8001428 <SH1106_drawHLineInt+0x48>
		break;
 8001442:	e01c      	b.n	800147e <SH1106_drawHLineInt+0x9e>
	case SH1106_PINV:
		while (w--)
			*ptr++ ^= mask;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	60fa      	str	r2, [r7, #12]
 800144a:	7819      	ldrb	r1, [r3, #0]
 800144c:	7afa      	ldrb	r2, [r7, #11]
 800144e:	404a      	eors	r2, r1
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	701a      	strb	r2, [r3, #0]
		while (w--)
 8001454:	797b      	ldrb	r3, [r7, #5]
 8001456:	1e5a      	subs	r2, r3, #1
 8001458:	717a      	strb	r2, [r7, #5]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f2      	bne.n	8001444 <SH1106_drawHLineInt+0x64>
		break;
 800145e:	e00e      	b.n	800147e <SH1106_drawHLineInt+0x9e>
	default:
		while (w--)
 8001460:	e007      	b.n	8001472 <SH1106_drawHLineInt+0x92>
			*ptr++ |= mask;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	60fa      	str	r2, [r7, #12]
 8001468:	7819      	ldrb	r1, [r3, #0]
 800146a:	7afa      	ldrb	r2, [r7, #11]
 800146c:	430a      	orrs	r2, r1
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	701a      	strb	r2, [r3, #0]
		while (w--)
 8001472:	797b      	ldrb	r3, [r7, #5]
 8001474:	1e5a      	subs	r2, r3, #1
 8001476:	717a      	strb	r2, [r7, #5]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f2      	bne.n	8001462 <SH1106_drawHLineInt+0x82>
		break;
 800147c:	bf00      	nop
	}
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	2000022c 	.word	0x2000022c
 800148c:	20000229 	.word	0x20000229

08001490 <SH1106_drawVLineInt>:
// Optimized draw vertical line (without regard of screen rotation)
// input:
//   x - horizontal coordinate
//   y - vertical coordinate
//   h - line length
static void SH1106_drawVLineInt(uint8_t x, uint8_t y, uint8_t h) {
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
 800149a:	460b      	mov	r3, r1
 800149c:	71bb      	strb	r3, [r7, #6]
 800149e:	4613      	mov	r3, r2
 80014a0:	717b      	strb	r3, [r7, #5]
	uint8_t mask;
	uint8_t modulo;

	// Pointer to the first byte of line in video buffer
	// This is optimized formula, original is "((y >> 3) * SCR_W) + x"
	ptr = &vRAM[((y >> 3) << 7)] + x;
 80014a2:	79bb      	ldrb	r3, [r7, #6]
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	01db      	lsls	r3, r3, #7
 80014aa:	4a5f      	ldr	r2, [pc, #380]	; (8001628 <SH1106_drawVLineInt+0x198>)
 80014ac:	441a      	add	r2, r3
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	4413      	add	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]

	// First partial byte?
	modulo = (y & 0x07);
 80014b4:	79bb      	ldrb	r3, [r7, #6]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	72bb      	strb	r3, [r7, #10]
	if (modulo) {
 80014bc:	7abb      	ldrb	r3, [r7, #10]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d046      	beq.n	8001550 <SH1106_drawVLineInt+0xc0>
		// Get bit mask for first partial byte from lookup table
		modulo = 8 - modulo;
 80014c2:	7abb      	ldrb	r3, [r7, #10]
 80014c4:	f1c3 0308 	rsb	r3, r3, #8
 80014c8:	72bb      	strb	r3, [r7, #10]
		mask = LUT_FB[modulo];
 80014ca:	7abb      	ldrb	r3, [r7, #10]
 80014cc:	4a57      	ldr	r2, [pc, #348]	; (800162c <SH1106_drawVLineInt+0x19c>)
 80014ce:	5cd3      	ldrb	r3, [r2, r3]
 80014d0:	72fb      	strb	r3, [r7, #11]

		// Trim mask if line is will not go out from a current byte
		if (modulo > h)
 80014d2:	7aba      	ldrb	r2, [r7, #10]
 80014d4:	797b      	ldrb	r3, [r7, #5]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d90b      	bls.n	80014f2 <SH1106_drawVLineInt+0x62>
			mask &= (0xFF >> (modulo - h));
 80014da:	7aba      	ldrb	r2, [r7, #10]
 80014dc:	797b      	ldrb	r3, [r7, #5]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	22ff      	movs	r2, #255	; 0xff
 80014e2:	fa42 f303 	asr.w	r3, r2, r3
 80014e6:	b25a      	sxtb	r2, r3
 80014e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80014ec:	4013      	ands	r3, r2
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	72fb      	strb	r3, [r7, #11]

		// Modify bits in first byte of line
		switch (SH1106_PixelMode) {
 80014f2:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <SH1106_drawVLineInt+0x1a0>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d002      	beq.n	8001500 <SH1106_drawVLineInt+0x70>
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d00d      	beq.n	800151a <SH1106_drawVLineInt+0x8a>
 80014fe:	e014      	b.n	800152a <SH1106_drawVLineInt+0x9a>
		case SH1106_PRES:
			*ptr &= ~mask;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b25a      	sxtb	r2, r3
 8001506:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800150a:	43db      	mvns	r3, r3
 800150c:	b25b      	sxtb	r3, r3
 800150e:	4013      	ands	r3, r2
 8001510:	b25b      	sxtb	r3, r3
 8001512:	b2da      	uxtb	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	701a      	strb	r2, [r3, #0]
			break;
 8001518:	e00f      	b.n	800153a <SH1106_drawVLineInt+0xaa>
		case SH1106_PINV:
			*ptr ^= mask;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	7afb      	ldrb	r3, [r7, #11]
 8001520:	4053      	eors	r3, r2
 8001522:	b2da      	uxtb	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	701a      	strb	r2, [r3, #0]
			break;
 8001528:	e007      	b.n	800153a <SH1106_drawVLineInt+0xaa>
		default:
			*ptr |= mask;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	781a      	ldrb	r2, [r3, #0]
 800152e:	7afb      	ldrb	r3, [r7, #11]
 8001530:	4313      	orrs	r3, r2
 8001532:	b2da      	uxtb	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	701a      	strb	r2, [r3, #0]
			break;
 8001538:	bf00      	nop
		}

		// Return if line is over
		if (modulo > h)
 800153a:	7aba      	ldrb	r2, [r7, #10]
 800153c:	797b      	ldrb	r3, [r7, #5]
 800153e:	429a      	cmp	r2, r3
 8001540:	d86d      	bhi.n	800161e <SH1106_drawVLineInt+0x18e>
			return;

		// Shift pointer to the next byte in line and decrease line height counter
		ptr += SCR_W;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3380      	adds	r3, #128	; 0x80
 8001546:	60fb      	str	r3, [r7, #12]
		h -= modulo;
 8001548:	797a      	ldrb	r2, [r7, #5]
 800154a:	7abb      	ldrb	r3, [r7, #10]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	717b      	strb	r3, [r7, #5]
	}

	// Fill solid bytes
	if (h > 7) {
 8001550:	797b      	ldrb	r3, [r7, #5]
 8001552:	2b07      	cmp	r3, #7
 8001554:	d933      	bls.n	80015be <SH1106_drawVLineInt+0x12e>
		// Separate cycle for each case of pixel mode (to improve performance)
		switch (SH1106_PixelMode) {
 8001556:	4b36      	ldr	r3, [pc, #216]	; (8001630 <SH1106_drawVLineInt+0x1a0>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d003      	beq.n	8001566 <SH1106_drawVLineInt+0xd6>
 800155e:	2b02      	cmp	r3, #2
 8001560:	d00f      	beq.n	8001582 <SH1106_drawVLineInt+0xf2>
 8001562:	e01f      	b.n	80015a4 <SH1106_drawVLineInt+0x114>
		case SH1106_PRES:
 8001564:	bf00      	nop
			do {
				*ptr = 0x00;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
				ptr += SCR_W;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3380      	adds	r3, #128	; 0x80
 8001570:	60fb      	str	r3, [r7, #12]
				h -= 8;
 8001572:	797b      	ldrb	r3, [r7, #5]
 8001574:	3b08      	subs	r3, #8
 8001576:	717b      	strb	r3, [r7, #5]
			} while (h > 7);
 8001578:	797b      	ldrb	r3, [r7, #5]
 800157a:	2b07      	cmp	r3, #7
 800157c:	d8f2      	bhi.n	8001564 <SH1106_drawVLineInt+0xd4>
			break;
 800157e:	e01f      	b.n	80015c0 <SH1106_drawVLineInt+0x130>
		case SH1106_PINV:
 8001580:	bf00      	nop
			do {
				*ptr = ~(*ptr);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	43db      	mvns	r3, r3
 8001588:	b2da      	uxtb	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	701a      	strb	r2, [r3, #0]
				ptr += SCR_W;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3380      	adds	r3, #128	; 0x80
 8001592:	60fb      	str	r3, [r7, #12]
				h -= 8;
 8001594:	797b      	ldrb	r3, [r7, #5]
 8001596:	3b08      	subs	r3, #8
 8001598:	717b      	strb	r3, [r7, #5]
			} while (h > 7);
 800159a:	797b      	ldrb	r3, [r7, #5]
 800159c:	2b07      	cmp	r3, #7
 800159e:	d8ef      	bhi.n	8001580 <SH1106_drawVLineInt+0xf0>
			break;
 80015a0:	e00e      	b.n	80015c0 <SH1106_drawVLineInt+0x130>
		default:
 80015a2:	bf00      	nop
			do {
				*ptr = 0xFF;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	701a      	strb	r2, [r3, #0]
				ptr += SCR_W;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3380      	adds	r3, #128	; 0x80
 80015ae:	60fb      	str	r3, [r7, #12]
				h -= 8;
 80015b0:	797b      	ldrb	r3, [r7, #5]
 80015b2:	3b08      	subs	r3, #8
 80015b4:	717b      	strb	r3, [r7, #5]
			} while (h > 7);
 80015b6:	797b      	ldrb	r3, [r7, #5]
 80015b8:	2b07      	cmp	r3, #7
 80015ba:	d8f2      	bhi.n	80015a2 <SH1106_drawVLineInt+0x112>
			break;
 80015bc:	e000      	b.n	80015c0 <SH1106_drawVLineInt+0x130>
		}
	}
 80015be:	bf00      	nop

	// Last partial byte?
	if (h) {
 80015c0:	797b      	ldrb	r3, [r7, #5]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d02c      	beq.n	8001620 <SH1106_drawVLineInt+0x190>
		// Get bit mask for last partial byte from lookup table
		modulo = (h & 0x07);
 80015c6:	797b      	ldrb	r3, [r7, #5]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	72bb      	strb	r3, [r7, #10]
		mask = LUT_LB[modulo];
 80015ce:	7abb      	ldrb	r3, [r7, #10]
 80015d0:	4a18      	ldr	r2, [pc, #96]	; (8001634 <SH1106_drawVLineInt+0x1a4>)
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	72fb      	strb	r3, [r7, #11]

		// Modify bits in last byte of line
		switch (SH1106_PixelMode) {
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <SH1106_drawVLineInt+0x1a0>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d002      	beq.n	80015e4 <SH1106_drawVLineInt+0x154>
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d00d      	beq.n	80015fe <SH1106_drawVLineInt+0x16e>
 80015e2:	e014      	b.n	800160e <SH1106_drawVLineInt+0x17e>
		case SH1106_PRES:
			*ptr &= ~mask;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b25a      	sxtb	r2, r3
 80015ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	4013      	ands	r3, r2
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	701a      	strb	r2, [r3, #0]
			break;
 80015fc:	e010      	b.n	8001620 <SH1106_drawVLineInt+0x190>
		case SH1106_PINV:
			*ptr ^= mask;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	4053      	eors	r3, r2
 8001606:	b2da      	uxtb	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	701a      	strb	r2, [r3, #0]
			break;
 800160c:	e008      	b.n	8001620 <SH1106_drawVLineInt+0x190>
		default:
			*ptr |= mask;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	781a      	ldrb	r2, [r3, #0]
 8001612:	7afb      	ldrb	r3, [r7, #11]
 8001614:	4313      	orrs	r3, r2
 8001616:	b2da      	uxtb	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	701a      	strb	r2, [r3, #0]
			break;
 800161c:	e000      	b.n	8001620 <SH1106_drawVLineInt+0x190>
			return;
 800161e:	bf00      	nop
		}
	}
}
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	2000022c 	.word	0x2000022c
 800162c:	08008d60 	.word	0x08008d60
 8001630:	20000229 	.word	0x20000229
 8001634:	08008d68 	.word	0x08008d68

08001638 <SH1106_drawHLine>:

// Draw horizontal line
// input:
//   x1, x2 - left and right horizontal coordinates
//   y - vertical coordinate
void SH1106_drawHLine(uint8_t x1, uint8_t x2, uint8_t y) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	460b      	mov	r3, r1
 8001644:	71bb      	strb	r3, [r7, #6]
 8001646:	4613      	mov	r3, r2
 8001648:	717b      	strb	r3, [r7, #5]
	uint8_t x, w;

	if (x1 > x2) {
 800164a:	79fa      	ldrb	r2, [r7, #7]
 800164c:	79bb      	ldrb	r3, [r7, #6]
 800164e:	429a      	cmp	r2, r3
 8001650:	d906      	bls.n	8001660 <SH1106_drawHLine+0x28>
		x = x2;
 8001652:	79bb      	ldrb	r3, [r7, #6]
 8001654:	73fb      	strb	r3, [r7, #15]
		w = x1 - x2;
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	73bb      	strb	r3, [r7, #14]
 800165e:	e005      	b.n	800166c <SH1106_drawHLine+0x34>
	} else {
		x = x1;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	73fb      	strb	r3, [r7, #15]
		w = x2 - x1;
 8001664:	79ba      	ldrb	r2, [r7, #6]
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	73bb      	strb	r3, [r7, #14]
	}
	w++;
 800166c:	7bbb      	ldrb	r3, [r7, #14]
 800166e:	3301      	adds	r3, #1
 8001670:	73bb      	strb	r3, [r7, #14]

	if (scr_orientation == SH1106_ORIENT_CW
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <SH1106_drawHLine+0x70>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d003      	beq.n	8001682 <SH1106_drawHLine+0x4a>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <SH1106_drawHLine+0x70>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d106      	bne.n	8001690 <SH1106_drawHLine+0x58>
		SH1106_drawVLineInt(y, x, w);
 8001682:	7bba      	ldrb	r2, [r7, #14]
 8001684:	7bf9      	ldrb	r1, [r7, #15]
 8001686:	797b      	ldrb	r3, [r7, #5]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff01 	bl	8001490 <SH1106_drawVLineInt>
 800168e:	e006      	b.n	800169e <SH1106_drawHLine+0x66>
	} else {
		SH1106_drawHLineInt(x, y, w);
 8001690:	7bba      	ldrb	r2, [r7, #14]
 8001692:	7979      	ldrb	r1, [r7, #5]
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fea2 	bl	80013e0 <SH1106_drawHLineInt>
	}
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000022a 	.word	0x2000022a

080016ac <SH1106_drawVLine>:

// Draw vertical line
// input:
//   x - horizontal coordinate
//   y1,y2 - top and bottom vertical coordinates (y1 must be less than y2)
void SH1106_drawVLine(uint8_t x, uint8_t y1, uint8_t y2) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
 80016b6:	460b      	mov	r3, r1
 80016b8:	71bb      	strb	r3, [r7, #6]
 80016ba:	4613      	mov	r3, r2
 80016bc:	717b      	strb	r3, [r7, #5]
	uint8_t y, h;

	if (y1 > y2) {
 80016be:	79ba      	ldrb	r2, [r7, #6]
 80016c0:	797b      	ldrb	r3, [r7, #5]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d906      	bls.n	80016d4 <SH1106_drawVLine+0x28>
		y = y2;
 80016c6:	797b      	ldrb	r3, [r7, #5]
 80016c8:	73fb      	strb	r3, [r7, #15]
		h = y1 - y2;
 80016ca:	79ba      	ldrb	r2, [r7, #6]
 80016cc:	797b      	ldrb	r3, [r7, #5]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	73bb      	strb	r3, [r7, #14]
 80016d2:	e005      	b.n	80016e0 <SH1106_drawVLine+0x34>
	} else {
		y = y1;
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	73fb      	strb	r3, [r7, #15]
		h = y2 - y1;
 80016d8:	797a      	ldrb	r2, [r7, #5]
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	73bb      	strb	r3, [r7, #14]
	}
	h++;
 80016e0:	7bbb      	ldrb	r3, [r7, #14]
 80016e2:	3301      	adds	r3, #1
 80016e4:	73bb      	strb	r3, [r7, #14]

	if (scr_orientation == SH1106_ORIENT_CW
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <SH1106_drawVLine+0x70>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d003      	beq.n	80016f6 <SH1106_drawVLine+0x4a>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <SH1106_drawVLine+0x70>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d106      	bne.n	8001704 <SH1106_drawVLine+0x58>
		SH1106_drawHLineInt(y, x, h);
 80016f6:	7bba      	ldrb	r2, [r7, #14]
 80016f8:	79f9      	ldrb	r1, [r7, #7]
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fe6f 	bl	80013e0 <SH1106_drawHLineInt>
 8001702:	e006      	b.n	8001712 <SH1106_drawVLine+0x66>
	} else {
		SH1106_drawVLineInt(x, y, h);
 8001704:	7bba      	ldrb	r2, [r7, #14]
 8001706:	7bf9      	ldrb	r1, [r7, #15]
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fec0 	bl	8001490 <SH1106_drawVLineInt>
	}
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000022a 	.word	0x2000022a

08001720 <SH1106_fillRect>:

// Draw filled rectangle
// input:
//   x1,y1 - top left coordinates
//   x2,y2 - bottom right coordinates
void SH1106_fillRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	4604      	mov	r4, r0
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4623      	mov	r3, r4
 8001730:	71fb      	strb	r3, [r7, #7]
 8001732:	4603      	mov	r3, r0
 8001734:	71bb      	strb	r3, [r7, #6]
 8001736:	460b      	mov	r3, r1
 8001738:	717b      	strb	r3, [r7, #5]
 800173a:	4613      	mov	r3, r2
 800173c:	713b      	strb	r3, [r7, #4]
	uint8_t z, e, t, l;

	// Fill rectangle by vertical lines is most optimal, therefore calculate coordinates
	// with regard of screen rotation
	if (scr_orientation == SH1106_ORIENT_CW
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <SH1106_fillRect+0xd0>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d003      	beq.n	800174e <SH1106_fillRect+0x2e>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001746:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <SH1106_fillRect+0xd0>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d11e      	bne.n	800178c <SH1106_fillRect+0x6c>
		if (x1 > x2) {
 800174e:	79fa      	ldrb	r2, [r7, #7]
 8001750:	797b      	ldrb	r3, [r7, #5]
 8001752:	429a      	cmp	r2, r3
 8001754:	d906      	bls.n	8001764 <SH1106_fillRect+0x44>
			t = x2;
 8001756:	797b      	ldrb	r3, [r7, #5]
 8001758:	737b      	strb	r3, [r7, #13]
			l = x1 - x2;
 800175a:	79fa      	ldrb	r2, [r7, #7]
 800175c:	797b      	ldrb	r3, [r7, #5]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	733b      	strb	r3, [r7, #12]
 8001762:	e005      	b.n	8001770 <SH1106_fillRect+0x50>
		} else {
			t = x1;
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	737b      	strb	r3, [r7, #13]
			l = x2 - x1;
 8001768:	797a      	ldrb	r2, [r7, #5]
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	733b      	strb	r3, [r7, #12]
		}

		if (y1 > y2) {
 8001770:	79ba      	ldrb	r2, [r7, #6]
 8001772:	793b      	ldrb	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	d904      	bls.n	8001782 <SH1106_fillRect+0x62>
			z = y1;
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	73fb      	strb	r3, [r7, #15]
			e = y2;
 800177c:	793b      	ldrb	r3, [r7, #4]
 800177e:	73bb      	strb	r3, [r7, #14]
		if (y1 > y2) {
 8001780:	e022      	b.n	80017c8 <SH1106_fillRect+0xa8>
		} else {
			z = y2;
 8001782:	793b      	ldrb	r3, [r7, #4]
 8001784:	73fb      	strb	r3, [r7, #15]
			e = y1;
 8001786:	79bb      	ldrb	r3, [r7, #6]
 8001788:	73bb      	strb	r3, [r7, #14]
		if (y1 > y2) {
 800178a:	e01d      	b.n	80017c8 <SH1106_fillRect+0xa8>
		}
	} else {
		if (y1 > y2) {
 800178c:	79ba      	ldrb	r2, [r7, #6]
 800178e:	793b      	ldrb	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	d906      	bls.n	80017a2 <SH1106_fillRect+0x82>
			t = y2;
 8001794:	793b      	ldrb	r3, [r7, #4]
 8001796:	737b      	strb	r3, [r7, #13]
			l = y1 - y2;
 8001798:	79ba      	ldrb	r2, [r7, #6]
 800179a:	793b      	ldrb	r3, [r7, #4]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	733b      	strb	r3, [r7, #12]
 80017a0:	e005      	b.n	80017ae <SH1106_fillRect+0x8e>
		} else {
			t = y1;
 80017a2:	79bb      	ldrb	r3, [r7, #6]
 80017a4:	737b      	strb	r3, [r7, #13]
			l = y2 - y1;
 80017a6:	793a      	ldrb	r2, [r7, #4]
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	733b      	strb	r3, [r7, #12]
		}

		if (x1 > x2) {
 80017ae:	79fa      	ldrb	r2, [r7, #7]
 80017b0:	797b      	ldrb	r3, [r7, #5]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d904      	bls.n	80017c0 <SH1106_fillRect+0xa0>
			z = x1;
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	73fb      	strb	r3, [r7, #15]
			e = x2;
 80017ba:	797b      	ldrb	r3, [r7, #5]
 80017bc:	73bb      	strb	r3, [r7, #14]
 80017be:	e003      	b.n	80017c8 <SH1106_fillRect+0xa8>
		} else {
			z = x2;
 80017c0:	797b      	ldrb	r3, [r7, #5]
 80017c2:	73fb      	strb	r3, [r7, #15]
			e = x1;
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	73bb      	strb	r3, [r7, #14]
		}
	}
	l++;
 80017c8:	7b3b      	ldrb	r3, [r7, #12]
 80017ca:	3301      	adds	r3, #1
 80017cc:	733b      	strb	r3, [r7, #12]

	// Fill a rectangle
	do {
		SH1106_drawVLineInt(z, t, l);
 80017ce:	7b3a      	ldrb	r2, [r7, #12]
 80017d0:	7b79      	ldrb	r1, [r7, #13]
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fe5b 	bl	8001490 <SH1106_drawVLineInt>
	} while (z-- > e);
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	1e5a      	subs	r2, r3, #1
 80017de:	73fa      	strb	r2, [r7, #15]
 80017e0:	7bba      	ldrb	r2, [r7, #14]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3f3      	bcc.n	80017ce <SH1106_fillRect+0xae>
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd90      	pop	{r4, r7, pc}
 80017f0:	2000022a 	.word	0x2000022a

080017f4 <SH1106_drawRoundRectFill>:
 * @param x: topleft x coordinate to draw gauge
 * @param y: topleft y coordinate to draw gauge
 * @param w: width of the gauge
 * @param h: height of the gauge
 */
void SH1106_drawRoundRectFill(uint8_t fill_percentage, uint8_t x, uint8_t y, uint8_t w, uint8_t h)	{
 80017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4604      	mov	r4, r0
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4623      	mov	r3, r4
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	4603      	mov	r3, r0
 8001808:	71bb      	strb	r3, [r7, #6]
 800180a:	460b      	mov	r3, r1
 800180c:	717b      	strb	r3, [r7, #5]
 800180e:	4613      	mov	r3, r2
 8001810:	713b      	strb	r3, [r7, #4]
	SH1106_drawHLine(x+1, x+(w-1), y); //top
 8001812:	79bb      	ldrb	r3, [r7, #6]
 8001814:	3301      	adds	r3, #1
 8001816:	b2d8      	uxtb	r0, r3
 8001818:	793a      	ldrb	r2, [r7, #4]
 800181a:	79bb      	ldrb	r3, [r7, #6]
 800181c:	4413      	add	r3, r2
 800181e:	b2db      	uxtb	r3, r3
 8001820:	3b01      	subs	r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	797a      	ldrb	r2, [r7, #5]
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff ff06 	bl	8001638 <SH1106_drawHLine>
    SH1106_drawHLine(x+1, x+(w-1), y+(h-1)); //bottom
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3301      	adds	r3, #1
 8001830:	b2d8      	uxtb	r0, r3
 8001832:	793a      	ldrb	r2, [r7, #4]
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	4413      	add	r3, r2
 8001838:	b2db      	uxtb	r3, r3
 800183a:	3b01      	subs	r3, #1
 800183c:	b2d9      	uxtb	r1, r3
 800183e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001842:	797b      	ldrb	r3, [r7, #5]
 8001844:	4413      	add	r3, r2
 8001846:	b2db      	uxtb	r3, r3
 8001848:	3b01      	subs	r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	f7ff fef3 	bl	8001638 <SH1106_drawHLine>
    SH1106_drawVLine(x, y+1, y+(h-2)); //left
 8001852:	797b      	ldrb	r3, [r7, #5]
 8001854:	3301      	adds	r3, #1
 8001856:	b2d9      	uxtb	r1, r3
 8001858:	f897 2020 	ldrb.w	r2, [r7, #32]
 800185c:	797b      	ldrb	r3, [r7, #5]
 800185e:	4413      	add	r3, r2
 8001860:	b2db      	uxtb	r3, r3
 8001862:	3b02      	subs	r3, #2
 8001864:	b2da      	uxtb	r2, r3
 8001866:	79bb      	ldrb	r3, [r7, #6]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff1f 	bl	80016ac <SH1106_drawVLine>
    SH1106_drawVLine(x+w, y+1, y+(h-2)); //right
 800186e:	79ba      	ldrb	r2, [r7, #6]
 8001870:	793b      	ldrb	r3, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	b2d8      	uxtb	r0, r3
 8001876:	797b      	ldrb	r3, [r7, #5]
 8001878:	3301      	adds	r3, #1
 800187a:	b2d9      	uxtb	r1, r3
 800187c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001880:	797b      	ldrb	r3, [r7, #5]
 8001882:	4413      	add	r3, r2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	3b02      	subs	r3, #2
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	f7ff ff0e 	bl	80016ac <SH1106_drawVLine>
    SH1106_fillRect(x, y+1, x+(fill_percentage/(100/(float)w)), y+(h-2)); //percentage for filling
 8001890:	797b      	ldrb	r3, [r7, #5]
 8001892:	3301      	adds	r3, #1
 8001894:	b2dc      	uxtb	r4, r3
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fd11 	bl	80002c0 <__aeabi_i2f>
 800189e:	4605      	mov	r5, r0
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fd0c 	bl	80002c0 <__aeabi_i2f>
 80018a8:	4606      	mov	r6, r0
 80018aa:	793b      	ldrb	r3, [r7, #4]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fd03 	bl	80002b8 <__aeabi_ui2f>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4619      	mov	r1, r3
 80018b6:	4811      	ldr	r0, [pc, #68]	; (80018fc <SH1106_drawRoundRectFill+0x108>)
 80018b8:	f7fe fe0a 	bl	80004d0 <__aeabi_fdiv>
 80018bc:	4603      	mov	r3, r0
 80018be:	4619      	mov	r1, r3
 80018c0:	4630      	mov	r0, r6
 80018c2:	f7fe fe05 	bl	80004d0 <__aeabi_fdiv>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4619      	mov	r1, r3
 80018ca:	4628      	mov	r0, r5
 80018cc:	f7fe fc44 	bl	8000158 <__addsf3>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe98 	bl	8000608 <__aeabi_f2uiz>
 80018d8:	4603      	mov	r3, r0
 80018da:	b2d9      	uxtb	r1, r3
 80018dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018e0:	797b      	ldrb	r3, [r7, #5]
 80018e2:	4413      	add	r3, r2
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	3b02      	subs	r3, #2
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	79b8      	ldrb	r0, [r7, #6]
 80018ec:	460a      	mov	r2, r1
 80018ee:	4621      	mov	r1, r4
 80018f0:	f7ff ff16 	bl	8001720 <SH1106_fillRect>
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fc:	42c80000 	.word	0x42c80000

08001900 <SH1106_printChar>:
//   x,y - character top left corner coordinates
//   ch - character to be drawn
//   Font - pointer to font
// return: character width in pixels
uint8_t SH1106_printChar(uint8_t x, uint8_t y, uint8_t ch,
		const Font_TypeDef *Font) {
 8001900:	b4b0      	push	{r4, r5, r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	4603      	mov	r3, r0
 800190a:	71fb      	strb	r3, [r7, #7]
 800190c:	460b      	mov	r3, r1
 800190e:	71bb      	strb	r3, [r7, #6]
 8001910:	4613      	mov	r3, r2
 8001912:	717b      	strb	r3, [r7, #5]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if (ch < Font->font_MinChar || ch > Font->font_MaxChar)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	791b      	ldrb	r3, [r3, #4]
 8001918:	797a      	ldrb	r2, [r7, #5]
 800191a:	429a      	cmp	r2, r3
 800191c:	d304      	bcc.n	8001928 <SH1106_printChar+0x28>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	795b      	ldrb	r3, [r3, #5]
 8001922:	797a      	ldrb	r2, [r7, #5]
 8001924:	429a      	cmp	r2, r3
 8001926:	d902      	bls.n	800192e <SH1106_printChar+0x2e>
		ch = Font->font_UnknownChar;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	799b      	ldrb	r3, [r3, #6]
 800192c:	717b      	strb	r3, [r7, #5]

	// Pointer to the first byte of character in font data array
	pCh = &Font->font_Data[(ch - Font->font_MinChar) * Font->font_BPC];
 800192e:	797b      	ldrb	r3, [r7, #5]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	7912      	ldrb	r2, [r2, #4]
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	7892      	ldrb	r2, [r2, #2]
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	4413      	add	r3, r2
 8001942:	3307      	adds	r3, #7
 8001944:	61bb      	str	r3, [r7, #24]

	// Draw character
	if (Font->font_Scan == FONT_V) {
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	78db      	ldrb	r3, [r3, #3]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 8116 	bne.w	8001b7c <SH1106_printChar+0x27c>
		// Vertical pixels order
		if (Font->font_Height < 9) {
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	785b      	ldrb	r3, [r3, #1]
 8001954:	2b08      	cmp	r3, #8
 8001956:	d878      	bhi.n	8001a4a <SH1106_printChar+0x14a>
			// Height is 8 pixels or less (one byte per column)
			p_x = x;
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	77fb      	strb	r3, [r7, #31]
			while (p_x < x + Font->font_Width) {
 800195c:	e06d      	b.n	8001a3a <SH1106_printChar+0x13a>
				p_y = y;
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	77bb      	strb	r3, [r7, #30]
				tmpCh = *pCh++;
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	61ba      	str	r2, [r7, #24]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	777b      	strb	r3, [r7, #29]
				while (tmpCh) {
 800196c:	e05f      	b.n	8001a2e <SH1106_printChar+0x12e>
					if (tmpCh & 0x01)
 800196e:	7f7b      	ldrb	r3, [r7, #29]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d054      	beq.n	8001a22 <SH1106_printChar+0x122>
						SH1106_pixel(p_x, p_y, SH1106_PixelMode);
 8001978:	4b98      	ldr	r3, [pc, #608]	; (8001bdc <SH1106_printChar+0x2dc>)
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	7ffb      	ldrb	r3, [r7, #31]
 800197e:	75fb      	strb	r3, [r7, #23]
 8001980:	7fbb      	ldrb	r3, [r7, #30]
 8001982:	75bb      	strb	r3, [r7, #22]
 8001984:	4613      	mov	r3, r2
 8001986:	757b      	strb	r3, [r7, #21]
	if (scr_orientation == SH1106_ORIENT_CW
 8001988:	4b95      	ldr	r3, [pc, #596]	; (8001be0 <SH1106_printChar+0x2e0>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d003      	beq.n	8001998 <SH1106_printChar+0x98>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001990:	4b93      	ldr	r3, [pc, #588]	; (8001be0 <SH1106_printChar+0x2e0>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d10a      	bne.n	80019ae <SH1106_printChar+0xae>
		offset = ((x >> 3) << 7) + y;
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	08db      	lsrs	r3, r3, #3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	01da      	lsls	r2, r3, #7
 80019a0:	7dbb      	ldrb	r3, [r7, #22]
 80019a2:	4413      	add	r3, r2
 80019a4:	461c      	mov	r4, r3
		bpos = x & 0x07;
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	f003 0507 	and.w	r5, r3, #7
 80019ac:	e009      	b.n	80019c2 <SH1106_printChar+0xc2>
		offset = ((y >> 3) << 7) + x;
 80019ae:	7dbb      	ldrb	r3, [r7, #22]
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	01da      	lsls	r2, r3, #7
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	4413      	add	r3, r2
 80019ba:	461c      	mov	r4, r3
		bpos = y & 0x07;
 80019bc:	7dbb      	ldrb	r3, [r7, #22]
 80019be:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 80019c2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80019c6:	d82b      	bhi.n	8001a20 <SH1106_printChar+0x120>
	switch (Mode) {
 80019c8:	7d7b      	ldrb	r3, [r7, #21]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d002      	beq.n	80019d4 <SH1106_printChar+0xd4>
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d00e      	beq.n	80019f0 <SH1106_printChar+0xf0>
 80019d2:	e019      	b.n	8001a08 <SH1106_printChar+0x108>
		vRAM[offset] &= ~(1 << bpos);
 80019d4:	4b83      	ldr	r3, [pc, #524]	; (8001be4 <SH1106_printChar+0x2e4>)
 80019d6:	5d1b      	ldrb	r3, [r3, r4]
 80019d8:	b25a      	sxtb	r2, r3
 80019da:	2301      	movs	r3, #1
 80019dc:	40ab      	lsls	r3, r5
 80019de:	b25b      	sxtb	r3, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	b25b      	sxtb	r3, r3
 80019e4:	4013      	ands	r3, r2
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b7e      	ldr	r3, [pc, #504]	; (8001be4 <SH1106_printChar+0x2e4>)
 80019ec:	551a      	strb	r2, [r3, r4]
		break;
 80019ee:	e018      	b.n	8001a22 <SH1106_printChar+0x122>
		vRAM[offset] ^= (1 << bpos);
 80019f0:	4b7c      	ldr	r3, [pc, #496]	; (8001be4 <SH1106_printChar+0x2e4>)
 80019f2:	5d1b      	ldrb	r3, [r3, r4]
 80019f4:	b25a      	sxtb	r2, r3
 80019f6:	2301      	movs	r3, #1
 80019f8:	40ab      	lsls	r3, r5
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	4053      	eors	r3, r2
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b78      	ldr	r3, [pc, #480]	; (8001be4 <SH1106_printChar+0x2e4>)
 8001a04:	551a      	strb	r2, [r3, r4]
		break;
 8001a06:	e00c      	b.n	8001a22 <SH1106_printChar+0x122>
		vRAM[offset] |= (1 << bpos);
 8001a08:	4b76      	ldr	r3, [pc, #472]	; (8001be4 <SH1106_printChar+0x2e4>)
 8001a0a:	5d1b      	ldrb	r3, [r3, r4]
 8001a0c:	b25a      	sxtb	r2, r3
 8001a0e:	2301      	movs	r3, #1
 8001a10:	40ab      	lsls	r3, r5
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b72      	ldr	r3, [pc, #456]	; (8001be4 <SH1106_printChar+0x2e4>)
 8001a1c:	551a      	strb	r2, [r3, r4]
		break;
 8001a1e:	e000      	b.n	8001a22 <SH1106_printChar+0x122>
		return;
 8001a20:	bf00      	nop
					tmpCh >>= 1;
 8001a22:	7f7b      	ldrb	r3, [r7, #29]
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	777b      	strb	r3, [r7, #29]
					p_y++;
 8001a28:	7fbb      	ldrb	r3, [r7, #30]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	77bb      	strb	r3, [r7, #30]
				while (tmpCh) {
 8001a2e:	7f7b      	ldrb	r3, [r7, #29]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d19c      	bne.n	800196e <SH1106_printChar+0x6e>
				}
				p_x++;
 8001a34:	7ffb      	ldrb	r3, [r7, #31]
 8001a36:	3301      	adds	r3, #1
 8001a38:	77fb      	strb	r3, [r7, #31]
			while (p_x < x + Font->font_Width) {
 8001a3a:	7ffa      	ldrb	r2, [r7, #31]
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	6839      	ldr	r1, [r7, #0]
 8001a40:	7809      	ldrb	r1, [r1, #0]
 8001a42:	440b      	add	r3, r1
 8001a44:	429a      	cmp	r2, r3
 8001a46:	db8a      	blt.n	800195e <SH1106_printChar+0x5e>
 8001a48:	e1b4      	b.n	8001db4 <SH1106_printChar+0x4b4>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			p_x = x;
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	77fb      	strb	r3, [r7, #31]
			while (p_x < x + Font->font_Width) {
 8001a4e:	e08c      	b.n	8001b6a <SH1106_printChar+0x26a>
				p_y = y;
 8001a50:	79bb      	ldrb	r3, [r7, #6]
 8001a52:	77bb      	strb	r3, [r7, #30]
				while (p_y < y + Font->font_Height) {
 8001a54:	e07e      	b.n	8001b54 <SH1106_printChar+0x254>
					bL = 8;
 8001a56:	2308      	movs	r3, #8
 8001a58:	773b      	strb	r3, [r7, #28]
					tmpCh = *pCh++;
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	61ba      	str	r2, [r7, #24]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	777b      	strb	r3, [r7, #29]
					if (tmpCh) {
 8001a64:	7f7b      	ldrb	r3, [r7, #29]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d070      	beq.n	8001b4c <SH1106_printChar+0x24c>
						while (bL) {
 8001a6a:	e06b      	b.n	8001b44 <SH1106_printChar+0x244>
							if (tmpCh & 0x01)
 8001a6c:	7f7b      	ldrb	r3, [r7, #29]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d054      	beq.n	8001b20 <SH1106_printChar+0x220>
								SH1106_pixel(p_x, p_y, SH1106_PixelMode);
 8001a76:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <SH1106_printChar+0x2dc>)
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	7ffb      	ldrb	r3, [r7, #31]
 8001a7c:	753b      	strb	r3, [r7, #20]
 8001a7e:	7fbb      	ldrb	r3, [r7, #30]
 8001a80:	74fb      	strb	r3, [r7, #19]
 8001a82:	4613      	mov	r3, r2
 8001a84:	74bb      	strb	r3, [r7, #18]
	if (scr_orientation == SH1106_ORIENT_CW
 8001a86:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <SH1106_printChar+0x2e0>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d003      	beq.n	8001a96 <SH1106_printChar+0x196>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001a8e:	4b54      	ldr	r3, [pc, #336]	; (8001be0 <SH1106_printChar+0x2e0>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d10a      	bne.n	8001aac <SH1106_printChar+0x1ac>
		offset = ((x >> 3) << 7) + y;
 8001a96:	7d3b      	ldrb	r3, [r7, #20]
 8001a98:	08db      	lsrs	r3, r3, #3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	01da      	lsls	r2, r3, #7
 8001a9e:	7cfb      	ldrb	r3, [r7, #19]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001aa4:	7d3b      	ldrb	r3, [r7, #20]
 8001aa6:	f003 0507 	and.w	r5, r3, #7
 8001aaa:	e009      	b.n	8001ac0 <SH1106_printChar+0x1c0>
		offset = ((y >> 3) << 7) + x;
 8001aac:	7cfb      	ldrb	r3, [r7, #19]
 8001aae:	08db      	lsrs	r3, r3, #3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	01da      	lsls	r2, r3, #7
 8001ab4:	7d3b      	ldrb	r3, [r7, #20]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001aba:	7cfb      	ldrb	r3, [r7, #19]
 8001abc:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001ac0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001ac4:	d82b      	bhi.n	8001b1e <SH1106_printChar+0x21e>
	switch (Mode) {
 8001ac6:	7cbb      	ldrb	r3, [r7, #18]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d002      	beq.n	8001ad2 <SH1106_printChar+0x1d2>
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d00e      	beq.n	8001aee <SH1106_printChar+0x1ee>
 8001ad0:	e019      	b.n	8001b06 <SH1106_printChar+0x206>
		vRAM[offset] &= ~(1 << bpos);
 8001ad2:	4b44      	ldr	r3, [pc, #272]	; (8001be4 <SH1106_printChar+0x2e4>)
 8001ad4:	5d1b      	ldrb	r3, [r3, r4]
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	2301      	movs	r3, #1
 8001ada:	40ab      	lsls	r3, r5
 8001adc:	b25b      	sxtb	r3, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <SH1106_printChar+0x2e4>)
 8001aea:	551a      	strb	r2, [r3, r4]
		break;
 8001aec:	e018      	b.n	8001b20 <SH1106_printChar+0x220>
		vRAM[offset] ^= (1 << bpos);
 8001aee:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <SH1106_printChar+0x2e4>)
 8001af0:	5d1b      	ldrb	r3, [r3, r4]
 8001af2:	b25a      	sxtb	r2, r3
 8001af4:	2301      	movs	r3, #1
 8001af6:	40ab      	lsls	r3, r5
 8001af8:	b25b      	sxtb	r3, r3
 8001afa:	4053      	eors	r3, r2
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <SH1106_printChar+0x2e4>)
 8001b02:	551a      	strb	r2, [r3, r4]
		break;
 8001b04:	e00c      	b.n	8001b20 <SH1106_printChar+0x220>
		vRAM[offset] |= (1 << bpos);
 8001b06:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <SH1106_printChar+0x2e4>)
 8001b08:	5d1b      	ldrb	r3, [r3, r4]
 8001b0a:	b25a      	sxtb	r2, r3
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	40ab      	lsls	r3, r5
 8001b10:	b25b      	sxtb	r3, r3
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <SH1106_printChar+0x2e4>)
 8001b1a:	551a      	strb	r2, [r3, r4]
		break;
 8001b1c:	e000      	b.n	8001b20 <SH1106_printChar+0x220>
		return;
 8001b1e:	bf00      	nop
							tmpCh >>= 1;
 8001b20:	7f7b      	ldrb	r3, [r7, #29]
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	777b      	strb	r3, [r7, #29]
							if (tmpCh) {
 8001b26:	7f7b      	ldrb	r3, [r7, #29]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <SH1106_printChar+0x23a>
								p_y++;
 8001b2c:	7fbb      	ldrb	r3, [r7, #30]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	77bb      	strb	r3, [r7, #30]
								bL--;
 8001b32:	7f3b      	ldrb	r3, [r7, #28]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	773b      	strb	r3, [r7, #28]
 8001b38:	e004      	b.n	8001b44 <SH1106_printChar+0x244>
							} else {
								p_y += bL;
 8001b3a:	7fba      	ldrb	r2, [r7, #30]
 8001b3c:	7f3b      	ldrb	r3, [r7, #28]
 8001b3e:	4413      	add	r3, r2
 8001b40:	77bb      	strb	r3, [r7, #30]
								break;
 8001b42:	e007      	b.n	8001b54 <SH1106_printChar+0x254>
						while (bL) {
 8001b44:	7f3b      	ldrb	r3, [r7, #28]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d190      	bne.n	8001a6c <SH1106_printChar+0x16c>
 8001b4a:	e003      	b.n	8001b54 <SH1106_printChar+0x254>
							}
						}
					} else {
						p_y += bL;
 8001b4c:	7fba      	ldrb	r2, [r7, #30]
 8001b4e:	7f3b      	ldrb	r3, [r7, #28]
 8001b50:	4413      	add	r3, r2
 8001b52:	77bb      	strb	r3, [r7, #30]
				while (p_y < y + Font->font_Height) {
 8001b54:	7fba      	ldrb	r2, [r7, #30]
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	6839      	ldr	r1, [r7, #0]
 8001b5a:	7849      	ldrb	r1, [r1, #1]
 8001b5c:	440b      	add	r3, r1
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	f6ff af79 	blt.w	8001a56 <SH1106_printChar+0x156>
					}
				}
				p_x++;
 8001b64:	7ffb      	ldrb	r3, [r7, #31]
 8001b66:	3301      	adds	r3, #1
 8001b68:	77fb      	strb	r3, [r7, #31]
			while (p_x < x + Font->font_Width) {
 8001b6a:	7ffa      	ldrb	r2, [r7, #31]
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	6839      	ldr	r1, [r7, #0]
 8001b70:	7809      	ldrb	r1, [r1, #0]
 8001b72:	440b      	add	r3, r1
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f6ff af6b 	blt.w	8001a50 <SH1106_printChar+0x150>
 8001b7a:	e11b      	b.n	8001db4 <SH1106_printChar+0x4b4>
			}
		}
	} else {
		// Horizontal pixels order
		if (Font->font_Width < 9) {
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d87f      	bhi.n	8001c84 <SH1106_printChar+0x384>
			// Width is 8 pixels or less (one byte per row)
			p_y = y;
 8001b84:	79bb      	ldrb	r3, [r7, #6]
 8001b86:	77bb      	strb	r3, [r7, #30]
			while (p_y < y + Font->font_Height) {
 8001b88:	e074      	b.n	8001c74 <SH1106_printChar+0x374>
				p_x = x;
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	77fb      	strb	r3, [r7, #31]
				tmpCh = *pCh++;
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	61ba      	str	r2, [r7, #24]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	777b      	strb	r3, [r7, #29]
				while (tmpCh) {
 8001b98:	e066      	b.n	8001c68 <SH1106_printChar+0x368>
					if (tmpCh & 0x01)
 8001b9a:	7f7b      	ldrb	r3, [r7, #29]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d05b      	beq.n	8001c5c <SH1106_printChar+0x35c>
						SH1106_pixel(p_x, p_y, SH1106_PixelMode);
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <SH1106_printChar+0x2dc>)
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	7ffb      	ldrb	r3, [r7, #31]
 8001baa:	747b      	strb	r3, [r7, #17]
 8001bac:	7fbb      	ldrb	r3, [r7, #30]
 8001bae:	743b      	strb	r3, [r7, #16]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	73fb      	strb	r3, [r7, #15]
	if (scr_orientation == SH1106_ORIENT_CW
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <SH1106_printChar+0x2e0>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d003      	beq.n	8001bc4 <SH1106_printChar+0x2c4>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <SH1106_printChar+0x2e0>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d111      	bne.n	8001be8 <SH1106_printChar+0x2e8>
		offset = ((x >> 3) << 7) + y;
 8001bc4:	7c7b      	ldrb	r3, [r7, #17]
 8001bc6:	08db      	lsrs	r3, r3, #3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	01da      	lsls	r2, r3, #7
 8001bcc:	7c3b      	ldrb	r3, [r7, #16]
 8001bce:	4413      	add	r3, r2
 8001bd0:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001bd2:	7c7b      	ldrb	r3, [r7, #17]
 8001bd4:	f003 0507 	and.w	r5, r3, #7
 8001bd8:	e010      	b.n	8001bfc <SH1106_printChar+0x2fc>
 8001bda:	bf00      	nop
 8001bdc:	20000229 	.word	0x20000229
 8001be0:	2000022a 	.word	0x2000022a
 8001be4:	2000022c 	.word	0x2000022c
		offset = ((y >> 3) << 7) + x;
 8001be8:	7c3b      	ldrb	r3, [r7, #16]
 8001bea:	08db      	lsrs	r3, r3, #3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	01da      	lsls	r2, r3, #7
 8001bf0:	7c7b      	ldrb	r3, [r7, #17]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001bf6:	7c3b      	ldrb	r3, [r7, #16]
 8001bf8:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001bfc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001c00:	d82b      	bhi.n	8001c5a <SH1106_printChar+0x35a>
	switch (Mode) {
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d002      	beq.n	8001c0e <SH1106_printChar+0x30e>
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d00e      	beq.n	8001c2a <SH1106_printChar+0x32a>
 8001c0c:	e019      	b.n	8001c42 <SH1106_printChar+0x342>
		vRAM[offset] &= ~(1 << bpos);
 8001c0e:	4b6e      	ldr	r3, [pc, #440]	; (8001dc8 <SH1106_printChar+0x4c8>)
 8001c10:	5d1b      	ldrb	r3, [r3, r4]
 8001c12:	b25a      	sxtb	r2, r3
 8001c14:	2301      	movs	r3, #1
 8001c16:	40ab      	lsls	r3, r5
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	4013      	ands	r3, r2
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <SH1106_printChar+0x4c8>)
 8001c26:	551a      	strb	r2, [r3, r4]
		break;
 8001c28:	e018      	b.n	8001c5c <SH1106_printChar+0x35c>
		vRAM[offset] ^= (1 << bpos);
 8001c2a:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <SH1106_printChar+0x4c8>)
 8001c2c:	5d1b      	ldrb	r3, [r3, r4]
 8001c2e:	b25a      	sxtb	r2, r3
 8001c30:	2301      	movs	r3, #1
 8001c32:	40ab      	lsls	r3, r5
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	4053      	eors	r3, r2
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	4b62      	ldr	r3, [pc, #392]	; (8001dc8 <SH1106_printChar+0x4c8>)
 8001c3e:	551a      	strb	r2, [r3, r4]
		break;
 8001c40:	e00c      	b.n	8001c5c <SH1106_printChar+0x35c>
		vRAM[offset] |= (1 << bpos);
 8001c42:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <SH1106_printChar+0x4c8>)
 8001c44:	5d1b      	ldrb	r3, [r3, r4]
 8001c46:	b25a      	sxtb	r2, r3
 8001c48:	2301      	movs	r3, #1
 8001c4a:	40ab      	lsls	r3, r5
 8001c4c:	b25b      	sxtb	r3, r3
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b5c      	ldr	r3, [pc, #368]	; (8001dc8 <SH1106_printChar+0x4c8>)
 8001c56:	551a      	strb	r2, [r3, r4]
		break;
 8001c58:	e000      	b.n	8001c5c <SH1106_printChar+0x35c>
		return;
 8001c5a:	bf00      	nop
					tmpCh >>= 1;
 8001c5c:	7f7b      	ldrb	r3, [r7, #29]
 8001c5e:	085b      	lsrs	r3, r3, #1
 8001c60:	777b      	strb	r3, [r7, #29]
					p_x++;
 8001c62:	7ffb      	ldrb	r3, [r7, #31]
 8001c64:	3301      	adds	r3, #1
 8001c66:	77fb      	strb	r3, [r7, #31]
				while (tmpCh) {
 8001c68:	7f7b      	ldrb	r3, [r7, #29]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d195      	bne.n	8001b9a <SH1106_printChar+0x29a>
				}
				p_y++;
 8001c6e:	7fbb      	ldrb	r3, [r7, #30]
 8001c70:	3301      	adds	r3, #1
 8001c72:	77bb      	strb	r3, [r7, #30]
			while (p_y < y + Font->font_Height) {
 8001c74:	7fba      	ldrb	r2, [r7, #30]
 8001c76:	79bb      	ldrb	r3, [r7, #6]
 8001c78:	6839      	ldr	r1, [r7, #0]
 8001c7a:	7849      	ldrb	r1, [r1, #1]
 8001c7c:	440b      	add	r3, r1
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	db83      	blt.n	8001b8a <SH1106_printChar+0x28a>
 8001c82:	e097      	b.n	8001db4 <SH1106_printChar+0x4b4>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			p_y = y;
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	77bb      	strb	r3, [r7, #30]
			while (p_y < y + Font->font_Height) {
 8001c88:	e08c      	b.n	8001da4 <SH1106_printChar+0x4a4>
				p_x = x;
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	77fb      	strb	r3, [r7, #31]
				while (p_x < x + Font->font_Width) {
 8001c8e:	e07e      	b.n	8001d8e <SH1106_printChar+0x48e>
					bL = 8;
 8001c90:	2308      	movs	r3, #8
 8001c92:	773b      	strb	r3, [r7, #28]
					tmpCh = *pCh++;
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	61ba      	str	r2, [r7, #24]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	777b      	strb	r3, [r7, #29]
					if (tmpCh) {
 8001c9e:	7f7b      	ldrb	r3, [r7, #29]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d070      	beq.n	8001d86 <SH1106_printChar+0x486>
						while (bL) {
 8001ca4:	e06b      	b.n	8001d7e <SH1106_printChar+0x47e>
							if (tmpCh & 0x01)
 8001ca6:	7f7b      	ldrb	r3, [r7, #29]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d054      	beq.n	8001d5a <SH1106_printChar+0x45a>
								SH1106_pixel(p_x, p_y, SH1106_PixelMode);
 8001cb0:	4b46      	ldr	r3, [pc, #280]	; (8001dcc <SH1106_printChar+0x4cc>)
 8001cb2:	781a      	ldrb	r2, [r3, #0]
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
 8001cb6:	73bb      	strb	r3, [r7, #14]
 8001cb8:	7fbb      	ldrb	r3, [r7, #30]
 8001cba:	737b      	strb	r3, [r7, #13]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	733b      	strb	r3, [r7, #12]
	if (scr_orientation == SH1106_ORIENT_CW
 8001cc0:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <SH1106_printChar+0x4d0>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d003      	beq.n	8001cd0 <SH1106_printChar+0x3d0>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001cc8:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <SH1106_printChar+0x4d0>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d10a      	bne.n	8001ce6 <SH1106_printChar+0x3e6>
		offset = ((x >> 3) << 7) + y;
 8001cd0:	7bbb      	ldrb	r3, [r7, #14]
 8001cd2:	08db      	lsrs	r3, r3, #3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	01da      	lsls	r2, r3, #7
 8001cd8:	7b7b      	ldrb	r3, [r7, #13]
 8001cda:	4413      	add	r3, r2
 8001cdc:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001cde:	7bbb      	ldrb	r3, [r7, #14]
 8001ce0:	f003 0507 	and.w	r5, r3, #7
 8001ce4:	e009      	b.n	8001cfa <SH1106_printChar+0x3fa>
		offset = ((y >> 3) << 7) + x;
 8001ce6:	7b7b      	ldrb	r3, [r7, #13]
 8001ce8:	08db      	lsrs	r3, r3, #3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	01da      	lsls	r2, r3, #7
 8001cee:	7bbb      	ldrb	r3, [r7, #14]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001cf4:	7b7b      	ldrb	r3, [r7, #13]
 8001cf6:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001cfa:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001cfe:	d82b      	bhi.n	8001d58 <SH1106_printChar+0x458>
	switch (Mode) {
 8001d00:	7b3b      	ldrb	r3, [r7, #12]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d002      	beq.n	8001d0c <SH1106_printChar+0x40c>
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d00e      	beq.n	8001d28 <SH1106_printChar+0x428>
 8001d0a:	e019      	b.n	8001d40 <SH1106_printChar+0x440>
		vRAM[offset] &= ~(1 << bpos);
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <SH1106_printChar+0x4c8>)
 8001d0e:	5d1b      	ldrb	r3, [r3, r4]
 8001d10:	b25a      	sxtb	r2, r3
 8001d12:	2301      	movs	r3, #1
 8001d14:	40ab      	lsls	r3, r5
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	b25b      	sxtb	r3, r3
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <SH1106_printChar+0x4c8>)
 8001d24:	551a      	strb	r2, [r3, r4]
		break;
 8001d26:	e018      	b.n	8001d5a <SH1106_printChar+0x45a>
		vRAM[offset] ^= (1 << bpos);
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <SH1106_printChar+0x4c8>)
 8001d2a:	5d1b      	ldrb	r3, [r3, r4]
 8001d2c:	b25a      	sxtb	r2, r3
 8001d2e:	2301      	movs	r3, #1
 8001d30:	40ab      	lsls	r3, r5
 8001d32:	b25b      	sxtb	r3, r3
 8001d34:	4053      	eors	r3, r2
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <SH1106_printChar+0x4c8>)
 8001d3c:	551a      	strb	r2, [r3, r4]
		break;
 8001d3e:	e00c      	b.n	8001d5a <SH1106_printChar+0x45a>
		vRAM[offset] |= (1 << bpos);
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <SH1106_printChar+0x4c8>)
 8001d42:	5d1b      	ldrb	r3, [r3, r4]
 8001d44:	b25a      	sxtb	r2, r3
 8001d46:	2301      	movs	r3, #1
 8001d48:	40ab      	lsls	r3, r5
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <SH1106_printChar+0x4c8>)
 8001d54:	551a      	strb	r2, [r3, r4]
		break;
 8001d56:	e000      	b.n	8001d5a <SH1106_printChar+0x45a>
		return;
 8001d58:	bf00      	nop
							tmpCh >>= 1;
 8001d5a:	7f7b      	ldrb	r3, [r7, #29]
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	777b      	strb	r3, [r7, #29]
							if (tmpCh) {
 8001d60:	7f7b      	ldrb	r3, [r7, #29]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <SH1106_printChar+0x474>
								p_x++;
 8001d66:	7ffb      	ldrb	r3, [r7, #31]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	77fb      	strb	r3, [r7, #31]
								bL--;
 8001d6c:	7f3b      	ldrb	r3, [r7, #28]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	773b      	strb	r3, [r7, #28]
 8001d72:	e004      	b.n	8001d7e <SH1106_printChar+0x47e>
							} else {
								p_x += bL;
 8001d74:	7ffa      	ldrb	r2, [r7, #31]
 8001d76:	7f3b      	ldrb	r3, [r7, #28]
 8001d78:	4413      	add	r3, r2
 8001d7a:	77fb      	strb	r3, [r7, #31]
								break;
 8001d7c:	e007      	b.n	8001d8e <SH1106_printChar+0x48e>
						while (bL) {
 8001d7e:	7f3b      	ldrb	r3, [r7, #28]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d190      	bne.n	8001ca6 <SH1106_printChar+0x3a6>
 8001d84:	e003      	b.n	8001d8e <SH1106_printChar+0x48e>
							}
						}
					} else {
						p_x += bL;
 8001d86:	7ffa      	ldrb	r2, [r7, #31]
 8001d88:	7f3b      	ldrb	r3, [r7, #28]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	77fb      	strb	r3, [r7, #31]
				while (p_x < x + Font->font_Width) {
 8001d8e:	7ffa      	ldrb	r2, [r7, #31]
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	6839      	ldr	r1, [r7, #0]
 8001d94:	7809      	ldrb	r1, [r1, #0]
 8001d96:	440b      	add	r3, r1
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f6ff af79 	blt.w	8001c90 <SH1106_printChar+0x390>
					}
				}
				p_y++;
 8001d9e:	7fbb      	ldrb	r3, [r7, #30]
 8001da0:	3301      	adds	r3, #1
 8001da2:	77bb      	strb	r3, [r7, #30]
			while (p_y < y + Font->font_Height) {
 8001da4:	7fba      	ldrb	r2, [r7, #30]
 8001da6:	79bb      	ldrb	r3, [r7, #6]
 8001da8:	6839      	ldr	r1, [r7, #0]
 8001daa:	7849      	ldrb	r1, [r1, #1]
 8001dac:	440b      	add	r3, r1
 8001dae:	429a      	cmp	r2, r3
 8001db0:	f6ff af6b 	blt.w	8001c8a <SH1106_printChar+0x38a>
			}
		}
	}

	return Font->font_Width + 1;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	b2db      	uxtb	r3, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3724      	adds	r7, #36	; 0x24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bcb0      	pop	{r4, r5, r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	2000022c 	.word	0x2000022c
 8001dcc:	20000229 	.word	0x20000229
 8001dd0:	2000022a 	.word	0x2000022a

08001dd4 <SH1106_printStr>:
//   x,y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   Font - pointer to font
// return: string width in pixels
uint16_t SH1106_printStr(uint8_t x, uint8_t y, const char *str,
		const Font_TypeDef *Font) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60ba      	str	r2, [r7, #8]
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4603      	mov	r3, r0
 8001de0:	73fb      	strb	r3, [r7, #15]
 8001de2:	460b      	mov	r3, r1
 8001de4:	73bb      	strb	r3, [r7, #14]
	uint8_t p_x = x;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	75fb      	strb	r3, [r7, #23]
	uint8_t eX = scr_width - Font->font_Width - 1;
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <SH1106_printStr+0x70>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	75bb      	strb	r3, [r7, #22]

	while (*str) {
 8001dfc:	e011      	b.n	8001e22 <SH1106_printStr+0x4e>
		p_x += SH1106_printChar(p_x, y, *str++, Font);
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	60ba      	str	r2, [r7, #8]
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	7bb9      	ldrb	r1, [r7, #14]
 8001e08:	7df8      	ldrb	r0, [r7, #23]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f7ff fd78 	bl	8001900 <SH1106_printChar>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	4413      	add	r3, r2
 8001e18:	75fb      	strb	r3, [r7, #23]
		if (p_x > eX)
 8001e1a:	7dfa      	ldrb	r2, [r7, #23]
 8001e1c:	7dbb      	ldrb	r3, [r7, #22]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d804      	bhi.n	8001e2c <SH1106_printStr+0x58>
	while (*str) {
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1e9      	bne.n	8001dfe <SH1106_printStr+0x2a>
 8001e2a:	e000      	b.n	8001e2e <SH1106_printStr+0x5a>
			break;
 8001e2c:	bf00      	nop
	}

	return (p_x - x);
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	b29b      	uxth	r3, r3
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000040 	.word	0x20000040

08001e48 <SH1106_drawBitmap>:
//   pBMP - pointer to array containing bitmap
// note: each '1' bit in the bitmap will be drawn as a pixel
//       each '0' bit in the will not be drawn (transparent bitmap)
// bitmap: one byte per 8 vertical pixels, LSB top, truncate bottom bits
void SH1106_drawBitmap(uint8_t x, uint8_t y, uint8_t w, uint8_t h,
		const uint8_t *pBMP) {
 8001e48:	b4b0      	push	{r4, r5, r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4604      	mov	r4, r0
 8001e50:	4608      	mov	r0, r1
 8001e52:	4611      	mov	r1, r2
 8001e54:	461a      	mov	r2, r3
 8001e56:	4623      	mov	r3, r4
 8001e58:	71fb      	strb	r3, [r7, #7]
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71bb      	strb	r3, [r7, #6]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	717b      	strb	r3, [r7, #5]
 8001e62:	4613      	mov	r3, r2
 8001e64:	713b      	strb	r3, [r7, #4]
	uint8_t p_x;
	uint8_t p_y;
	uint8_t tmpCh;
	uint8_t bL;

	p_y = y;
 8001e66:	79bb      	ldrb	r3, [r7, #6]
 8001e68:	73bb      	strb	r3, [r7, #14]
	while (p_y < y + h) {
 8001e6a:	e08a      	b.n	8001f82 <SH1106_drawBitmap+0x13a>
		p_x = x;
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	73fb      	strb	r3, [r7, #15]
		while (p_x < x + w) {
 8001e70:	e07d      	b.n	8001f6e <SH1106_drawBitmap+0x126>
			bL = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	733b      	strb	r3, [r7, #12]
			tmpCh = *pBMP++;
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	623a      	str	r2, [r7, #32]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	737b      	strb	r3, [r7, #13]
			if (tmpCh) {
 8001e80:	7b7b      	ldrb	r3, [r7, #13]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d070      	beq.n	8001f68 <SH1106_drawBitmap+0x120>
				while (bL < 8) {
 8001e86:	e06b      	b.n	8001f60 <SH1106_drawBitmap+0x118>
					if (tmpCh & 0x01)
 8001e88:	7b7b      	ldrb	r3, [r7, #13]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d058      	beq.n	8001f44 <SH1106_drawBitmap+0xfc>
						SH1106_pixel(p_x, p_y + bL, SH1106_PixelMode);
 8001e92:	7bba      	ldrb	r2, [r7, #14]
 8001e94:	7b3b      	ldrb	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	b2d9      	uxtb	r1, r3
 8001e9a:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <SH1106_drawBitmap+0x154>)
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	72fb      	strb	r3, [r7, #11]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	72bb      	strb	r3, [r7, #10]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	727b      	strb	r3, [r7, #9]
	if (scr_orientation == SH1106_ORIENT_CW
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <SH1106_drawBitmap+0x158>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d003      	beq.n	8001eba <SH1106_drawBitmap+0x72>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <SH1106_drawBitmap+0x158>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d10a      	bne.n	8001ed0 <SH1106_drawBitmap+0x88>
		offset = ((x >> 3) << 7) + y;
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	08db      	lsrs	r3, r3, #3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	01da      	lsls	r2, r3, #7
 8001ec2:	7abb      	ldrb	r3, [r7, #10]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001ec8:	7afb      	ldrb	r3, [r7, #11]
 8001eca:	f003 0507 	and.w	r5, r3, #7
 8001ece:	e009      	b.n	8001ee4 <SH1106_drawBitmap+0x9c>
		offset = ((y >> 3) << 7) + x;
 8001ed0:	7abb      	ldrb	r3, [r7, #10]
 8001ed2:	08db      	lsrs	r3, r3, #3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	01da      	lsls	r2, r3, #7
 8001ed8:	7afb      	ldrb	r3, [r7, #11]
 8001eda:	4413      	add	r3, r2
 8001edc:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001ede:	7abb      	ldrb	r3, [r7, #10]
 8001ee0:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001ee4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001ee8:	d82b      	bhi.n	8001f42 <SH1106_drawBitmap+0xfa>
	switch (Mode) {
 8001eea:	7a7b      	ldrb	r3, [r7, #9]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d002      	beq.n	8001ef6 <SH1106_drawBitmap+0xae>
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d00e      	beq.n	8001f12 <SH1106_drawBitmap+0xca>
 8001ef4:	e019      	b.n	8001f2a <SH1106_drawBitmap+0xe2>
		vRAM[offset] &= ~(1 << bpos);
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <SH1106_drawBitmap+0x15c>)
 8001ef8:	5d1b      	ldrb	r3, [r3, r4]
 8001efa:	b25a      	sxtb	r2, r3
 8001efc:	2301      	movs	r3, #1
 8001efe:	40ab      	lsls	r3, r5
 8001f00:	b25b      	sxtb	r3, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	b25b      	sxtb	r3, r3
 8001f06:	4013      	ands	r3, r2
 8001f08:	b25b      	sxtb	r3, r3
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <SH1106_drawBitmap+0x15c>)
 8001f0e:	551a      	strb	r2, [r3, r4]
		break;
 8001f10:	e018      	b.n	8001f44 <SH1106_drawBitmap+0xfc>
		vRAM[offset] ^= (1 << bpos);
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <SH1106_drawBitmap+0x15c>)
 8001f14:	5d1b      	ldrb	r3, [r3, r4]
 8001f16:	b25a      	sxtb	r2, r3
 8001f18:	2301      	movs	r3, #1
 8001f1a:	40ab      	lsls	r3, r5
 8001f1c:	b25b      	sxtb	r3, r3
 8001f1e:	4053      	eors	r3, r2
 8001f20:	b25b      	sxtb	r3, r3
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <SH1106_drawBitmap+0x15c>)
 8001f26:	551a      	strb	r2, [r3, r4]
		break;
 8001f28:	e00c      	b.n	8001f44 <SH1106_drawBitmap+0xfc>
		vRAM[offset] |= (1 << bpos);
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <SH1106_drawBitmap+0x15c>)
 8001f2c:	5d1b      	ldrb	r3, [r3, r4]
 8001f2e:	b25a      	sxtb	r2, r3
 8001f30:	2301      	movs	r3, #1
 8001f32:	40ab      	lsls	r3, r5
 8001f34:	b25b      	sxtb	r3, r3
 8001f36:	4313      	orrs	r3, r2
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <SH1106_drawBitmap+0x15c>)
 8001f3e:	551a      	strb	r2, [r3, r4]
		break;
 8001f40:	e000      	b.n	8001f44 <SH1106_drawBitmap+0xfc>
		return;
 8001f42:	bf00      	nop
					tmpCh >>= 1;
 8001f44:	7b7b      	ldrb	r3, [r7, #13]
 8001f46:	085b      	lsrs	r3, r3, #1
 8001f48:	737b      	strb	r3, [r7, #13]
					if (tmpCh) {
 8001f4a:	7b7b      	ldrb	r3, [r7, #13]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <SH1106_drawBitmap+0x110>
						bL++;
 8001f50:	7b3b      	ldrb	r3, [r7, #12]
 8001f52:	3301      	adds	r3, #1
 8001f54:	733b      	strb	r3, [r7, #12]
 8001f56:	e003      	b.n	8001f60 <SH1106_drawBitmap+0x118>
					} else {
						p_x++;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
						break;
 8001f5e:	e006      	b.n	8001f6e <SH1106_drawBitmap+0x126>
				while (bL < 8) {
 8001f60:	7b3b      	ldrb	r3, [r7, #12]
 8001f62:	2b07      	cmp	r3, #7
 8001f64:	d990      	bls.n	8001e88 <SH1106_drawBitmap+0x40>
 8001f66:	e002      	b.n	8001f6e <SH1106_drawBitmap+0x126>
					}
				}
			} else {
				p_x++;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
		while (p_x < x + w) {
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	79f9      	ldrb	r1, [r7, #7]
 8001f72:	797b      	ldrb	r3, [r7, #5]
 8001f74:	440b      	add	r3, r1
 8001f76:	429a      	cmp	r2, r3
 8001f78:	f6ff af7b 	blt.w	8001e72 <SH1106_drawBitmap+0x2a>
			}
		}
		p_y += 8;
 8001f7c:	7bbb      	ldrb	r3, [r7, #14]
 8001f7e:	3308      	adds	r3, #8
 8001f80:	73bb      	strb	r3, [r7, #14]
	while (p_y < y + h) {
 8001f82:	7bba      	ldrb	r2, [r7, #14]
 8001f84:	79b9      	ldrb	r1, [r7, #6]
 8001f86:	793b      	ldrb	r3, [r7, #4]
 8001f88:	440b      	add	r3, r1
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	f6ff af6e 	blt.w	8001e6c <SH1106_drawBitmap+0x24>
	}
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bcb0      	pop	{r4, r5, r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	20000229 	.word	0x20000229
 8001fa0:	2000022a 	.word	0x2000022a
 8001fa4:	2000022c 	.word	0x2000022c

08001fa8 <SH1106_drawBitmapFullscreen>:

void SH1106_drawBitmapFullscreen(const uint8_t *pBMP) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	memcpy(vRAM, pBMP, (SCR_W * SCR_H ) >> 3);
 8001fb0:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <SH1106_drawBitmapFullscreen+0x24>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f002 fd67 	bl	8004a90 <memcpy>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000022c 	.word	0x2000022c

08001fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_Init+0x28>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <HAL_Init+0x28>)
 8001fda:	f043 0310 	orr.w	r3, r3, #16
 8001fde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f000 fd4d 	bl	8002a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe6:	200f      	movs	r0, #15
 8001fe8:	f7fe ff42 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fec:	f7fe ff06 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40022000 	.word	0x40022000

08001ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_IncTick+0x1c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_IncTick+0x20>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a03      	ldr	r2, [pc, #12]	; (800201c <HAL_IncTick+0x20>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	200000cc 	.word	0x200000cc
 800201c:	200006ac 	.word	0x200006ac

08002020 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return uwTick;
 8002024:	4b02      	ldr	r3, [pc, #8]	; (8002030 <HAL_GetTick+0x10>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	200006ac 	.word	0x200006ac

08002034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff fff0 	bl	8002020 <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d005      	beq.n	800205a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_Delay+0x44>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800205a:	bf00      	nop
 800205c:	f7ff ffe0 	bl	8002020 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f7      	bhi.n	800205c <HAL_Delay+0x28>
  {
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200000cc 	.word	0x200000cc

0800207c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0be      	b.n	800221c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fb02 	bl	80006c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 fbf1 	bl	80028a8 <ADC_ConversionStop_Disable>
 80020c6:	4603      	mov	r3, r0
 80020c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 8099 	bne.w	800220a <HAL_ADC_Init+0x18e>
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f040 8095 	bne.w	800220a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020e8:	f023 0302 	bic.w	r3, r3, #2
 80020ec:	f043 0202 	orr.w	r2, r3, #2
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7b1b      	ldrb	r3, [r3, #12]
 8002102:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002104:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	4313      	orrs	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002114:	d003      	beq.n	800211e <HAL_ADC_Init+0xa2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_ADC_Init+0xa8>
 800211e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002122:	e000      	b.n	8002126 <HAL_ADC_Init+0xaa>
 8002124:	2300      	movs	r3, #0
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7d1b      	ldrb	r3, [r3, #20]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d119      	bne.n	8002168 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7b1b      	ldrb	r3, [r3, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	3b01      	subs	r3, #1
 8002142:	035a      	lsls	r2, r3, #13
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	e00b      	b.n	8002168 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	f043 0220 	orr.w	r2, r3, #32
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	430a      	orrs	r2, r1
 800217a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_ADC_Init+0x1a8>)
 8002184:	4013      	ands	r3, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	68b9      	ldr	r1, [r7, #8]
 800218c:	430b      	orrs	r3, r1
 800218e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002198:	d003      	beq.n	80021a2 <HAL_ADC_Init+0x126>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d104      	bne.n	80021ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	051b      	lsls	r3, r3, #20
 80021aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	430a      	orrs	r2, r1
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <HAL_ADC_Init+0x1ac>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d10b      	bne.n	80021e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	f023 0303 	bic.w	r3, r3, #3
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021e6:	e018      	b.n	800221a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	f023 0312 	bic.w	r3, r3, #18
 80021f0:	f043 0210 	orr.w	r2, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002208:	e007      	b.n	800221a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	f043 0210 	orr.w	r2, r3, #16
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800221a:	7dfb      	ldrb	r3, [r7, #23]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	ffe1f7fd 	.word	0xffe1f7fd
 8002228:	ff1f0efe 	.word	0xff1f0efe

0800222c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Start+0x1a>
 8002242:	2302      	movs	r3, #2
 8002244:	e098      	b.n	8002378 <HAL_ADC_Start+0x14c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fad0 	bl	80027f4 <ADC_Enable>
 8002254:	4603      	mov	r3, r0
 8002256:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 8087 	bne.w	800236e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a41      	ldr	r2, [pc, #260]	; (8002380 <HAL_ADC_Start+0x154>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d105      	bne.n	800228a <HAL_ADC_Start+0x5e>
 800227e:	4b41      	ldr	r3, [pc, #260]	; (8002384 <HAL_ADC_Start+0x158>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d115      	bne.n	80022b6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d026      	beq.n	80022f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022b4:	e01d      	b.n	80022f2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2f      	ldr	r2, [pc, #188]	; (8002384 <HAL_ADC_Start+0x158>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_ADC_Start+0xaa>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2b      	ldr	r2, [pc, #172]	; (8002380 <HAL_ADC_Start+0x154>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d10d      	bne.n	80022f2 <HAL_ADC_Start+0xc6>
 80022d6:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HAL_ADC_Start+0x158>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d006      	beq.n	800230c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	f023 0206 	bic.w	r2, r3, #6
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
 800230a:	e002      	b.n	8002312 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f06f 0202 	mvn.w	r2, #2
 8002322:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800232e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002332:	d113      	bne.n	800235c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002338:	4a11      	ldr	r2, [pc, #68]	; (8002380 <HAL_ADC_Start+0x154>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d105      	bne.n	800234a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_ADC_Start+0x158>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002346:	2b00      	cmp	r3, #0
 8002348:	d108      	bne.n	800235c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	e00c      	b.n	8002376 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	e003      	b.n	8002376 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40012800 	.word	0x40012800
 8002384:	40012400 	.word	0x40012400

08002388 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Stop+0x1a>
 800239e:	2302      	movs	r3, #2
 80023a0:	e01a      	b.n	80023d8 <HAL_ADC_Stop+0x50>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fa7c 	bl	80028a8 <ADC_ConversionStop_Disable>
 80023b0:	4603      	mov	r3, r0
 80023b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80023f6:	f7ff fe13 	bl	8002020 <HAL_GetTick>
 80023fa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	f043 0220 	orr.w	r2, r3, #32
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0d3      	b.n	80025ca <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d131      	bne.n	8002494 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800243a:	2b00      	cmp	r3, #0
 800243c:	d12a      	bne.n	8002494 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800243e:	e021      	b.n	8002484 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002446:	d01d      	beq.n	8002484 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_ADC_PollForConversion+0x7e>
 800244e:	f7ff fde7 	bl	8002020 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d212      	bcs.n	8002484 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10b      	bne.n	8002484 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	f043 0204 	orr.w	r2, r3, #4
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0a2      	b.n	80025ca <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0d6      	beq.n	8002440 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002492:	e070      	b.n	8002576 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002494:	4b4f      	ldr	r3, [pc, #316]	; (80025d4 <HAL_ADC_PollForConversion+0x1f4>)
 8002496:	681c      	ldr	r4, [r3, #0]
 8002498:	2002      	movs	r0, #2
 800249a:	f001 fe1b 	bl	80040d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800249e:	4603      	mov	r3, r0
 80024a0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6919      	ldr	r1, [r3, #16]
 80024aa:	4b4b      	ldr	r3, [pc, #300]	; (80025d8 <HAL_ADC_PollForConversion+0x1f8>)
 80024ac:	400b      	ands	r3, r1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d118      	bne.n	80024e4 <HAL_ADC_PollForConversion+0x104>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68d9      	ldr	r1, [r3, #12]
 80024b8:	4b48      	ldr	r3, [pc, #288]	; (80025dc <HAL_ADC_PollForConversion+0x1fc>)
 80024ba:	400b      	ands	r3, r1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d111      	bne.n	80024e4 <HAL_ADC_PollForConversion+0x104>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6919      	ldr	r1, [r3, #16]
 80024c6:	4b46      	ldr	r3, [pc, #280]	; (80025e0 <HAL_ADC_PollForConversion+0x200>)
 80024c8:	400b      	ands	r3, r1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d108      	bne.n	80024e0 <HAL_ADC_PollForConversion+0x100>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68d9      	ldr	r1, [r3, #12]
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_ADC_PollForConversion+0x204>)
 80024d6:	400b      	ands	r3, r1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_PollForConversion+0x100>
 80024dc:	2314      	movs	r3, #20
 80024de:	e020      	b.n	8002522 <HAL_ADC_PollForConversion+0x142>
 80024e0:	2329      	movs	r3, #41	; 0x29
 80024e2:	e01e      	b.n	8002522 <HAL_ADC_PollForConversion+0x142>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6919      	ldr	r1, [r3, #16]
 80024ea:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <HAL_ADC_PollForConversion+0x200>)
 80024ec:	400b      	ands	r3, r1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_ADC_PollForConversion+0x120>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68d9      	ldr	r1, [r3, #12]
 80024f8:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <HAL_ADC_PollForConversion+0x204>)
 80024fa:	400b      	ands	r3, r1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00d      	beq.n	800251c <HAL_ADC_PollForConversion+0x13c>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6919      	ldr	r1, [r3, #16]
 8002506:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <HAL_ADC_PollForConversion+0x208>)
 8002508:	400b      	ands	r3, r1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d108      	bne.n	8002520 <HAL_ADC_PollForConversion+0x140>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68d9      	ldr	r1, [r3, #12]
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <HAL_ADC_PollForConversion+0x208>)
 8002516:	400b      	ands	r3, r1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_ADC_PollForConversion+0x140>
 800251c:	2354      	movs	r3, #84	; 0x54
 800251e:	e000      	b.n	8002522 <HAL_ADC_PollForConversion+0x142>
 8002520:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002528:	e021      	b.n	800256e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d01a      	beq.n	8002568 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <HAL_ADC_PollForConversion+0x168>
 8002538:	f7ff fd72 	bl	8002020 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d20f      	bcs.n	8002568 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	429a      	cmp	r2, r3
 800254e:	d90b      	bls.n	8002568 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	f043 0204 	orr.w	r2, r3, #4
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e030      	b.n	80025ca <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	3301      	adds	r3, #1
 800256c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	429a      	cmp	r2, r3
 8002574:	d8d9      	bhi.n	800252a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f06f 0212 	mvn.w	r2, #18
 800257e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002596:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800259a:	d115      	bne.n	80025c8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d111      	bne.n	80025c8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d105      	bne.n	80025c8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	371c      	adds	r7, #28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd90      	pop	{r4, r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000003c 	.word	0x2000003c
 80025d8:	24924924 	.word	0x24924924
 80025dc:	00924924 	.word	0x00924924
 80025e0:	12492492 	.word	0x12492492
 80025e4:	00492492 	.word	0x00492492
 80025e8:	00249249 	.word	0x00249249

080025ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x20>
 8002620:	2302      	movs	r3, #2
 8002622:	e0dc      	b.n	80027de <HAL_ADC_ConfigChannel+0x1da>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b06      	cmp	r3, #6
 8002632:	d81c      	bhi.n	800266e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	3b05      	subs	r3, #5
 8002646:	221f      	movs	r2, #31
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	4019      	ands	r1, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3b05      	subs	r3, #5
 8002660:	fa00 f203 	lsl.w	r2, r0, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	635a      	str	r2, [r3, #52]	; 0x34
 800266c:	e03c      	b.n	80026e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d81c      	bhi.n	80026b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	3b23      	subs	r3, #35	; 0x23
 8002688:	221f      	movs	r2, #31
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	4019      	ands	r1, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	3b23      	subs	r3, #35	; 0x23
 80026a2:	fa00 f203 	lsl.w	r2, r0, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
 80026ae:	e01b      	b.n	80026e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	3b41      	subs	r3, #65	; 0x41
 80026c2:	221f      	movs	r2, #31
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	4019      	ands	r1, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	3b41      	subs	r3, #65	; 0x41
 80026dc:	fa00 f203 	lsl.w	r2, r0, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d91c      	bls.n	800272a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68d9      	ldr	r1, [r3, #12]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	3b1e      	subs	r3, #30
 8002702:	2207      	movs	r2, #7
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	4019      	ands	r1, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6898      	ldr	r0, [r3, #8]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	3b1e      	subs	r3, #30
 800271c:	fa00 f203 	lsl.w	r2, r0, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]
 8002728:	e019      	b.n	800275e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6919      	ldr	r1, [r3, #16]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	2207      	movs	r2, #7
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	4019      	ands	r1, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6898      	ldr	r0, [r3, #8]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	fa00 f203 	lsl.w	r2, r0, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b10      	cmp	r3, #16
 8002764:	d003      	beq.n	800276e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800276a:	2b11      	cmp	r3, #17
 800276c:	d132      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d125      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d126      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002794:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b10      	cmp	r3, #16
 800279c:	d11a      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_ADC_ConfigChannel+0x1e8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	0c9a      	lsrs	r2, r3, #18
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027b4:	e002      	b.n	80027bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f9      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x1b2>
 80027c2:	e007      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	f043 0220 	orr.w	r2, r3, #32
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	40012400 	.word	0x40012400
 80027ec:	2000003c 	.word	0x2000003c
 80027f0:	431bde83 	.word	0x431bde83

080027f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d040      	beq.n	8002894 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002822:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <ADC_Enable+0xac>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <ADC_Enable+0xb0>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	0c9b      	lsrs	r3, r3, #18
 800282e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002830:	e002      	b.n	8002838 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3b01      	subs	r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f9      	bne.n	8002832 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800283e:	f7ff fbef 	bl	8002020 <HAL_GetTick>
 8002842:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002844:	e01f      	b.n	8002886 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002846:	f7ff fbeb 	bl	8002020 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d918      	bls.n	8002886 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d011      	beq.n	8002886 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	f043 0210 	orr.w	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	f043 0201 	orr.w	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e007      	b.n	8002896 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d1d8      	bne.n	8002846 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000003c 	.word	0x2000003c
 80028a4:	431bde83 	.word	0x431bde83

080028a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d12e      	bne.n	8002920 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0201 	bic.w	r2, r2, #1
 80028d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028d2:	f7ff fba5 	bl	8002020 <HAL_GetTick>
 80028d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028d8:	e01b      	b.n	8002912 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028da:	f7ff fba1 	bl	8002020 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d914      	bls.n	8002912 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d10d      	bne.n	8002912 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	f043 0210 	orr.w	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e007      	b.n	8002922 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b01      	cmp	r3, #1
 800291e:	d0dc      	beq.n	80028da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002948:	4013      	ands	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295e:	4a04      	ldr	r2, [pc, #16]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	60d3      	str	r3, [r2, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <__NVIC_GetPriorityGrouping+0x18>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 0307 	and.w	r3, r3, #7
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db0b      	blt.n	80029ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4906      	ldr	r1, [pc, #24]	; (80029c4 <__NVIC_EnableIRQ+0x34>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	e000e100 	.word	0xe000e100

080029c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	db0a      	blt.n	80029f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	490c      	ldr	r1, [pc, #48]	; (8002a14 <__NVIC_SetPriority+0x4c>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	0112      	lsls	r2, r2, #4
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	440b      	add	r3, r1
 80029ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f0:	e00a      	b.n	8002a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4908      	ldr	r1, [pc, #32]	; (8002a18 <__NVIC_SetPriority+0x50>)
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	3b04      	subs	r3, #4
 8002a00:	0112      	lsls	r2, r2, #4
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	440b      	add	r3, r1
 8002a06:	761a      	strb	r2, [r3, #24]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000e100 	.word	0xe000e100
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f1c3 0307 	rsb	r3, r3, #7
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	bf28      	it	cs
 8002a3a:	2304      	movcs	r3, #4
 8002a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2b06      	cmp	r3, #6
 8002a44:	d902      	bls.n	8002a4c <NVIC_EncodePriority+0x30>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3b03      	subs	r3, #3
 8002a4a:	e000      	b.n	8002a4e <NVIC_EncodePriority+0x32>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	f04f 32ff 	mov.w	r2, #4294967295
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	401a      	ands	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	43d9      	mvns	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	4313      	orrs	r3, r2
         );
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3724      	adds	r7, #36	; 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff4f 	bl	800292c <__NVIC_SetPriorityGrouping>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa8:	f7ff ff64 	bl	8002974 <__NVIC_GetPriorityGrouping>
 8002aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f7ff ffb2 	bl	8002a1c <NVIC_EncodePriority>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff81 	bl	80029c8 <__NVIC_SetPriority>
}
 8002ac6:	bf00      	nop
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff57 	bl	8002990 <__NVIC_EnableIRQ>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b08b      	sub	sp, #44	; 0x2c
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002afa:	2300      	movs	r3, #0
 8002afc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002afe:	e169      	b.n	8002dd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b00:	2201      	movs	r2, #1
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	f040 8158 	bne.w	8002dce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a9a      	ldr	r2, [pc, #616]	; (8002d8c <HAL_GPIO_Init+0x2a0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d05e      	beq.n	8002be6 <HAL_GPIO_Init+0xfa>
 8002b28:	4a98      	ldr	r2, [pc, #608]	; (8002d8c <HAL_GPIO_Init+0x2a0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d875      	bhi.n	8002c1a <HAL_GPIO_Init+0x12e>
 8002b2e:	4a98      	ldr	r2, [pc, #608]	; (8002d90 <HAL_GPIO_Init+0x2a4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d058      	beq.n	8002be6 <HAL_GPIO_Init+0xfa>
 8002b34:	4a96      	ldr	r2, [pc, #600]	; (8002d90 <HAL_GPIO_Init+0x2a4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d86f      	bhi.n	8002c1a <HAL_GPIO_Init+0x12e>
 8002b3a:	4a96      	ldr	r2, [pc, #600]	; (8002d94 <HAL_GPIO_Init+0x2a8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d052      	beq.n	8002be6 <HAL_GPIO_Init+0xfa>
 8002b40:	4a94      	ldr	r2, [pc, #592]	; (8002d94 <HAL_GPIO_Init+0x2a8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d869      	bhi.n	8002c1a <HAL_GPIO_Init+0x12e>
 8002b46:	4a94      	ldr	r2, [pc, #592]	; (8002d98 <HAL_GPIO_Init+0x2ac>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d04c      	beq.n	8002be6 <HAL_GPIO_Init+0xfa>
 8002b4c:	4a92      	ldr	r2, [pc, #584]	; (8002d98 <HAL_GPIO_Init+0x2ac>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d863      	bhi.n	8002c1a <HAL_GPIO_Init+0x12e>
 8002b52:	4a92      	ldr	r2, [pc, #584]	; (8002d9c <HAL_GPIO_Init+0x2b0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d046      	beq.n	8002be6 <HAL_GPIO_Init+0xfa>
 8002b58:	4a90      	ldr	r2, [pc, #576]	; (8002d9c <HAL_GPIO_Init+0x2b0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d85d      	bhi.n	8002c1a <HAL_GPIO_Init+0x12e>
 8002b5e:	2b12      	cmp	r3, #18
 8002b60:	d82a      	bhi.n	8002bb8 <HAL_GPIO_Init+0xcc>
 8002b62:	2b12      	cmp	r3, #18
 8002b64:	d859      	bhi.n	8002c1a <HAL_GPIO_Init+0x12e>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <HAL_GPIO_Init+0x80>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002be7 	.word	0x08002be7
 8002b70:	08002bc1 	.word	0x08002bc1
 8002b74:	08002bd3 	.word	0x08002bd3
 8002b78:	08002c15 	.word	0x08002c15
 8002b7c:	08002c1b 	.word	0x08002c1b
 8002b80:	08002c1b 	.word	0x08002c1b
 8002b84:	08002c1b 	.word	0x08002c1b
 8002b88:	08002c1b 	.word	0x08002c1b
 8002b8c:	08002c1b 	.word	0x08002c1b
 8002b90:	08002c1b 	.word	0x08002c1b
 8002b94:	08002c1b 	.word	0x08002c1b
 8002b98:	08002c1b 	.word	0x08002c1b
 8002b9c:	08002c1b 	.word	0x08002c1b
 8002ba0:	08002c1b 	.word	0x08002c1b
 8002ba4:	08002c1b 	.word	0x08002c1b
 8002ba8:	08002c1b 	.word	0x08002c1b
 8002bac:	08002c1b 	.word	0x08002c1b
 8002bb0:	08002bc9 	.word	0x08002bc9
 8002bb4:	08002bdd 	.word	0x08002bdd
 8002bb8:	4a79      	ldr	r2, [pc, #484]	; (8002da0 <HAL_GPIO_Init+0x2b4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bbe:	e02c      	b.n	8002c1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	623b      	str	r3, [r7, #32]
          break;
 8002bc6:	e029      	b.n	8002c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	623b      	str	r3, [r7, #32]
          break;
 8002bd0:	e024      	b.n	8002c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	623b      	str	r3, [r7, #32]
          break;
 8002bda:	e01f      	b.n	8002c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	330c      	adds	r3, #12
 8002be2:	623b      	str	r3, [r7, #32]
          break;
 8002be4:	e01a      	b.n	8002c1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bee:	2304      	movs	r3, #4
 8002bf0:	623b      	str	r3, [r7, #32]
          break;
 8002bf2:	e013      	b.n	8002c1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d105      	bne.n	8002c08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bfc:	2308      	movs	r3, #8
 8002bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	611a      	str	r2, [r3, #16]
          break;
 8002c06:	e009      	b.n	8002c1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c08:	2308      	movs	r3, #8
 8002c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	615a      	str	r2, [r3, #20]
          break;
 8002c12:	e003      	b.n	8002c1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c14:	2300      	movs	r3, #0
 8002c16:	623b      	str	r3, [r7, #32]
          break;
 8002c18:	e000      	b.n	8002c1c <HAL_GPIO_Init+0x130>
          break;
 8002c1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2bff      	cmp	r3, #255	; 0xff
 8002c20:	d801      	bhi.n	8002c26 <HAL_GPIO_Init+0x13a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	e001      	b.n	8002c2a <HAL_GPIO_Init+0x13e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2bff      	cmp	r3, #255	; 0xff
 8002c30:	d802      	bhi.n	8002c38 <HAL_GPIO_Init+0x14c>
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	e002      	b.n	8002c3e <HAL_GPIO_Init+0x152>
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	3b08      	subs	r3, #8
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	210f      	movs	r1, #15
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	401a      	ands	r2, r3
 8002c50:	6a39      	ldr	r1, [r7, #32]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80b1 	beq.w	8002dce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c6c:	4b4d      	ldr	r3, [pc, #308]	; (8002da4 <HAL_GPIO_Init+0x2b8>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	4a4c      	ldr	r2, [pc, #304]	; (8002da4 <HAL_GPIO_Init+0x2b8>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6193      	str	r3, [r2, #24]
 8002c78:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <HAL_GPIO_Init+0x2b8>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c84:	4a48      	ldr	r2, [pc, #288]	; (8002da8 <HAL_GPIO_Init+0x2bc>)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	220f      	movs	r2, #15
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a40      	ldr	r2, [pc, #256]	; (8002dac <HAL_GPIO_Init+0x2c0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d013      	beq.n	8002cd8 <HAL_GPIO_Init+0x1ec>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3f      	ldr	r2, [pc, #252]	; (8002db0 <HAL_GPIO_Init+0x2c4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_GPIO_Init+0x1e8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3e      	ldr	r2, [pc, #248]	; (8002db4 <HAL_GPIO_Init+0x2c8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <HAL_GPIO_Init+0x1e4>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a3d      	ldr	r2, [pc, #244]	; (8002db8 <HAL_GPIO_Init+0x2cc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d101      	bne.n	8002ccc <HAL_GPIO_Init+0x1e0>
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e006      	b.n	8002cda <HAL_GPIO_Init+0x1ee>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e004      	b.n	8002cda <HAL_GPIO_Init+0x1ee>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e002      	b.n	8002cda <HAL_GPIO_Init+0x1ee>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_GPIO_Init+0x1ee>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cdc:	f002 0203 	and.w	r2, r2, #3
 8002ce0:	0092      	lsls	r2, r2, #2
 8002ce2:	4093      	lsls	r3, r2
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cea:	492f      	ldr	r1, [pc, #188]	; (8002da8 <HAL_GPIO_Init+0x2bc>)
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d006      	beq.n	8002d12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	492c      	ldr	r1, [pc, #176]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
 8002d10:	e006      	b.n	8002d20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d12:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	4928      	ldr	r1, [pc, #160]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d2c:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	4922      	ldr	r1, [pc, #136]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	491e      	ldr	r1, [pc, #120]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d006      	beq.n	8002d62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	4918      	ldr	r1, [pc, #96]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]
 8002d60:	e006      	b.n	8002d70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d62:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	4914      	ldr	r1, [pc, #80]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d021      	beq.n	8002dc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	490e      	ldr	r1, [pc, #56]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60cb      	str	r3, [r1, #12]
 8002d88:	e021      	b.n	8002dce <HAL_GPIO_Init+0x2e2>
 8002d8a:	bf00      	nop
 8002d8c:	10320000 	.word	0x10320000
 8002d90:	10310000 	.word	0x10310000
 8002d94:	10220000 	.word	0x10220000
 8002d98:	10210000 	.word	0x10210000
 8002d9c:	10120000 	.word	0x10120000
 8002da0:	10110000 	.word	0x10110000
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40010800 	.word	0x40010800
 8002db0:	40010c00 	.word	0x40010c00
 8002db4:	40011000 	.word	0x40011000
 8002db8:	40011400 	.word	0x40011400
 8002dbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_GPIO_Init+0x304>)
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	4909      	ldr	r1, [pc, #36]	; (8002df0 <HAL_GPIO_Init+0x304>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	fa22 f303 	lsr.w	r3, r2, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f47f ae8e 	bne.w	8002b00 <HAL_GPIO_Init+0x14>
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	372c      	adds	r7, #44	; 0x2c
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	40010400 	.word	0x40010400

08002df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
 8002e00:	4613      	mov	r3, r2
 8002e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e04:	787b      	ldrb	r3, [r7, #1]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e10:	e003      	b.n	8002e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e12:	887b      	ldrh	r3, [r7, #2]
 8002e14:	041a      	lsls	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	611a      	str	r2, [r3, #16]
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fdf9 	bl	8000a28 <HAL_GPIO_EXTI_Callback>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e12b      	b.n	80030aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fd fda0 	bl	80009ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	; 0x24
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea4:	f000 ffea 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8002ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4a81      	ldr	r2, [pc, #516]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d807      	bhi.n	8002ec4 <HAL_I2C_Init+0x84>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a80      	ldr	r2, [pc, #512]	; (80030b8 <HAL_I2C_Init+0x278>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	bf94      	ite	ls
 8002ebc:	2301      	movls	r3, #1
 8002ebe:	2300      	movhi	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e006      	b.n	8002ed2 <HAL_I2C_Init+0x92>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a7d      	ldr	r2, [pc, #500]	; (80030bc <HAL_I2C_Init+0x27c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	bf94      	ite	ls
 8002ecc:	2301      	movls	r3, #1
 8002ece:	2300      	movhi	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0e7      	b.n	80030aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a78      	ldr	r2, [pc, #480]	; (80030c0 <HAL_I2C_Init+0x280>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9b      	lsrs	r3, r3, #18
 8002ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a6a      	ldr	r2, [pc, #424]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d802      	bhi.n	8002f14 <HAL_I2C_Init+0xd4>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3301      	adds	r3, #1
 8002f12:	e009      	b.n	8002f28 <HAL_I2C_Init+0xe8>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	4a69      	ldr	r2, [pc, #420]	; (80030c4 <HAL_I2C_Init+0x284>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	3301      	adds	r3, #1
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	495c      	ldr	r1, [pc, #368]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002f44:	428b      	cmp	r3, r1
 8002f46:	d819      	bhi.n	8002f7c <HAL_I2C_Init+0x13c>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e59      	subs	r1, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f56:	1c59      	adds	r1, r3, #1
 8002f58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f5c:	400b      	ands	r3, r1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_I2C_Init+0x138>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1e59      	subs	r1, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f76:	e051      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	e04f      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d111      	bne.n	8002fa8 <HAL_I2C_Init+0x168>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e58      	subs	r0, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e012      	b.n	8002fce <HAL_I2C_Init+0x18e>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	0099      	lsls	r1, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Init+0x196>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e022      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10e      	bne.n	8002ffc <HAL_I2C_Init+0x1bc>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e58      	subs	r0, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	440b      	add	r3, r1
 8002fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffa:	e00f      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1e58      	subs	r0, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	0099      	lsls	r1, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	6809      	ldr	r1, [r1, #0]
 8003020:	4313      	orrs	r3, r2
 8003022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800304a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6911      	ldr	r1, [r2, #16]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68d2      	ldr	r2, [r2, #12]
 8003056:	4311      	orrs	r1, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	430b      	orrs	r3, r1
 800305e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	000186a0 	.word	0x000186a0
 80030b8:	001e847f 	.word	0x001e847f
 80030bc:	003d08ff 	.word	0x003d08ff
 80030c0:	431bde83 	.word	0x431bde83
 80030c4:	10624dd3 	.word	0x10624dd3

080030c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	460b      	mov	r3, r1
 80030d6:	817b      	strh	r3, [r7, #10]
 80030d8:	4613      	mov	r3, r2
 80030da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7fe ffa0 	bl	8002020 <HAL_GetTick>
 80030e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	f040 80e0 	bne.w	80032b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2319      	movs	r3, #25
 80030f6:	2201      	movs	r2, #1
 80030f8:	4970      	ldr	r1, [pc, #448]	; (80032bc <HAL_I2C_Master_Transmit+0x1f4>)
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f964 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003106:	2302      	movs	r3, #2
 8003108:	e0d3      	b.n	80032b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_I2C_Master_Transmit+0x50>
 8003114:	2302      	movs	r3, #2
 8003116:	e0cc      	b.n	80032b2 <HAL_I2C_Master_Transmit+0x1ea>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b01      	cmp	r3, #1
 800312c:	d007      	beq.n	800313e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2221      	movs	r2, #33	; 0x21
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2210      	movs	r2, #16
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	893a      	ldrh	r2, [r7, #8]
 800316e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4a50      	ldr	r2, [pc, #320]	; (80032c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003180:	8979      	ldrh	r1, [r7, #10]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	6a3a      	ldr	r2, [r7, #32]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f89c 	bl	80032c4 <I2C_MasterRequestWrite>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e08d      	b.n	80032b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031ac:	e066      	b.n	800327c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	6a39      	ldr	r1, [r7, #32]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f9de 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d107      	bne.n	80031d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e06b      	b.n	80032b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	781a      	ldrb	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b04      	cmp	r3, #4
 8003216:	d11b      	bne.n	8003250 <HAL_I2C_Master_Transmit+0x188>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	d017      	beq.n	8003250 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	781a      	ldrb	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	6a39      	ldr	r1, [r7, #32]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f9ce 	bl	80035f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00d      	beq.n	800327c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	2b04      	cmp	r3, #4
 8003266:	d107      	bne.n	8003278 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003276:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e01a      	b.n	80032b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d194      	bne.n	80031ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e000      	b.n	80032b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	00100002 	.word	0x00100002
 80032c0:	ffff0000 	.word	0xffff0000

080032c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	460b      	mov	r3, r1
 80032d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d006      	beq.n	80032ee <I2C_MasterRequestWrite+0x2a>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d003      	beq.n	80032ee <I2C_MasterRequestWrite+0x2a>
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ec:	d108      	bne.n	8003300 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e00b      	b.n	8003318 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	2b12      	cmp	r3, #18
 8003306:	d107      	bne.n	8003318 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003316:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f84f 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00d      	beq.n	800334c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333e:	d103      	bne.n	8003348 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003346:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e035      	b.n	80033b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003354:	d108      	bne.n	8003368 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003364:	611a      	str	r2, [r3, #16]
 8003366:	e01b      	b.n	80033a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003368:	897b      	ldrh	r3, [r7, #10]
 800336a:	11db      	asrs	r3, r3, #7
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f003 0306 	and.w	r3, r3, #6
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f063 030f 	orn	r3, r3, #15
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	490e      	ldr	r1, [pc, #56]	; (80033c0 <I2C_MasterRequestWrite+0xfc>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f875 	bl	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e010      	b.n	80033b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4907      	ldr	r1, [pc, #28]	; (80033c4 <I2C_MasterRequestWrite+0x100>)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f865 	bl	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	00010008 	.word	0x00010008
 80033c4:	00010002 	.word	0x00010002

080033c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d8:	e025      	b.n	8003426 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d021      	beq.n	8003426 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7fe fe1d 	bl	8002020 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d116      	bne.n	8003426 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f043 0220 	orr.w	r2, r3, #32
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e023      	b.n	800346e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d10d      	bne.n	800344c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	43da      	mvns	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4013      	ands	r3, r2
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2300      	movne	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	e00c      	b.n	8003466 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4013      	ands	r3, r2
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	429a      	cmp	r2, r3
 800346a:	d0b6      	beq.n	80033da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003484:	e051      	b.n	800352a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003494:	d123      	bne.n	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f043 0204 	orr.w	r2, r3, #4
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e046      	b.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d021      	beq.n	800352a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e6:	f7fe fd9b 	bl	8002020 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d302      	bcc.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d116      	bne.n	800352a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e020      	b.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	0c1b      	lsrs	r3, r3, #16
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	d10c      	bne.n	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	43da      	mvns	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4013      	ands	r3, r2
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	bf14      	ite	ne
 8003546:	2301      	movne	r3, #1
 8003548:	2300      	moveq	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e00b      	b.n	8003566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	43da      	mvns	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4013      	ands	r3, r2
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d18d      	bne.n	8003486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003580:	e02d      	b.n	80035de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f878 	bl	8003678 <I2C_IsAcknowledgeFailed>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e02d      	b.n	80035ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d021      	beq.n	80035de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7fe fd41 	bl	8002020 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d116      	bne.n	80035de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f043 0220 	orr.w	r2, r3, #32
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e007      	b.n	80035ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	2b80      	cmp	r3, #128	; 0x80
 80035ea:	d1ca      	bne.n	8003582 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003602:	e02d      	b.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f837 	bl	8003678 <I2C_IsAcknowledgeFailed>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e02d      	b.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361a:	d021      	beq.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361c:	f7fe fd00 	bl	8002020 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	429a      	cmp	r2, r3
 800362a:	d302      	bcc.n	8003632 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d116      	bne.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e007      	b.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b04      	cmp	r3, #4
 800366c:	d1ca      	bne.n	8003604 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368e:	d11b      	bne.n	80036c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003698:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f043 0204 	orr.w	r2, r3, #4
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e272      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8087 	beq.w	8003802 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f4:	4b92      	ldr	r3, [pc, #584]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 030c 	and.w	r3, r3, #12
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d00c      	beq.n	800371a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003700:	4b8f      	ldr	r3, [pc, #572]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b08      	cmp	r3, #8
 800370a:	d112      	bne.n	8003732 <HAL_RCC_OscConfig+0x5e>
 800370c:	4b8c      	ldr	r3, [pc, #560]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003718:	d10b      	bne.n	8003732 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371a:	4b89      	ldr	r3, [pc, #548]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d06c      	beq.n	8003800 <HAL_RCC_OscConfig+0x12c>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d168      	bne.n	8003800 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e24c      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373a:	d106      	bne.n	800374a <HAL_RCC_OscConfig+0x76>
 800373c:	4b80      	ldr	r3, [pc, #512]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a7f      	ldr	r2, [pc, #508]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	e02e      	b.n	80037a8 <HAL_RCC_OscConfig+0xd4>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x98>
 8003752:	4b7b      	ldr	r3, [pc, #492]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a7a      	ldr	r2, [pc, #488]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4b78      	ldr	r3, [pc, #480]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a77      	ldr	r2, [pc, #476]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e01d      	b.n	80037a8 <HAL_RCC_OscConfig+0xd4>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003774:	d10c      	bne.n	8003790 <HAL_RCC_OscConfig+0xbc>
 8003776:	4b72      	ldr	r3, [pc, #456]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a71      	ldr	r2, [pc, #452]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 800377c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	4b6f      	ldr	r3, [pc, #444]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6e      	ldr	r2, [pc, #440]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e00b      	b.n	80037a8 <HAL_RCC_OscConfig+0xd4>
 8003790:	4b6b      	ldr	r3, [pc, #428]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6a      	ldr	r2, [pc, #424]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	4b68      	ldr	r3, [pc, #416]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a67      	ldr	r2, [pc, #412]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 80037a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d013      	beq.n	80037d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe fc36 	bl	8002020 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b8:	f7fe fc32 	bl	8002020 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e200      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	4b5d      	ldr	r3, [pc, #372]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0xe4>
 80037d6:	e014      	b.n	8003802 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fe fc22 	bl	8002020 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e0:	f7fe fc1e 	bl	8002020 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e1ec      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f2:	4b53      	ldr	r3, [pc, #332]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x10c>
 80037fe:	e000      	b.n	8003802 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d063      	beq.n	80038d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800380e:	4b4c      	ldr	r3, [pc, #304]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800381a:	4b49      	ldr	r3, [pc, #292]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b08      	cmp	r3, #8
 8003824:	d11c      	bne.n	8003860 <HAL_RCC_OscConfig+0x18c>
 8003826:	4b46      	ldr	r3, [pc, #280]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d116      	bne.n	8003860 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003832:	4b43      	ldr	r3, [pc, #268]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_RCC_OscConfig+0x176>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d001      	beq.n	800384a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e1c0      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384a:	4b3d      	ldr	r3, [pc, #244]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4939      	ldr	r1, [pc, #228]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385e:	e03a      	b.n	80038d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d020      	beq.n	80038aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003868:	4b36      	ldr	r3, [pc, #216]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386e:	f7fe fbd7 	bl	8002020 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003876:	f7fe fbd3 	bl	8002020 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e1a1      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003888:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003894:	4b2a      	ldr	r3, [pc, #168]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4927      	ldr	r1, [pc, #156]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]
 80038a8:	e015      	b.n	80038d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038aa:	4b26      	ldr	r3, [pc, #152]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe fbb6 	bl	8002020 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b8:	f7fe fbb2 	bl	8002020 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e180      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ca:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d03a      	beq.n	8003958 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d019      	beq.n	800391e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ea:	4b17      	ldr	r3, [pc, #92]	; (8003948 <HAL_RCC_OscConfig+0x274>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f0:	f7fe fb96 	bl	8002020 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f8:	f7fe fb92 	bl	8002020 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e160      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390a:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <HAL_RCC_OscConfig+0x26c>)
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003916:	2001      	movs	r0, #1
 8003918:	f000 fb08 	bl	8003f2c <RCC_Delay>
 800391c:	e01c      	b.n	8003958 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391e:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <HAL_RCC_OscConfig+0x274>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003924:	f7fe fb7c 	bl	8002020 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392a:	e00f      	b.n	800394c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392c:	f7fe fb78 	bl	8002020 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d908      	bls.n	800394c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e146      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
 8003944:	42420000 	.word	0x42420000
 8003948:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394c:	4b92      	ldr	r3, [pc, #584]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e9      	bne.n	800392c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80a6 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003966:	2300      	movs	r3, #0
 8003968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396a:	4b8b      	ldr	r3, [pc, #556]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003976:	4b88      	ldr	r3, [pc, #544]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4a87      	ldr	r2, [pc, #540]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 800397c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003980:	61d3      	str	r3, [r2, #28]
 8003982:	4b85      	ldr	r3, [pc, #532]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	4b82      	ldr	r3, [pc, #520]	; (8003b9c <HAL_RCC_OscConfig+0x4c8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d118      	bne.n	80039d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399e:	4b7f      	ldr	r3, [pc, #508]	; (8003b9c <HAL_RCC_OscConfig+0x4c8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a7e      	ldr	r2, [pc, #504]	; (8003b9c <HAL_RCC_OscConfig+0x4c8>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039aa:	f7fe fb39 	bl	8002020 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b2:	f7fe fb35 	bl	8002020 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b64      	cmp	r3, #100	; 0x64
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e103      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c4:	4b75      	ldr	r3, [pc, #468]	; (8003b9c <HAL_RCC_OscConfig+0x4c8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x312>
 80039d8:	4b6f      	ldr	r3, [pc, #444]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4a6e      	ldr	r2, [pc, #440]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6213      	str	r3, [r2, #32]
 80039e4:	e02d      	b.n	8003a42 <HAL_RCC_OscConfig+0x36e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x334>
 80039ee:	4b6a      	ldr	r3, [pc, #424]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	4a69      	ldr	r2, [pc, #420]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	6213      	str	r3, [r2, #32]
 80039fa:	4b67      	ldr	r3, [pc, #412]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4a66      	ldr	r2, [pc, #408]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	f023 0304 	bic.w	r3, r3, #4
 8003a04:	6213      	str	r3, [r2, #32]
 8003a06:	e01c      	b.n	8003a42 <HAL_RCC_OscConfig+0x36e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCC_OscConfig+0x356>
 8003a10:	4b61      	ldr	r3, [pc, #388]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	4a60      	ldr	r2, [pc, #384]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	6213      	str	r3, [r2, #32]
 8003a1c:	4b5e      	ldr	r3, [pc, #376]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4a5d      	ldr	r2, [pc, #372]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6213      	str	r3, [r2, #32]
 8003a28:	e00b      	b.n	8003a42 <HAL_RCC_OscConfig+0x36e>
 8003a2a:	4b5b      	ldr	r3, [pc, #364]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4a5a      	ldr	r2, [pc, #360]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	6213      	str	r3, [r2, #32]
 8003a36:	4b58      	ldr	r3, [pc, #352]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	4a57      	ldr	r2, [pc, #348]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d015      	beq.n	8003a76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fae9 	bl	8002020 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fe fae5 	bl	8002020 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0b1      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	4b4b      	ldr	r3, [pc, #300]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ee      	beq.n	8003a52 <HAL_RCC_OscConfig+0x37e>
 8003a74:	e014      	b.n	8003aa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a76:	f7fe fad3 	bl	8002020 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fe facf 	bl	8002020 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e09b      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a94:	4b40      	ldr	r3, [pc, #256]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ee      	bne.n	8003a7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa6:	4b3c      	ldr	r3, [pc, #240]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	4a3b      	ldr	r2, [pc, #236]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 8087 	beq.w	8003bca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003abc:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d061      	beq.n	8003b8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d146      	bne.n	8003b5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad0:	4b33      	ldr	r3, [pc, #204]	; (8003ba0 <HAL_RCC_OscConfig+0x4cc>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad6:	f7fe faa3 	bl	8002020 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ade:	f7fe fa9f 	bl	8002020 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e06d      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af0:	4b29      	ldr	r3, [pc, #164]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f0      	bne.n	8003ade <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b04:	d108      	bne.n	8003b18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b06:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	4921      	ldr	r1, [pc, #132]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b18:	4b1f      	ldr	r3, [pc, #124]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a19      	ldr	r1, [r3, #32]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	491b      	ldr	r1, [pc, #108]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b30:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <HAL_RCC_OscConfig+0x4cc>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b36:	f7fe fa73 	bl	8002020 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3e:	f7fe fa6f 	bl	8002020 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e03d      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x46a>
 8003b5c:	e035      	b.n	8003bca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5e:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <HAL_RCC_OscConfig+0x4cc>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fe fa5c 	bl	8002020 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fe fa58 	bl	8002020 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e026      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x498>
 8003b8a:	e01e      	b.n	8003bca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e019      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_RCC_OscConfig+0x500>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d001      	beq.n	8003bca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000

08003bd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0d0      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bec:	4b6a      	ldr	r3, [pc, #424]	; (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d910      	bls.n	8003c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfa:	4b67      	ldr	r3, [pc, #412]	; (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f023 0207 	bic.w	r2, r3, #7
 8003c02:	4965      	ldr	r1, [pc, #404]	; (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0a:	4b63      	ldr	r3, [pc, #396]	; (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0b8      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d020      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c34:	4b59      	ldr	r3, [pc, #356]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4a58      	ldr	r2, [pc, #352]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c4c:	4b53      	ldr	r3, [pc, #332]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4a52      	ldr	r2, [pc, #328]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c58:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	494d      	ldr	r1, [pc, #308]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d040      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d107      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	4b47      	ldr	r3, [pc, #284]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d115      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e07f      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c96:	4b41      	ldr	r3, [pc, #260]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e073      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca6:	4b3d      	ldr	r3, [pc, #244]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e06b      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb6:	4b39      	ldr	r3, [pc, #228]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4936      	ldr	r1, [pc, #216]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc8:	f7fe f9aa 	bl	8002020 <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd0:	f7fe f9a6 	bl	8002020 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e053      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 020c 	and.w	r2, r3, #12
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d1eb      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf8:	4b27      	ldr	r3, [pc, #156]	; (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d210      	bcs.n	8003d28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d06:	4b24      	ldr	r3, [pc, #144]	; (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 0207 	bic.w	r2, r3, #7
 8003d0e:	4922      	ldr	r1, [pc, #136]	; (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e032      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d34:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4916      	ldr	r1, [pc, #88]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d52:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	490e      	ldr	r1, [pc, #56]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d66:	f000 f821 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	490a      	ldr	r1, [pc, #40]	; (8003da0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d78:	5ccb      	ldrb	r3, [r1, r3]
 8003d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7e:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <HAL_RCC_ClockConfig+0x1cc>)
 8003d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_RCC_ClockConfig+0x1d0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fd f872 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40022000 	.word	0x40022000
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	08008d48 	.word	0x08008d48
 8003da4:	2000003c 	.word	0x2000003c
 8003da8:	200000c8 	.word	0x200000c8

08003dac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dac:	b490      	push	{r4, r7}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003db2:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <HAL_RCC_GetSysClockFreq+0xac>)
 8003db4:	1d3c      	adds	r4, r7, #4
 8003db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003dbc:	f240 2301 	movw	r3, #513	; 0x201
 8003dc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dd6:	4b21      	ldr	r3, [pc, #132]	; (8003e5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d002      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x40>
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0x46>
 8003dea:	e02b      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dec:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dee:	623b      	str	r3, [r7, #32]
      break;
 8003df0:	e02b      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	0c9b      	lsrs	r3, r3, #18
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	3328      	adds	r3, #40	; 0x28
 8003dfc:	443b      	add	r3, r7
 8003dfe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e02:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d012      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e0e:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	0c5b      	lsrs	r3, r3, #17
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	3328      	adds	r3, #40	; 0x28
 8003e1a:	443b      	add	r3, r7
 8003e1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	4a0e      	ldr	r2, [pc, #56]	; (8003e60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e26:	fb03 f202 	mul.w	r2, r3, r2
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
 8003e32:	e004      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	4a0b      	ldr	r2, [pc, #44]	; (8003e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e38:	fb02 f303 	mul.w	r3, r2, r3
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	623b      	str	r3, [r7, #32]
      break;
 8003e42:	e002      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e44:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e46:	623b      	str	r3, [r7, #32]
      break;
 8003e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3728      	adds	r7, #40	; 0x28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc90      	pop	{r4, r7}
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	08004b3c 	.word	0x08004b3c
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	007a1200 	.word	0x007a1200
 8003e64:	003d0900 	.word	0x003d0900

08003e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e6c:	4b02      	ldr	r3, [pc, #8]	; (8003e78 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr
 8003e78:	2000003c 	.word	0x2000003c

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e80:	f7ff fff2 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	0a1b      	lsrs	r3, r3, #8
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4903      	ldr	r1, [pc, #12]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	08008d58 	.word	0x08008d58

08003ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ea8:	f7ff ffde 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	0adb      	lsrs	r3, r3, #11
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4903      	ldr	r1, [pc, #12]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	08008d58 	.word	0x08008d58

08003ecc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	220f      	movs	r2, #15
 8003eda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003edc:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <HAL_RCC_GetClockConfig+0x58>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0203 	and.w	r2, r3, #3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <HAL_RCC_GetClockConfig+0x58>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCC_GetClockConfig+0x58>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <HAL_RCC_GetClockConfig+0x58>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	08db      	lsrs	r3, r3, #3
 8003f06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_RCC_GetClockConfig+0x5c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0207 	and.w	r2, r3, #7
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40022000 	.word	0x40022000

08003f2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <RCC_Delay+0x34>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <RCC_Delay+0x38>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	0a5b      	lsrs	r3, r3, #9
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f48:	bf00      	nop
  }
  while (Delay --);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1e5a      	subs	r2, r3, #1
 8003f4e:	60fa      	str	r2, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f9      	bne.n	8003f48 <RCC_Delay+0x1c>
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	2000003c 	.word	0x2000003c
 8003f64:	10624dd3 	.word	0x10624dd3

08003f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d07d      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f84:	2300      	movs	r3, #0
 8003f86:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f88:	4b4f      	ldr	r3, [pc, #316]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10d      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f94:	4b4c      	ldr	r3, [pc, #304]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	4a4b      	ldr	r2, [pc, #300]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	61d3      	str	r3, [r2, #28]
 8003fa0:	4b49      	ldr	r3, [pc, #292]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fac:	2301      	movs	r3, #1
 8003fae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	4b46      	ldr	r3, [pc, #280]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d118      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fbc:	4b43      	ldr	r3, [pc, #268]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a42      	ldr	r2, [pc, #264]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc8:	f7fe f82a 	bl	8002020 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	e008      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd0:	f7fe f826 	bl	8002020 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e06d      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe2:	4b3a      	ldr	r3, [pc, #232]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fee:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d02e      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	429a      	cmp	r2, r3
 800400a:	d027      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800400c:	4b2e      	ldr	r3, [pc, #184]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004014:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004016:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800401c:	4b2c      	ldr	r3, [pc, #176]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004022:	4a29      	ldr	r2, [pc, #164]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d014      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fd fff5 	bl	8002020 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004038:	e00a      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403a:	f7fd fff1 	bl	8002020 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	f241 3288 	movw	r2, #5000	; 0x1388
 8004048:	4293      	cmp	r3, r2
 800404a:	d901      	bls.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e036      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004050:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ee      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800405c:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4917      	ldr	r1, [pc, #92]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406a:	4313      	orrs	r3, r2
 800406c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800406e:	7dfb      	ldrb	r3, [r7, #23]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d105      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004074:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800408c:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	490b      	ldr	r1, [pc, #44]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409a:	4313      	orrs	r3, r2
 800409c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040aa:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	4904      	ldr	r1, [pc, #16]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40007000 	.word	0x40007000
 80040d0:	42420440 	.word	0x42420440

080040d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b08d      	sub	sp, #52	; 0x34
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040dc:	4b58      	ldr	r3, [pc, #352]	; (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80040de:	f107 040c 	add.w	r4, r7, #12
 80040e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040e8:	f240 2301 	movw	r3, #513	; 0x201
 80040ec:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
 80040f2:	2300      	movs	r3, #0
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f6:	2300      	movs	r3, #0
 80040f8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	2300      	movs	r3, #0
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b10      	cmp	r3, #16
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b10      	cmp	r3, #16
 800410c:	f200 808e 	bhi.w	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d049      	beq.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d079      	beq.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800411c:	e086      	b.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800411e:	4b49      	ldr	r3, [pc, #292]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004124:	4b47      	ldr	r3, [pc, #284]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d07f      	beq.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	0c9b      	lsrs	r3, r3, #18
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	3330      	adds	r3, #48	; 0x30
 800413a:	443b      	add	r3, r7
 800413c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004140:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d017      	beq.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800414c:	4b3d      	ldr	r3, [pc, #244]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	0c5b      	lsrs	r3, r3, #17
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	3330      	adds	r3, #48	; 0x30
 8004158:	443b      	add	r3, r7
 800415a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800416a:	4a37      	ldr	r2, [pc, #220]	; (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	fb02 f303 	mul.w	r3, r2, r3
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800417a:	e004      	b.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	4a33      	ldr	r2, [pc, #204]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004180:	fb02 f303 	mul.w	r3, r2, r3
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004186:	4b2f      	ldr	r3, [pc, #188]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004192:	d102      	bne.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004198:	e04a      	b.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4a2c      	ldr	r2, [pc, #176]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80041a8:	e042      	b.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80041aa:	4b26      	ldr	r3, [pc, #152]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ba:	d108      	bne.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80041c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80041cc:	e01f      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d8:	d109      	bne.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80041da:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80041e6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ec:	e00f      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f8:	d11c      	bne.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80041fa:	4b12      	ldr	r3, [pc, #72]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004206:	f24f 4324 	movw	r3, #62500	; 0xf424
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800420c:	e012      	b.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800420e:	e011      	b.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004210:	f7ff fe48 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	0b9b      	lsrs	r3, r3, #14
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	3301      	adds	r3, #1
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800422a:	e004      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800422c:	bf00      	nop
 800422e:	e002      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004230:	bf00      	nop
 8004232:	e000      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004234:	bf00      	nop
    }
  }
  return (frequency);
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004238:	4618      	mov	r0, r3
 800423a:	3734      	adds	r7, #52	; 0x34
 800423c:	46bd      	mov	sp, r7
 800423e:	bd90      	pop	{r4, r7, pc}
 8004240:	08004b4c 	.word	0x08004b4c
 8004244:	40021000 	.word	0x40021000
 8004248:	007a1200 	.word	0x007a1200
 800424c:	003d0900 	.word	0x003d0900
 8004250:	aaaaaaab 	.word	0xaaaaaaab

08004254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e041      	b.n	80042ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fc ff24 	bl	80010c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3304      	adds	r3, #4
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f000 fa70 	bl	8004778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e03a      	b.n	8004382 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a18      	ldr	r2, [pc, #96]	; (800438c <HAL_TIM_Base_Start_IT+0x98>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00e      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x58>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004336:	d009      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x58>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a14      	ldr	r2, [pc, #80]	; (8004390 <HAL_TIM_Base_Start_IT+0x9c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x58>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a13      	ldr	r2, [pc, #76]	; (8004394 <HAL_TIM_Base_Start_IT+0xa0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d111      	bne.n	8004370 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b06      	cmp	r3, #6
 800435c:	d010      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436e:	e007      	b.n	8004380 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800

08004398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d122      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d11b      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0202 	mvn.w	r2, #2
 80043c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f9b1 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f9a4 	bl	8004730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f9b3 	bl	8004754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d122      	bne.n	8004448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b04      	cmp	r3, #4
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0204 	mvn.w	r2, #4
 8004418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2202      	movs	r2, #2
 800441e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f987 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f97a 	bl	8004730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f989 	bl	8004754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b08      	cmp	r3, #8
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b08      	cmp	r3, #8
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0208 	mvn.w	r2, #8
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2204      	movs	r2, #4
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f95d 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f950 	bl	8004730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f95f 	bl	8004754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0210 	mvn.w	r2, #16
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2208      	movs	r2, #8
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f933 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f926 	bl	8004730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f935 	bl	8004754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d10e      	bne.n	800451c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d107      	bne.n	800451c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0201 	mvn.w	r2, #1
 8004514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fc fc58 	bl	8000dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004526:	2b80      	cmp	r3, #128	; 0x80
 8004528:	d10e      	bne.n	8004548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d107      	bne.n	8004548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fa77 	bl	8004a36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004552:	2b40      	cmp	r3, #64	; 0x40
 8004554:	d10e      	bne.n	8004574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d107      	bne.n	8004574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800456c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f8f9 	bl	8004766 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b20      	cmp	r3, #32
 8004580:	d10e      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b20      	cmp	r3, #32
 800458e:	d107      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0220 	mvn.w	r2, #32
 8004598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fa42 	bl	8004a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_TIM_ConfigClockSource+0x18>
 80045bc:	2302      	movs	r3, #2
 80045be:	e0b3      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x180>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f8:	d03e      	beq.n	8004678 <HAL_TIM_ConfigClockSource+0xd0>
 80045fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fe:	f200 8087 	bhi.w	8004710 <HAL_TIM_ConfigClockSource+0x168>
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004606:	f000 8085 	beq.w	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 800460a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460e:	d87f      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x168>
 8004610:	2b70      	cmp	r3, #112	; 0x70
 8004612:	d01a      	beq.n	800464a <HAL_TIM_ConfigClockSource+0xa2>
 8004614:	2b70      	cmp	r3, #112	; 0x70
 8004616:	d87b      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x168>
 8004618:	2b60      	cmp	r3, #96	; 0x60
 800461a:	d050      	beq.n	80046be <HAL_TIM_ConfigClockSource+0x116>
 800461c:	2b60      	cmp	r3, #96	; 0x60
 800461e:	d877      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x168>
 8004620:	2b50      	cmp	r3, #80	; 0x50
 8004622:	d03c      	beq.n	800469e <HAL_TIM_ConfigClockSource+0xf6>
 8004624:	2b50      	cmp	r3, #80	; 0x50
 8004626:	d873      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x168>
 8004628:	2b40      	cmp	r3, #64	; 0x40
 800462a:	d058      	beq.n	80046de <HAL_TIM_ConfigClockSource+0x136>
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d86f      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x168>
 8004630:	2b30      	cmp	r3, #48	; 0x30
 8004632:	d064      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x156>
 8004634:	2b30      	cmp	r3, #48	; 0x30
 8004636:	d86b      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x168>
 8004638:	2b20      	cmp	r3, #32
 800463a:	d060      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x156>
 800463c:	2b20      	cmp	r3, #32
 800463e:	d867      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x168>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d05c      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x156>
 8004644:	2b10      	cmp	r3, #16
 8004646:	d05a      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004648:	e062      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6899      	ldr	r1, [r3, #8]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f000 f966 	bl	800492a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800466c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	609a      	str	r2, [r3, #8]
      break;
 8004676:	e04e      	b.n	8004716 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6899      	ldr	r1, [r3, #8]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f000 f94f 	bl	800492a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800469a:	609a      	str	r2, [r3, #8]
      break;
 800469c:	e03b      	b.n	8004716 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6859      	ldr	r1, [r3, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	461a      	mov	r2, r3
 80046ac:	f000 f8c6 	bl	800483c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2150      	movs	r1, #80	; 0x50
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 f91d 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 80046bc:	e02b      	b.n	8004716 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	461a      	mov	r2, r3
 80046cc:	f000 f8e4 	bl	8004898 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2160      	movs	r1, #96	; 0x60
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f90d 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 80046dc:	e01b      	b.n	8004716 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f000 f8a6 	bl	800483c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2140      	movs	r1, #64	; 0x40
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 f8fd 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 80046fc:	e00b      	b.n	8004716 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4619      	mov	r1, r3
 8004708:	4610      	mov	r0, r2
 800470a:	f000 f8f4 	bl	80048f6 <TIM_ITRx_SetConfig>
        break;
 800470e:	e002      	b.n	8004716 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004710:	bf00      	nop
 8004712:	e000      	b.n	8004716 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004714:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr

08004742 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr

08004766 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr

08004778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a29      	ldr	r2, [pc, #164]	; (8004830 <TIM_Base_SetConfig+0xb8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00b      	beq.n	80047a8 <TIM_Base_SetConfig+0x30>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004796:	d007      	beq.n	80047a8 <TIM_Base_SetConfig+0x30>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a26      	ldr	r2, [pc, #152]	; (8004834 <TIM_Base_SetConfig+0xbc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_Base_SetConfig+0x30>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a25      	ldr	r2, [pc, #148]	; (8004838 <TIM_Base_SetConfig+0xc0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d108      	bne.n	80047ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a1c      	ldr	r2, [pc, #112]	; (8004830 <TIM_Base_SetConfig+0xb8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00b      	beq.n	80047da <TIM_Base_SetConfig+0x62>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c8:	d007      	beq.n	80047da <TIM_Base_SetConfig+0x62>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a19      	ldr	r2, [pc, #100]	; (8004834 <TIM_Base_SetConfig+0xbc>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d003      	beq.n	80047da <TIM_Base_SetConfig+0x62>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a18      	ldr	r2, [pc, #96]	; (8004838 <TIM_Base_SetConfig+0xc0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d108      	bne.n	80047ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a07      	ldr	r2, [pc, #28]	; (8004830 <TIM_Base_SetConfig+0xb8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d103      	bne.n	8004820 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	615a      	str	r2, [r3, #20]
}
 8004826:	bf00      	nop
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800

0800483c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f023 0201 	bic.w	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f023 030a 	bic.w	r3, r3, #10
 8004878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	621a      	str	r2, [r3, #32]
}
 800488e:	bf00      	nop
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f023 0210 	bic.w	r2, r3, #16
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	031b      	lsls	r3, r3, #12
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	621a      	str	r2, [r3, #32]
}
 80048ec:	bf00      	nop
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b085      	sub	sp, #20
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	f043 0307 	orr.w	r3, r3, #7
 8004918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	609a      	str	r2, [r3, #8]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr

0800492a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800492a:	b480      	push	{r7}
 800492c:	b087      	sub	sp, #28
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004944:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	021a      	lsls	r2, r3, #8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	431a      	orrs	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4313      	orrs	r3, r2
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	609a      	str	r2, [r3, #8]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800497c:	2302      	movs	r3, #2
 800497e:	e046      	b.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a16      	ldr	r2, [pc, #88]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049cc:	d009      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10c      	bne.n	80049fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr
 8004a18:	40012c00 	.word	0x40012c00
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800

08004a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr

08004a36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <__libc_init_array>:
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	4d0c      	ldr	r5, [pc, #48]	; (8004a80 <__libc_init_array+0x38>)
 8004a4e:	4c0d      	ldr	r4, [pc, #52]	; (8004a84 <__libc_init_array+0x3c>)
 8004a50:	1b64      	subs	r4, r4, r5
 8004a52:	10a4      	asrs	r4, r4, #2
 8004a54:	42a6      	cmp	r6, r4
 8004a56:	d109      	bne.n	8004a6c <__libc_init_array+0x24>
 8004a58:	f000 f830 	bl	8004abc <_init>
 8004a5c:	2600      	movs	r6, #0
 8004a5e:	4d0a      	ldr	r5, [pc, #40]	; (8004a88 <__libc_init_array+0x40>)
 8004a60:	4c0a      	ldr	r4, [pc, #40]	; (8004a8c <__libc_init_array+0x44>)
 8004a62:	1b64      	subs	r4, r4, r5
 8004a64:	10a4      	asrs	r4, r4, #2
 8004a66:	42a6      	cmp	r6, r4
 8004a68:	d105      	bne.n	8004a76 <__libc_init_array+0x2e>
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
 8004a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a70:	4798      	blx	r3
 8004a72:	3601      	adds	r6, #1
 8004a74:	e7ee      	b.n	8004a54 <__libc_init_array+0xc>
 8004a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a7a:	4798      	blx	r3
 8004a7c:	3601      	adds	r6, #1
 8004a7e:	e7f2      	b.n	8004a66 <__libc_init_array+0x1e>
 8004a80:	08008d70 	.word	0x08008d70
 8004a84:	08008d70 	.word	0x08008d70
 8004a88:	08008d70 	.word	0x08008d70
 8004a8c:	08008d74 	.word	0x08008d74

08004a90 <memcpy>:
 8004a90:	440a      	add	r2, r1
 8004a92:	4291      	cmp	r1, r2
 8004a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a98:	d100      	bne.n	8004a9c <memcpy+0xc>
 8004a9a:	4770      	bx	lr
 8004a9c:	b510      	push	{r4, lr}
 8004a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aa2:	4291      	cmp	r1, r2
 8004aa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aa8:	d1f9      	bne.n	8004a9e <memcpy+0xe>
 8004aaa:	bd10      	pop	{r4, pc}

08004aac <memset>:
 8004aac:	4603      	mov	r3, r0
 8004aae:	4402      	add	r2, r0
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d100      	bne.n	8004ab6 <memset+0xa>
 8004ab4:	4770      	bx	lr
 8004ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aba:	e7f9      	b.n	8004ab0 <memset+0x4>

08004abc <_init>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	bf00      	nop
 8004ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac2:	bc08      	pop	{r3}
 8004ac4:	469e      	mov	lr, r3
 8004ac6:	4770      	bx	lr

08004ac8 <_fini>:
 8004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aca:	bf00      	nop
 8004acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ace:	bc08      	pop	{r3}
 8004ad0:	469e      	mov	lr, r3
 8004ad2:	4770      	bx	lr
