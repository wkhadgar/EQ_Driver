
EQ DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004688  08005708  08005708  00015708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d90  08009d90  0002013c  2**0
                  CONTENTS
  4 .ARM          00000000  08009d90  08009d90  0002013c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d90  08009d90  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d90  08009d90  00019d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d94  08009d94  00019d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08009d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  2000013c  08009ed4  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  08009ed4  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cfb  00000000  00000000  00020165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c64  00000000  00000000  00030e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00033ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00034af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001899f  00000000  00000000  000359d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014845  00000000  00000000  0004e377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008faba  00000000  00000000  00062bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2676  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f4  00000000  00000000  000f26c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000013c 	.word	0x2000013c
 8000128:	00000000 	.word	0x00000000
 800012c:	080056f0 	.word	0x080056f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000140 	.word	0x20000140
 8000148:	080056f0 	.word	0x080056f0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_ADC1_Init+0x74>)
 800065a:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <MX_ADC1_Init+0x78>)
 800065c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_ADC1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_ADC1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_ADC1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_ADC1_Init+0x74>)
 8000672:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000676:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_ADC1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_ADC1_Init+0x74>)
 8000680:	2201      	movs	r2, #1
 8000682:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_ADC1_Init+0x74>)
 8000686:	f002 fb13 	bl	8002cb0 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000690:	f001 f8c6 	bl	8001820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000694:	2301      	movs	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000698:	2301      	movs	r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_ADC1_Init+0x74>)
 80006a6:	f002 fdc7 	bl	8003238 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80006b0:	f001 f8b6 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000158 	.word	0x20000158
 80006c0:	40012400 	.word	0x40012400

080006c4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_ADC2_Init+0x74>)
 80006d6:	4a19      	ldr	r2, [pc, #100]	; (800073c <MX_ADC2_Init+0x78>)
 80006d8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_ADC2_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_ADC2_Init+0x74>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_ADC2_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_ADC2_Init+0x74>)
 80006ee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006f2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_ADC2_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_ADC2_Init+0x74>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_ADC2_Init+0x74>)
 8000702:	f002 fad5 	bl	8002cb0 <HAL_ADC_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800070c:	f001 f888 	bl	8001820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000714:	2301      	movs	r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_ADC2_Init+0x74>)
 8000722:	f002 fd89 	bl	8003238 <HAL_ADC_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800072c:	f001 f878 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000188 	.word	0x20000188
 800073c:	40012800 	.word	0x40012800

08000740 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0318 	add.w	r3, r7, #24
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a28      	ldr	r2, [pc, #160]	; (80007fc <HAL_ADC_MspInit+0xbc>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d122      	bne.n	80007a6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a26      	ldr	r2, [pc, #152]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 8000766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a20      	ldr	r2, [pc, #128]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = FINE_ADJUST_Pin;
 8000790:	2302      	movs	r3, #2
 8000792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000794:	2303      	movs	r3, #3
 8000796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FINE_ADJUST_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0318 	add.w	r3, r7, #24
 800079c:	4619      	mov	r1, r3
 800079e:	4819      	ldr	r0, [pc, #100]	; (8000804 <HAL_ADC_MspInit+0xc4>)
 80007a0:	f002 ffbe 	bl	8003720 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80007a4:	e026      	b.n	80007f4 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <HAL_ADC_MspInit+0xc8>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d121      	bne.n	80007f4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 80007b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = V_BATTERY_Pin;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e4:	2303      	movs	r3, #3
 80007e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BATTERY_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	4619      	mov	r1, r3
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <HAL_ADC_MspInit+0xc4>)
 80007f0:	f002 ff96 	bl	8003720 <HAL_GPIO_Init>
}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40012400 	.word	0x40012400
 8000800:	40021000 	.word	0x40021000
 8000804:	40010800 	.word	0x40010800
 8000808:	40012800 	.word	0x40012800

0800080c <voltage_read>:
 * @brief Reads the analog input on battery vcc and returns the voltage based on the given high voltage ref x 10
 *
 * @param VREFH_x100 The given reference voltage max to convert the raw adc reading into, times 100 for float avoiding.
 * @retval Converted adc reading into the voltage reference frame, only scaled by 10 times.
 */
uint16_t voltage_read(uint16_t VREFH_x10) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
    uint32_t v = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]

    HAL_ADC_Start(&hadc2);
 800081a:	4817      	ldr	r0, [pc, #92]	; (8000878 <voltage_read+0x6c>)
 800081c:	f002 fb20 	bl	8002e60 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, 100);
 8000820:	2164      	movs	r1, #100	; 0x64
 8000822:	4815      	ldr	r0, [pc, #84]	; (8000878 <voltage_read+0x6c>)
 8000824:	f002 fbf6 	bl	8003014 <HAL_ADC_PollForConversion>
    for (uint8_t samples = 0; samples < 64; samples++) {
 8000828:	2300      	movs	r3, #0
 800082a:	72fb      	strb	r3, [r7, #11]
 800082c:	e009      	b.n	8000842 <voltage_read+0x36>
        v += HAL_ADC_GetValue(&hadc2);
 800082e:	4812      	ldr	r0, [pc, #72]	; (8000878 <voltage_read+0x6c>)
 8000830:	f002 fcf6 	bl	8003220 <HAL_ADC_GetValue>
 8000834:	4602      	mov	r2, r0
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	4413      	add	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]
    for (uint8_t samples = 0; samples < 64; samples++) {
 800083c:	7afb      	ldrb	r3, [r7, #11]
 800083e:	3301      	adds	r3, #1
 8000840:	72fb      	strb	r3, [r7, #11]
 8000842:	7afb      	ldrb	r3, [r7, #11]
 8000844:	2b3f      	cmp	r3, #63	; 0x3f
 8000846:	d9f2      	bls.n	800082e <voltage_read+0x22>
    }
    HAL_ADC_Stop(&hadc2);
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <voltage_read+0x6c>)
 800084a:	f002 fbb7 	bl	8002fbc <HAL_ADC_Stop>

    v >>= 6; // v / 64
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	099b      	lsrs	r3, r3, #6
 8000852:	60fb      	str	r3, [r7, #12]
    v = (v * VREFH_x10) / 4025; //correlates analog read to voltage value
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	fb03 f202 	mul.w	r2, r3, r2
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <voltage_read+0x70>)
 800085e:	fba3 1302 	umull	r1, r3, r3, r2
 8000862:	1ad2      	subs	r2, r2, r3
 8000864:	0852      	lsrs	r2, r2, #1
 8000866:	4413      	add	r3, r2
 8000868:	0adb      	lsrs	r3, r3, #11
 800086a:	60fb      	str	r3, [r7, #12]
    return v;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	b29b      	uxth	r3, r3
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000188 	.word	0x20000188
 800087c:	048409ed 	.word	0x048409ed

08000880 <BKP_read>:
/*
 * @brief: reads byte from given addr, splitting each bkp register 2byte writable space into 2 bytes
 * @param addr: address of the bkp register to be read, can be from 0 to 19 (20 bytes total)
 * @retval: byte readed from the given adress
 */
uint8_t BKP_read(uint8_t addr) {
 8000880:	b480      	push	{r7}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
    if (addr < 20) {
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b13      	cmp	r3, #19
 800088e:	d817      	bhi.n	80008c0 <BKP_read+0x40>
        uint32_t * target_DR = &BKP->DR1; // base
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <BKP_read+0x4c>)
 8000892:	617b      	str	r3, [r7, #20]

        target_DR += addr >> 1; // selects the bkp register address
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	085b      	lsrs	r3, r3, #1
 8000898:	b2db      	uxtb	r3, r3
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	4413      	add	r3, r2
 80008a0:	617b      	str	r3, [r7, #20]
        bool target_DR_shift = addr & 1; // selects if the byte should be written shifted
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	bf14      	ite	ne
 80008ac:	2301      	movne	r3, #1
 80008ae:	2300      	moveq	r3, #0
 80008b0:	74fb      	strb	r3, [r7, #19]

        uint8_t *saved_data = (uint8_t *) target_DR; //resizes the pointer to do 1byte steps
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	60fb      	str	r3, [r7, #12]

        return saved_data[target_DR_shift]; //reads the byte sized pointer content
 80008b6:	7cfb      	ldrb	r3, [r7, #19]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	4413      	add	r3, r2
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	e000      	b.n	80008c2 <BKP_read+0x42>
    }
    return 0;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	371c      	adds	r7, #28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	40006c04 	.word	0x40006c04

080008d0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e4:	4b61      	ldr	r3, [pc, #388]	; (8000a6c <MX_GPIO_Init+0x19c>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a60      	ldr	r2, [pc, #384]	; (8000a6c <MX_GPIO_Init+0x19c>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b5e      	ldr	r3, [pc, #376]	; (8000a6c <MX_GPIO_Init+0x19c>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fc:	4b5b      	ldr	r3, [pc, #364]	; (8000a6c <MX_GPIO_Init+0x19c>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a5a      	ldr	r2, [pc, #360]	; (8000a6c <MX_GPIO_Init+0x19c>)
 8000902:	f043 0320 	orr.w	r3, r3, #32
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b58      	ldr	r3, [pc, #352]	; (8000a6c <MX_GPIO_Init+0x19c>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0320 	and.w	r3, r3, #32
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <MX_GPIO_Init+0x19c>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <MX_GPIO_Init+0x19c>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b52      	ldr	r3, [pc, #328]	; (8000a6c <MX_GPIO_Init+0x19c>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b4f      	ldr	r3, [pc, #316]	; (8000a6c <MX_GPIO_Init+0x19c>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a4e      	ldr	r2, [pc, #312]	; (8000a6c <MX_GPIO_Init+0x19c>)
 8000932:	f043 0308 	orr.w	r3, r3, #8
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b4c      	ldr	r3, [pc, #304]	; (8000a6c <MX_GPIO_Init+0x19c>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LASER_ON_Pin|M1_DIR_Pin|M1_STEP_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	21e8      	movs	r1, #232	; 0xe8
 8000948:	4849      	ldr	r0, [pc, #292]	; (8000a70 <MX_GPIO_Init+0x1a0>)
 800094a:	f003 f86d 	bl	8003a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1_ENABLE_GPIO_Port, M1_ENABLE_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2110      	movs	r1, #16
 8000952:	4847      	ldr	r0, [pc, #284]	; (8000a70 <MX_GPIO_Init+0x1a0>)
 8000954:	f003 f868 	bl	8003a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_STEP_GPIO_Port, M2_STEP_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4845      	ldr	r0, [pc, #276]	; (8000a74 <MX_GPIO_Init+0x1a4>)
 800095e:	f003 f863 	bl	8003a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_ENABLE_GPIO_Port, M2_ENABLE_Pin, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2102      	movs	r1, #2
 8000966:	4843      	ldr	r0, [pc, #268]	; (8000a74 <MX_GPIO_Init+0x1a4>)
 8000968:	f003 f85e 	bl	8003a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800096c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000972:	2303      	movs	r3, #3
 8000974:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	4619      	mov	r1, r3
 800097c:	483e      	ldr	r0, [pc, #248]	; (8000a78 <MX_GPIO_Init+0x1a8>)
 800097e:	f002 fecf 	bl	8003720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000982:	f649 7304 	movw	r3, #40708	; 0x9f04
 8000986:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000988:	2303      	movs	r3, #3
 800098a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	4619      	mov	r1, r3
 8000992:	4837      	ldr	r0, [pc, #220]	; (8000a70 <MX_GPIO_Init+0x1a0>)
 8000994:	f002 fec4 	bl	8003720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LASER_ON_Pin|M1_ENABLE_Pin|M1_DIR_Pin|M2_DIR_Pin;
 8000998:	23b8      	movs	r3, #184	; 0xb8
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	4619      	mov	r1, r3
 80009ae:	4830      	ldr	r0, [pc, #192]	; (8000a70 <MX_GPIO_Init+0x1a0>)
 80009b0:	f002 feb6 	bl	8003720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_STEP_Pin;
 80009b4:	2340      	movs	r3, #64	; 0x40
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_STEP_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	4829      	ldr	r0, [pc, #164]	; (8000a70 <MX_GPIO_Init+0x1a0>)
 80009cc:	f002 fea8 	bl	8003720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_STEP_Pin;
 80009d0:	2301      	movs	r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_STEP_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	4619      	mov	r1, r3
 80009e6:	4823      	ldr	r0, [pc, #140]	; (8000a74 <MX_GPIO_Init+0x1a4>)
 80009e8:	f002 fe9a 	bl	8003720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_ENABLE_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	481c      	ldr	r0, [pc, #112]	; (8000a74 <MX_GPIO_Init+0x1a4>)
 8000a04:	f002 fe8c 	bl	8003720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15
 8000a08:	f648 733c 	movw	r3, #36668	; 0x8f3c
 8000a0c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	4619      	mov	r1, r3
 8000a18:	4816      	ldr	r0, [pc, #88]	; (8000a74 <MX_GPIO_Init+0x1a4>)
 8000a1a:	f002 fe81 	bl	8003720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SELECT_Pin|ROTARY_TRIG_Pin;
 8000a1e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_GPIO_Init+0x1ac>)
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	4619      	mov	r1, r3
 8000a32:	4810      	ldr	r0, [pc, #64]	; (8000a74 <MX_GPIO_Init+0x1a4>)
 8000a34:	f002 fe74 	bl	8003720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROTARY_CLKW_Pin;
 8000a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROTARY_CLKW_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <MX_GPIO_Init+0x1a4>)
 8000a4e:	f002 fe67 	bl	8003720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2028      	movs	r0, #40	; 0x28
 8000a58:	f002 fe37 	bl	80036ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a5c:	2028      	movs	r0, #40	; 0x28
 8000a5e:	f002 fe50 	bl	8003702 <HAL_NVIC_EnableIRQ>

}
 8000a62:	bf00      	nop
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010800 	.word	0x40010800
 8000a74:	40010c00 	.word	0x40010c00
 8000a78:	40011000 	.word	0x40011000
 8000a7c:	10210000 	.word	0x10210000

08000a80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a86:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <MX_I2C1_Init+0x54>)
 8000a88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a8c:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x58>)
 8000a8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 120;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a98:	2278      	movs	r2, #120	; 0x78
 8000a9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab8:	2280      	movs	r2, #128	; 0x80
 8000aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000abe:	f002 ffd9 	bl	8003a74 <HAL_I2C_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ac8:	f000 feaa 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200001b8 	.word	0x200001b8
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	00061a80 	.word	0x00061a80

08000adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a15      	ldr	r2, [pc, #84]	; (8000b4c <HAL_I2C_MspInit+0x70>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d123      	bne.n	8000b44 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_I2C_MspInit+0x74>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <HAL_I2C_MspInit+0x74>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_I2C_MspInit+0x74>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000b14:	23c0      	movs	r3, #192	; 0xc0
 8000b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b18:	2312      	movs	r3, #18
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <HAL_I2C_MspInit+0x78>)
 8000b28:	f002 fdfa 	bl	8003720 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_I2C_MspInit+0x74>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_I2C_MspInit+0x74>)
 8000b32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b36:	61d3      	str	r3, [r2, #28]
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_I2C_MspInit+0x74>)
 8000b3a:	69db      	ldr	r3, [r3, #28]
 8000b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010c00 	.word	0x40010c00

08000b58 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == ROTARY_TRIG_Pin) {
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b68:	d10c      	bne.n	8000b84 <HAL_GPIO_EXTI_Callback+0x2c>
        set_flag(rotary_triggered);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f001 f890 	bl	8001c90 <set_flag>
        if (ROTARY_CLKW_GPIO_Port->IDR & ROTARY_CLKW_Pin) {
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x44>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00a      	beq.n	8000b92 <HAL_GPIO_EXTI_Callback+0x3a>
            set_flag(ccw);
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f001 f887 	bl	8001c90 <set_flag>
        }
    } else if (GPIO_Pin == SELECT_Pin) {
        set_flag(selected);
    }
}
 8000b82:	e006      	b.n	8000b92 <HAL_GPIO_EXTI_Callback+0x3a>
    } else if (GPIO_Pin == SELECT_Pin) {
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b8a:	d102      	bne.n	8000b92 <HAL_GPIO_EXTI_Callback+0x3a>
        set_flag(selected);
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f001 f87f 	bl	8001c90 <set_flag>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40010c00 	.word	0x40010c00

08000ba0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000ba6:	f002 f82d 	bl	8002c04 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000baa:	f000 fcaf 	bl	800150c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000bae:	f7ff fe8f 	bl	80008d0 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000bb2:	f7ff ff65 	bl	8000a80 <MX_I2C1_Init>
    MX_ADC2_Init();
 8000bb6:	f7ff fd85 	bl	80006c4 <MX_ADC2_Init>
    MX_TIM2_Init();
 8000bba:	f000 fff9 	bl	8001bb0 <MX_TIM2_Init>
    MX_ADC1_Init();
 8000bbe:	f7ff fd43 	bl	8000648 <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */

    SH1106_cleanInit();
 8000bc2:	f001 f9af 	bl	8001f24 <SH1106_cleanInit>

    /** data recover */
    battery_charge = get_bat_percentage();
 8000bc6:	f000 fcfc 	bl	80015c2 <get_bat_percentage>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4baf      	ldr	r3, [pc, #700]	; (8000e8c <main+0x2ec>)
 8000bd0:	701a      	strb	r2, [r3, #0]
    menu_op_value[brilho_tela] = BKP_read(0);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff fe54 	bl	8000880 <BKP_read>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	4bac      	ldr	r3, [pc, #688]	; (8000e90 <main+0x2f0>)
 8000bde:	815a      	strh	r2, [r3, #10]
    menu_op_value[hemisphere] = BKP_read(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f7ff fe4d 	bl	8000880 <BKP_read>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	4ba9      	ldr	r3, [pc, #676]	; (8000e90 <main+0x2f0>)
 8000bec:	809a      	strh	r2, [r3, #4]
    menu_op_value[tempo_tela] = BKP_read(2);
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f7ff fe46 	bl	8000880 <BKP_read>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4ba5      	ldr	r3, [pc, #660]	; (8000e90 <main+0x2f0>)
 8000bfa:	819a      	strh	r2, [r3, #12]

    /**start logo display */
    SH1106_drawBitmapFullscreen(eqmount_logo);
 8000bfc:	48a5      	ldr	r0, [pc, #660]	; (8000e94 <main+0x2f4>)
 8000bfe:	f001 ffed 	bl	8002bdc <SH1106_drawBitmapFullscreen>
    SH1106_flush();
 8000c02:	f001 f95b 	bl	8001ebc <SH1106_flush>
    SH1106_clear();
 8000c06:	f001 f937 	bl	8001e78 <SH1106_clear>
    HAL_Delay(2500);
 8000c0a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000c0e:	f002 f82b 	bl	8002c68 <HAL_Delay>

    /** transition to menu fake load */
    SH1106_printStr(16, 15, "Carregando Menu", fnt5x7);
 8000c12:	4ba1      	ldr	r3, [pc, #644]	; (8000e98 <main+0x2f8>)
 8000c14:	4aa1      	ldr	r2, [pc, #644]	; (8000e9c <main+0x2fc>)
 8000c16:	210f      	movs	r1, #15
 8000c18:	2010      	movs	r0, #16
 8000c1a:	f001 fe8b 	bl	8002934 <SH1106_printStr>
    for (uint8_t s = 0; s <= 100; s += 2) {
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]
 8000c22:	e00f      	b.n	8000c44 <main+0xa4>
        SH1106_drawRoundRectFill(s, 7, 32, 110, 8);
 8000c24:	7bf8      	ldrb	r0, [r7, #15]
 8000c26:	2308      	movs	r3, #8
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	236e      	movs	r3, #110	; 0x6e
 8000c2c:	2220      	movs	r2, #32
 8000c2e:	2107      	movs	r1, #7
 8000c30:	f001 fb90 	bl	8002354 <SH1106_drawRoundRectFill>
        SH1106_flush();
 8000c34:	f001 f942 	bl	8001ebc <SH1106_flush>
        HAL_Delay(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f002 f815 	bl	8002c68 <HAL_Delay>
    for (uint8_t s = 0; s <= 100; s += 2) {
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	3302      	adds	r3, #2
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	2b64      	cmp	r3, #100	; 0x64
 8000c48:	d9ec      	bls.n	8000c24 <main+0x84>
    }
    SH1106_clear();
 8000c4a:	f001 f915 	bl	8001e78 <SH1106_clear>
    set_flag(on_menu);
 8000c4e:	2008      	movs	r0, #8
 8000c50:	f001 f81e 	bl	8001c90 <set_flag>

    last_move_ticks = TICKS_NOW; /** < start time reference */
 8000c54:	f001 fffe 	bl	8002c54 <HAL_GetTick>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4a91      	ldr	r2, [pc, #580]	; (8000ea0 <main+0x300>)
 8000c5c:	6013      	str	r3, [r2, #0]
    bat_ticks_update = last_move_ticks; /** < time tracking to help make periodic battery checks */
 8000c5e:	4b90      	ldr	r3, [pc, #576]	; (8000ea0 <main+0x300>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a90      	ldr	r2, [pc, #576]	; (8000ea4 <main+0x304>)
 8000c64:	6013      	str	r3, [r2, #0]

    stepper_init(&RA_STEPPER);
 8000c66:	4890      	ldr	r0, [pc, #576]	; (8000ea8 <main+0x308>)
 8000c68:	f000 fe00 	bl	800186c <stepper_init>
    stepper_init(&DEC_STEPPER);
 8000c6c:	488f      	ldr	r0, [pc, #572]	; (8000eac <main+0x30c>)
 8000c6e:	f000 fdfd 	bl	800186c <stepper_init>
    HAL_TIM_Base_Start_IT(&htim2);
 8000c72:	488f      	ldr	r0, [pc, #572]	; (8000eb0 <main+0x310>)
 8000c74:	f004 f958 	bl	8004f28 <HAL_TIM_Base_Start_IT>
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */

        SH1106_clear(); /** < clears buffer, to construct new one and flush it later */
 8000c78:	f001 f8fe 	bl	8001e78 <SH1106_clear>

        /** horse running easter egg */
        {
            if (get_flag(toggle_horse)) {
 8000c7c:	2007      	movs	r0, #7
 8000c7e:	f001 f827 	bl	8001cd0 <get_flag>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d015      	beq.n	8000cb4 <main+0x114>
                if (frame > 14) frame = 0;
 8000c88:	4b8a      	ldr	r3, [pc, #552]	; (8000eb4 <main+0x314>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b0e      	cmp	r3, #14
 8000c8e:	d902      	bls.n	8000c96 <main+0xf6>
 8000c90:	4b88      	ldr	r3, [pc, #544]	; (8000eb4 <main+0x314>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
                SH1106_drawBitmapFullscreen(horse_running[frame++]);
 8000c96:	4b87      	ldr	r3, [pc, #540]	; (8000eb4 <main+0x314>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	b2d1      	uxtb	r1, r2
 8000c9e:	4a85      	ldr	r2, [pc, #532]	; (8000eb4 <main+0x314>)
 8000ca0:	7011      	strb	r1, [r2, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b84      	ldr	r3, [pc, #528]	; (8000eb8 <main+0x318>)
 8000ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 ff96 	bl	8002bdc <SH1106_drawBitmapFullscreen>
                SH1106_flush();
 8000cb0:	f001 f904 	bl	8001ebc <SH1106_flush>
            }
        }

        /** battery info */
        {
            if (TICKS_NOW - bat_ticks_update > 10000) {
 8000cb4:	f001 ffce 	bl	8002c54 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	4b7a      	ldr	r3, [pc, #488]	; (8000ea4 <main+0x304>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d911      	bls.n	8000cec <main+0x14c>
                battery_charge = get_bat_percentage();
 8000cc8:	f000 fc7b 	bl	80015c2 <get_bat_percentage>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4b6e      	ldr	r3, [pc, #440]	; (8000e8c <main+0x2ec>)
 8000cd2:	701a      	strb	r2, [r3, #0]
                if (battery_charge < 20) set_flag(low_battery);
 8000cd4:	4b6d      	ldr	r3, [pc, #436]	; (8000e8c <main+0x2ec>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b13      	cmp	r3, #19
 8000cda:	d802      	bhi.n	8000ce2 <main+0x142>
 8000cdc:	2006      	movs	r0, #6
 8000cde:	f000 ffd7 	bl	8001c90 <set_flag>
                bat_ticks_update = TICKS_NOW;
 8000ce2:	f001 ffb7 	bl	8002c54 <HAL_GetTick>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4a6e      	ldr	r2, [pc, #440]	; (8000ea4 <main+0x304>)
 8000cea:	6013      	str	r3, [r2, #0]
            }
            SH1106_drawRoundRectFill(battery_charge, 105, 2, 20, 5);
 8000cec:	4b67      	ldr	r3, [pc, #412]	; (8000e8c <main+0x2ec>)
 8000cee:	7818      	ldrb	r0, [r3, #0]
 8000cf0:	2305      	movs	r3, #5
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2314      	movs	r3, #20
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	2169      	movs	r1, #105	; 0x69
 8000cfa:	f001 fb2b 	bl	8002354 <SH1106_drawRoundRectFill>
            if (get_flag(low_battery)) SH1106_drawBitmap(96, 1, 5, 8, alert);
 8000cfe:	2006      	movs	r0, #6
 8000d00:	f000 ffe6 	bl	8001cd0 <get_flag>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d007      	beq.n	8000d1a <main+0x17a>
 8000d0a:	4b6c      	ldr	r3, [pc, #432]	; (8000ebc <main+0x31c>)
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2308      	movs	r3, #8
 8000d10:	2205      	movs	r2, #5
 8000d12:	2101      	movs	r1, #1
 8000d14:	2060      	movs	r0, #96	; 0x60
 8000d16:	f001 feb1 	bl	8002a7c <SH1106_drawBitmap>
        }

        /** updates on menu related values*/
        {
            rotary_data_t rotary_events;
            handle_rotary_events(&rotary_events);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fc69 	bl	80015f4 <handle_rotary_events>

            if (rotary_events.was_pressed) {
 8000d22:	797b      	ldrb	r3, [r7, #5]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d050      	beq.n	8000dca <main+0x22a>
                if ((lock_value != value_preview) && get_flag(on_menu)) { //if value changed
 8000d28:	4b65      	ldr	r3, [pc, #404]	; (8000ec0 <main+0x320>)
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	4b65      	ldr	r3, [pc, #404]	; (8000ec4 <main+0x324>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d035      	beq.n	8000da0 <main+0x200>
 8000d34:	2008      	movs	r0, #8
 8000d36:	f000 ffcb 	bl	8001cd0 <get_flag>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d02f      	beq.n	8000da0 <main+0x200>
                    menu_op_value[CURRENT_SELECTION] = value_preview; //saves value to menu
 8000d40:	4b61      	ldr	r3, [pc, #388]	; (8000ec8 <main+0x328>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b61      	ldr	r3, [pc, #388]	; (8000ecc <main+0x32c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a5d      	ldr	r2, [pc, #372]	; (8000ec4 <main+0x324>)
 8000d4e:	8811      	ldrh	r1, [r2, #0]
 8000d50:	4a4f      	ldr	r2, [pc, #316]	; (8000e90 <main+0x2f0>)
 8000d52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    lock_value = value_preview;
 8000d56:	4b5b      	ldr	r3, [pc, #364]	; (8000ec4 <main+0x324>)
 8000d58:	881a      	ldrh	r2, [r3, #0]
 8000d5a:	4b59      	ldr	r3, [pc, #356]	; (8000ec0 <main+0x320>)
 8000d5c:	801a      	strh	r2, [r3, #0]

                    switch (CURRENT_SELECTION) {
 8000d5e:	4b5a      	ldr	r3, [pc, #360]	; (8000ec8 <main+0x328>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <main+0x32c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4413      	add	r3, r2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d00f      	beq.n	8000d8e <main+0x1ee>
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d136      	bne.n	8000de0 <main+0x240>
                        case hemisphere:
                            if (menu_op_value[hemisphere]) {
 8000d72:	4b47      	ldr	r3, [pc, #284]	; (8000e90 <main+0x2f0>)
 8000d74:	889b      	ldrh	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d004      	beq.n	8000d84 <main+0x1e4>
                                stepper_set_direction(&RA_STEPPER, clockwise);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	484a      	ldr	r0, [pc, #296]	; (8000ea8 <main+0x308>)
 8000d7e:	f000 fddb 	bl	8001938 <stepper_set_direction>
                            } else {
                                stepper_set_direction(&RA_STEPPER, counter_clockwise);
                            }
                            break;
 8000d82:	e00c      	b.n	8000d9e <main+0x1fe>
                                stepper_set_direction(&RA_STEPPER, counter_clockwise);
 8000d84:	2101      	movs	r1, #1
 8000d86:	4848      	ldr	r0, [pc, #288]	; (8000ea8 <main+0x308>)
 8000d88:	f000 fdd6 	bl	8001938 <stepper_set_direction>
                            break;
 8000d8c:	e007      	b.n	8000d9e <main+0x1fe>
                        case DEC_:
                            timer_pre_scaler = menu_op_value[DEC_] + 1;
 8000d8e:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <main+0x2f0>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	3301      	adds	r3, #1
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <main+0x330>)
 8000d9a:	701a      	strb	r2, [r3, #0]
                            break;
 8000d9c:	bf00      	nop
                    switch (CURRENT_SELECTION) {
 8000d9e:	e01f      	b.n	8000de0 <main+0x240>
                    }

                } else if (!get_flag(on_menu)) {
 8000da0:	2008      	movs	r0, #8
 8000da2:	f000 ff95 	bl	8001cd0 <get_flag>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f083 0301 	eor.w	r3, r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d016      	beq.n	8000de0 <main+0x240>
                    value_preview = menu_op_value[CURRENT_SELECTION]; //gets value from menu
 8000db2:	4b45      	ldr	r3, [pc, #276]	; (8000ec8 <main+0x328>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <main+0x32c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a34      	ldr	r2, [pc, #208]	; (8000e90 <main+0x2f0>)
 8000dc0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000dc4:	4b3f      	ldr	r3, [pc, #252]	; (8000ec4 <main+0x324>)
 8000dc6:	801a      	strh	r2, [r3, #0]
 8000dc8:	e00a      	b.n	8000de0 <main+0x240>
                }

            } else if (rotary_events.inc) {
 8000dca:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d006      	beq.n	8000de0 <main+0x240>
                handle_menu_changes(&menu_head, &menu_selection, &value_preview, rotary_events.inc);
 8000dd2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000dd6:	4a3b      	ldr	r2, [pc, #236]	; (8000ec4 <main+0x324>)
 8000dd8:	493c      	ldr	r1, [pc, #240]	; (8000ecc <main+0x32c>)
 8000dda:	483b      	ldr	r0, [pc, #236]	; (8000ec8 <main+0x328>)
 8000ddc:	f000 fc78 	bl	80016d0 <handle_menu_changes>
            }

            signed_value_preview = (int16_t) (value_preview - 32765);
 8000de0:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <main+0x324>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000de8:	3b7d      	subs	r3, #125	; 0x7d
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <main+0x334>)
 8000df0:	801a      	strh	r2, [r3, #0]
        }

        /** drawing the menu */
        {
            uint16_t current_x;
            const uint8_t space_pixel_width = 2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	737b      	strb	r3, [r7, #13]
            if (get_flag(on_menu)) {
 8000df6:	2008      	movs	r0, #8
 8000df8:	f000 ff6a 	bl	8001cd0 <get_flag>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 81ce 	beq.w	80011a0 <main+0x600>
                set_flag(update_display);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 ff43 	bl	8001c90 <set_flag>


                static uint8_t pool_delay = 0;
                if (get_flag(selected) || pool_delay) {
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 ff60 	bl	8001cd0 <get_flag>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d103      	bne.n	8000e1e <main+0x27e>
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <main+0x338>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d023      	beq.n	8000e66 <main+0x2c6>
                    reset_flag(selected);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 ff46 	bl	8001cb0 <reset_flag>
                    pool_delay++;
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <main+0x338>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <main+0x338>)
 8000e2e:	701a      	strb	r2, [r3, #0]
                    SH1106_drawBitmap(space_pixel_width, 5 + (12 * menu_selection), 5, 8, arrow);
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <main+0x32c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	0052      	lsls	r2, r2, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	3305      	adds	r3, #5
 8000e40:	b2d9      	uxtb	r1, r3
 8000e42:	7b78      	ldrb	r0, [r7, #13]
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <main+0x33c>)
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2308      	movs	r3, #8
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	f001 fe16 	bl	8002a7c <SH1106_drawBitmap>
                    if (pool_delay >= 10) {
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <main+0x338>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b09      	cmp	r3, #9
 8000e56:	d916      	bls.n	8000e86 <main+0x2e6>
                        pool_delay = 0;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <main+0x338>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
                        set_flag(selected);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 ff16 	bl	8001c90 <set_flag>
                    if (pool_delay >= 10) {
 8000e64:	e00f      	b.n	8000e86 <main+0x2e6>
                    }
                } else {
                    SH1106_drawBitmap(0, 5 + (12 * menu_selection), 5, 8, arrow);
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <main+0x32c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	0052      	lsls	r2, r2, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	3305      	adds	r3, #5
 8000e76:	b2d9      	uxtb	r1, r3
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <main+0x33c>)
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	2205      	movs	r2, #5
 8000e80:	2000      	movs	r0, #0
 8000e82:	f001 fdfb 	bl	8002a7c <SH1106_drawBitmap>
                }

                for (uint8_t current_drawing_row = 0; current_drawing_row < SCREEN_ROWS; current_drawing_row++) {
 8000e86:	2300      	movs	r3, #0
 8000e88:	73bb      	strb	r3, [r7, #14]
 8000e8a:	e16f      	b.n	800116c <main+0x5cc>
 8000e8c:	20000226 	.word	0x20000226
 8000e90:	2000020c 	.word	0x2000020c
 8000e94:	080093b4 	.word	0x080093b4
 8000e98:	08009b84 	.word	0x08009b84
 8000e9c:	08005760 	.word	0x08005760
 8000ea0:	2000021c 	.word	0x2000021c
 8000ea4:	20000220 	.word	0x20000220
 8000ea8:	2000003c 	.word	0x2000003c
 8000eac:	20000060 	.word	0x20000060
 8000eb0:	2000027c 	.word	0x2000027c
 8000eb4:	20000227 	.word	0x20000227
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	080097bc 	.word	0x080097bc
 8000ec0:	2000022c 	.word	0x2000022c
 8000ec4:	2000022a 	.word	0x2000022a
 8000ec8:	20000224 	.word	0x20000224
 8000ecc:	20000225 	.word	0x20000225
 8000ed0:	200000a4 	.word	0x200000a4
 8000ed4:	20000228 	.word	0x20000228
 8000ed8:	2000022e 	.word	0x2000022e
 8000edc:	080097b4 	.word	0x080097b4
                    current_x = 8;
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	817b      	strh	r3, [r7, #10]
                    uint8_t current_y = space_pixel_width + 3 + (12 * current_drawing_row);
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	0052      	lsls	r2, r2, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	7b7b      	ldrb	r3, [r7, #13]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	3303      	adds	r3, #3
 8000ef8:	727b      	strb	r3, [r7, #9]

                    current_x +=
                            SH1106_printStr(current_x, current_y, menu_str[menu_head + current_drawing_row], fnt5x7) +
 8000efa:	897b      	ldrh	r3, [r7, #10]
 8000efc:	b2d8      	uxtb	r0, r3
 8000efe:	4b9e      	ldr	r3, [pc, #632]	; (8001178 <main+0x5d8>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a9c      	ldr	r2, [pc, #624]	; (800117c <main+0x5dc>)
 8000f0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f0e:	7a79      	ldrb	r1, [r7, #9]
 8000f10:	4b9b      	ldr	r3, [pc, #620]	; (8001180 <main+0x5e0>)
 8000f12:	f001 fd0f 	bl	8002934 <SH1106_printStr>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	7b7b      	ldrb	r3, [r7, #13]
 8000f1c:	4413      	add	r3, r2
                    current_x +=
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	897b      	ldrh	r3, [r7, #10]
 8000f22:	4413      	add	r3, r2
 8000f24:	817b      	strh	r3, [r7, #10]
                            space_pixel_width;
                    current_x +=
                            SH1106_printChar(current_x, current_y, ':', fnt5x7) + space_pixel_width;
 8000f26:	897b      	ldrh	r3, [r7, #10]
 8000f28:	b2d8      	uxtb	r0, r3
 8000f2a:	7a79      	ldrb	r1, [r7, #9]
 8000f2c:	4b94      	ldr	r3, [pc, #592]	; (8001180 <main+0x5e0>)
 8000f2e:	223a      	movs	r2, #58	; 0x3a
 8000f30:	f001 fa96 	bl	8002460 <SH1106_printChar>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	7b7b      	ldrb	r3, [r7, #13]
 8000f3a:	4413      	add	r3, r2
                    current_x +=
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	897b      	ldrh	r3, [r7, #10]
 8000f40:	4413      	add	r3, r2
 8000f42:	817b      	strh	r3, [r7, #10]
                    switch (current_drawing_row + menu_head) {
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	4a8c      	ldr	r2, [pc, #560]	; (8001178 <main+0x5d8>)
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	2b07      	cmp	r3, #7
 8000f4e:	f200 80f7 	bhi.w	8001140 <main+0x5a0>
 8000f52:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <main+0x3b8>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	08000f79 	.word	0x08000f79
 8000f5c:	08000fff 	.word	0x08000fff
 8000f60:	08001081 	.word	0x08001081
 8000f64:	0800109d 	.word	0x0800109d
 8000f68:	080010b9 	.word	0x080010b9
 8000f6c:	080010d5 	.word	0x080010d5
 8000f70:	08001101 	.word	0x08001101
 8000f74:	0800112d 	.word	0x0800112d

                        case DEC_:
                            current_x += SH1106_printInt(current_x, current_y, menu_op_value[DEC_] / 60, fnt5x7) + 1;
 8000f78:	897b      	ldrh	r3, [r7, #10]
 8000f7a:	b2d8      	uxtb	r0, r3
 8000f7c:	4b81      	ldr	r3, [pc, #516]	; (8001184 <main+0x5e4>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	4a81      	ldr	r2, [pc, #516]	; (8001188 <main+0x5e8>)
 8000f82:	fba2 2303 	umull	r2, r3, r2, r3
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	7a79      	ldrb	r1, [r7, #9]
 8000f8e:	4b7c      	ldr	r3, [pc, #496]	; (8001180 <main+0x5e0>)
 8000f90:	f001 fd0a 	bl	80029a8 <SH1106_printInt>
 8000f94:	4603      	mov	r3, r0
 8000f96:	3301      	adds	r3, #1
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	897b      	ldrh	r3, [r7, #10]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	817b      	strh	r3, [r7, #10]
                            current_x += SH1106_printChar(current_x, current_y - 2, 'o', fnt5x7) +
 8000fa0:	897b      	ldrh	r3, [r7, #10]
 8000fa2:	b2d8      	uxtb	r0, r3
 8000fa4:	7a7b      	ldrb	r3, [r7, #9]
 8000fa6:	3b02      	subs	r3, #2
 8000fa8:	b2d9      	uxtb	r1, r3
 8000faa:	4b75      	ldr	r3, [pc, #468]	; (8001180 <main+0x5e0>)
 8000fac:	226f      	movs	r2, #111	; 0x6f
 8000fae:	f001 fa57 	bl	8002460 <SH1106_printChar>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	897b      	ldrh	r3, [r7, #10]
 8000fba:	4413      	add	r3, r2
 8000fbc:	817b      	strh	r3, [r7, #10]
                                         1; //TODO alterar na lib das fontes o °
                            current_x += SH1106_printInt(current_x, current_y, menu_op_value[DEC_] % 60, fnt5x7);
 8000fbe:	897b      	ldrh	r3, [r7, #10]
 8000fc0:	b2d8      	uxtb	r0, r3
 8000fc2:	4b70      	ldr	r3, [pc, #448]	; (8001184 <main+0x5e4>)
 8000fc4:	881a      	ldrh	r2, [r3, #0]
 8000fc6:	4b70      	ldr	r3, [pc, #448]	; (8001188 <main+0x5e8>)
 8000fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fcc:	0959      	lsrs	r1, r3, #5
 8000fce:	460b      	mov	r3, r1
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	1a5b      	subs	r3, r3, r1
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	7a79      	ldrb	r1, [r7, #9]
 8000fde:	4b68      	ldr	r3, [pc, #416]	; (8001180 <main+0x5e0>)
 8000fe0:	f001 fce2 	bl	80029a8 <SH1106_printInt>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	897b      	ldrh	r3, [r7, #10]
 8000fea:	4413      	add	r3, r2
 8000fec:	817b      	strh	r3, [r7, #10]
                            SH1106_printChar(current_x, current_y, '\'', fnt5x7);
 8000fee:	897b      	ldrh	r3, [r7, #10]
 8000ff0:	b2d8      	uxtb	r0, r3
 8000ff2:	7a79      	ldrb	r1, [r7, #9]
 8000ff4:	4b62      	ldr	r3, [pc, #392]	; (8001180 <main+0x5e0>)
 8000ff6:	2227      	movs	r2, #39	; 0x27
 8000ff8:	f001 fa32 	bl	8002460 <SH1106_printChar>
                            break;
 8000ffc:	e0b3      	b.n	8001166 <main+0x5c6>
                        case RA:
                            current_x += SH1106_printInt(current_x, current_y, menu_op_value[RA] / 60, fnt5x7) + 1;
 8000ffe:	897b      	ldrh	r3, [r7, #10]
 8001000:	b2d8      	uxtb	r0, r3
 8001002:	4b60      	ldr	r3, [pc, #384]	; (8001184 <main+0x5e4>)
 8001004:	885b      	ldrh	r3, [r3, #2]
 8001006:	4a60      	ldr	r2, [pc, #384]	; (8001188 <main+0x5e8>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	095b      	lsrs	r3, r3, #5
 800100e:	b29b      	uxth	r3, r3
 8001010:	461a      	mov	r2, r3
 8001012:	7a79      	ldrb	r1, [r7, #9]
 8001014:	4b5a      	ldr	r3, [pc, #360]	; (8001180 <main+0x5e0>)
 8001016:	f001 fcc7 	bl	80029a8 <SH1106_printInt>
 800101a:	4603      	mov	r3, r0
 800101c:	3301      	adds	r3, #1
 800101e:	b29a      	uxth	r2, r3
 8001020:	897b      	ldrh	r3, [r7, #10]
 8001022:	4413      	add	r3, r2
 8001024:	817b      	strh	r3, [r7, #10]
                            current_x += SH1106_printChar(current_x, current_y, 'h', fnt5x7) +
 8001026:	897b      	ldrh	r3, [r7, #10]
 8001028:	b2d8      	uxtb	r0, r3
 800102a:	7a79      	ldrb	r1, [r7, #9]
 800102c:	4b54      	ldr	r3, [pc, #336]	; (8001180 <main+0x5e0>)
 800102e:	2268      	movs	r2, #104	; 0x68
 8001030:	f001 fa16 	bl	8002460 <SH1106_printChar>
 8001034:	4603      	mov	r3, r0
 8001036:	3301      	adds	r3, #1
 8001038:	b29a      	uxth	r2, r3
 800103a:	897b      	ldrh	r3, [r7, #10]
 800103c:	4413      	add	r3, r2
 800103e:	817b      	strh	r3, [r7, #10]
                                         1; //TODO alterar na lib das fontes o °
                            current_x += SH1106_printInt(current_x, current_y, menu_op_value[RA] % 60, fnt5x7);
 8001040:	897b      	ldrh	r3, [r7, #10]
 8001042:	b2d8      	uxtb	r0, r3
 8001044:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <main+0x5e4>)
 8001046:	885a      	ldrh	r2, [r3, #2]
 8001048:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <main+0x5e8>)
 800104a:	fba3 1302 	umull	r1, r3, r3, r2
 800104e:	0959      	lsrs	r1, r3, #5
 8001050:	460b      	mov	r3, r1
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	1a5b      	subs	r3, r3, r1
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	7a79      	ldrb	r1, [r7, #9]
 8001060:	4b47      	ldr	r3, [pc, #284]	; (8001180 <main+0x5e0>)
 8001062:	f001 fca1 	bl	80029a8 <SH1106_printInt>
 8001066:	4603      	mov	r3, r0
 8001068:	b29a      	uxth	r2, r3
 800106a:	897b      	ldrh	r3, [r7, #10]
 800106c:	4413      	add	r3, r2
 800106e:	817b      	strh	r3, [r7, #10]
                            SH1106_printChar(current_x, current_y, 'm', fnt5x7);
 8001070:	897b      	ldrh	r3, [r7, #10]
 8001072:	b2d8      	uxtb	r0, r3
 8001074:	7a79      	ldrb	r1, [r7, #9]
 8001076:	4b42      	ldr	r3, [pc, #264]	; (8001180 <main+0x5e0>)
 8001078:	226d      	movs	r2, #109	; 0x6d
 800107a:	f001 f9f1 	bl	8002460 <SH1106_printChar>
                            break;
 800107e:	e072      	b.n	8001166 <main+0x5c6>
                        case hemisphere:
                            SH1106_printStr(current_x, current_y, menu_op_value[hemisphere] ? "Norte" : "Sul", fnt5x7);
 8001080:	897b      	ldrh	r3, [r7, #10]
 8001082:	b2d8      	uxtb	r0, r3
 8001084:	4b3f      	ldr	r3, [pc, #252]	; (8001184 <main+0x5e4>)
 8001086:	889b      	ldrh	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <main+0x4f0>
 800108c:	4a3f      	ldr	r2, [pc, #252]	; (800118c <main+0x5ec>)
 800108e:	e000      	b.n	8001092 <main+0x4f2>
 8001090:	4a3f      	ldr	r2, [pc, #252]	; (8001190 <main+0x5f0>)
 8001092:	7a79      	ldrb	r1, [r7, #9]
 8001094:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <main+0x5e0>)
 8001096:	f001 fc4d 	bl	8002934 <SH1106_printStr>
                            break;
 800109a:	e064      	b.n	8001166 <main+0x5c6>
                        case automatic_mode:
                            SH1106_printStr(current_x, current_y, menu_op_value[automatic_mode] ? "ON" : "OFF", fnt5x7);
 800109c:	897b      	ldrh	r3, [r7, #10]
 800109e:	b2d8      	uxtb	r0, r3
 80010a0:	4b38      	ldr	r3, [pc, #224]	; (8001184 <main+0x5e4>)
 80010a2:	88db      	ldrh	r3, [r3, #6]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <main+0x50c>
 80010a8:	4a3a      	ldr	r2, [pc, #232]	; (8001194 <main+0x5f4>)
 80010aa:	e000      	b.n	80010ae <main+0x50e>
 80010ac:	4a3a      	ldr	r2, [pc, #232]	; (8001198 <main+0x5f8>)
 80010ae:	7a79      	ldrb	r1, [r7, #9]
 80010b0:	4b33      	ldr	r3, [pc, #204]	; (8001180 <main+0x5e0>)
 80010b2:	f001 fc3f 	bl	8002934 <SH1106_printStr>
                            break;
 80010b6:	e056      	b.n	8001166 <main+0x5c6>
                        case manual_mode:
                            SH1106_printStr(current_x, current_y, menu_op_value[manual_mode] ? "ON" : "OFF", fnt5x7);
 80010b8:	897b      	ldrh	r3, [r7, #10]
 80010ba:	b2d8      	uxtb	r0, r3
 80010bc:	4b31      	ldr	r3, [pc, #196]	; (8001184 <main+0x5e4>)
 80010be:	891b      	ldrh	r3, [r3, #8]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <main+0x528>
 80010c4:	4a33      	ldr	r2, [pc, #204]	; (8001194 <main+0x5f4>)
 80010c6:	e000      	b.n	80010ca <main+0x52a>
 80010c8:	4a33      	ldr	r2, [pc, #204]	; (8001198 <main+0x5f8>)
 80010ca:	7a79      	ldrb	r1, [r7, #9]
 80010cc:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <main+0x5e0>)
 80010ce:	f001 fc31 	bl	8002934 <SH1106_printStr>
                            break;
 80010d2:	e048      	b.n	8001166 <main+0x5c6>
                        case brilho_tela:
                            current_x += SH1106_printInt(current_x, current_y, menu_op_value[brilho_tela], fnt5x7);
 80010d4:	897b      	ldrh	r3, [r7, #10]
 80010d6:	b2d8      	uxtb	r0, r3
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <main+0x5e4>)
 80010da:	895b      	ldrh	r3, [r3, #10]
 80010dc:	461a      	mov	r2, r3
 80010de:	7a79      	ldrb	r1, [r7, #9]
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <main+0x5e0>)
 80010e2:	f001 fc61 	bl	80029a8 <SH1106_printInt>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	897b      	ldrh	r3, [r7, #10]
 80010ec:	4413      	add	r3, r2
 80010ee:	817b      	strh	r3, [r7, #10]
                            SH1106_printChar(current_x, current_y, '%', fnt5x7);
 80010f0:	897b      	ldrh	r3, [r7, #10]
 80010f2:	b2d8      	uxtb	r0, r3
 80010f4:	7a79      	ldrb	r1, [r7, #9]
 80010f6:	4b22      	ldr	r3, [pc, #136]	; (8001180 <main+0x5e0>)
 80010f8:	2225      	movs	r2, #37	; 0x25
 80010fa:	f001 f9b1 	bl	8002460 <SH1106_printChar>
                            break;
 80010fe:	e032      	b.n	8001166 <main+0x5c6>
                        case tempo_tela:
                            current_x += SH1106_printInt(current_x, current_y, menu_op_value[tempo_tela], fnt5x7);
 8001100:	897b      	ldrh	r3, [r7, #10]
 8001102:	b2d8      	uxtb	r0, r3
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <main+0x5e4>)
 8001106:	899b      	ldrh	r3, [r3, #12]
 8001108:	461a      	mov	r2, r3
 800110a:	7a79      	ldrb	r1, [r7, #9]
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <main+0x5e0>)
 800110e:	f001 fc4b 	bl	80029a8 <SH1106_printInt>
 8001112:	4603      	mov	r3, r0
 8001114:	b29a      	uxth	r2, r3
 8001116:	897b      	ldrh	r3, [r7, #10]
 8001118:	4413      	add	r3, r2
 800111a:	817b      	strh	r3, [r7, #10]
                            SH1106_printChar(current_x, current_y, 's', fnt5x7);
 800111c:	897b      	ldrh	r3, [r7, #10]
 800111e:	b2d8      	uxtb	r0, r3
 8001120:	7a79      	ldrb	r1, [r7, #9]
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <main+0x5e0>)
 8001124:	2273      	movs	r2, #115	; 0x73
 8001126:	f001 f99b 	bl	8002460 <SH1106_printChar>
                            break;
 800112a:	e01c      	b.n	8001166 <main+0x5c6>
                        case save_configs:
                            SH1106_printStr(current_x - 8, current_y, "  ", fnt5x7);
 800112c:	897b      	ldrh	r3, [r7, #10]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	3b08      	subs	r3, #8
 8001132:	b2d8      	uxtb	r0, r3
 8001134:	7a79      	ldrb	r1, [r7, #9]
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <main+0x5e0>)
 8001138:	4a18      	ldr	r2, [pc, #96]	; (800119c <main+0x5fc>)
 800113a:	f001 fbfb 	bl	8002934 <SH1106_printStr>
                            break;
 800113e:	e012      	b.n	8001166 <main+0x5c6>
                        default:
                            SH1106_printInt(current_x + space_pixel_width, current_y,
 8001140:	897b      	ldrh	r3, [r7, #10]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	4413      	add	r3, r2
 8001148:	b2d8      	uxtb	r0, r3
                                            menu_op_value[menu_head + current_drawing_row],
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <main+0x5d8>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	4413      	add	r3, r2
 8001154:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <main+0x5e4>)
 8001156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
                            SH1106_printInt(current_x + space_pixel_width, current_y,
 800115a:	461a      	mov	r2, r3
 800115c:	7a79      	ldrb	r1, [r7, #9]
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <main+0x5e0>)
 8001160:	f001 fc22 	bl	80029a8 <SH1106_printInt>
                                            fnt5x7);
                            break;
 8001164:	bf00      	nop
                for (uint8_t current_drawing_row = 0; current_drawing_row < SCREEN_ROWS; current_drawing_row++) {
 8001166:	7bbb      	ldrb	r3, [r7, #14]
 8001168:	3301      	adds	r3, #1
 800116a:	73bb      	strb	r3, [r7, #14]
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	2b04      	cmp	r3, #4
 8001170:	f67f aeb6 	bls.w	8000ee0 <main+0x340>
 8001174:	e1b6      	b.n	80014e4 <main+0x944>
 8001176:	bf00      	nop
 8001178:	20000224 	.word	0x20000224
 800117c:	20000084 	.word	0x20000084
 8001180:	08009b84 	.word	0x08009b84
 8001184:	2000020c 	.word	0x2000020c
 8001188:	88888889 	.word	0x88888889
 800118c:	08005770 	.word	0x08005770
 8001190:	08005778 	.word	0x08005778
 8001194:	0800577c 	.word	0x0800577c
 8001198:	08005780 	.word	0x08005780
 800119c:	08005784 	.word	0x08005784
                    }
                }

            } else { /** drawing the submenu */
                set_flag(update_display);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 fd75 	bl	8001c90 <set_flag>

                current_x = space_pixel_width;
 80011a6:	7b7b      	ldrb	r3, [r7, #13]
 80011a8:	817b      	strh	r3, [r7, #10]

                current_x += SH1106_printStr(current_x, 2, menu_str[CURRENT_SELECTION], fnt5x7);
 80011aa:	897b      	ldrh	r3, [r7, #10]
 80011ac:	b2d8      	uxtb	r0, r3
 80011ae:	4ba4      	ldr	r3, [pc, #656]	; (8001440 <main+0x8a0>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	4ba3      	ldr	r3, [pc, #652]	; (8001444 <main+0x8a4>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4413      	add	r3, r2
 80011ba:	4aa3      	ldr	r2, [pc, #652]	; (8001448 <main+0x8a8>)
 80011bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011c0:	4ba2      	ldr	r3, [pc, #648]	; (800144c <main+0x8ac>)
 80011c2:	2102      	movs	r1, #2
 80011c4:	f001 fbb6 	bl	8002934 <SH1106_printStr>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	897b      	ldrh	r3, [r7, #10]
 80011ce:	4413      	add	r3, r2
 80011d0:	817b      	strh	r3, [r7, #10]
                SH1106_printStr(current_x, 2, ":", fnt5x7);
 80011d2:	897b      	ldrh	r3, [r7, #10]
 80011d4:	b2d8      	uxtb	r0, r3
 80011d6:	4b9d      	ldr	r3, [pc, #628]	; (800144c <main+0x8ac>)
 80011d8:	4a9d      	ldr	r2, [pc, #628]	; (8001450 <main+0x8b0>)
 80011da:	2102      	movs	r1, #2
 80011dc:	f001 fbaa 	bl	8002934 <SH1106_printStr>

                current_x = (SCR_W / 2) - 14;
 80011e0:	2332      	movs	r3, #50	; 0x32
 80011e2:	817b      	strh	r3, [r7, #10]
                switch (CURRENT_SELECTION) {
 80011e4:	4b96      	ldr	r3, [pc, #600]	; (8001440 <main+0x8a0>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b96      	ldr	r3, [pc, #600]	; (8001444 <main+0x8a4>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	f200 816e 	bhi.w	80014d2 <main+0x932>
 80011f6:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <main+0x65c>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	0800121d 	.word	0x0800121d
 8001200:	080012c1 	.word	0x080012c1
 8001204:	08001365 	.word	0x08001365
 8001208:	0800139b 	.word	0x0800139b
 800120c:	080013cb 	.word	0x080013cb
 8001210:	080013fb 	.word	0x080013fb
 8001214:	08001485 	.word	0x08001485
 8001218:	080014cb 	.word	0x080014cb

                    case DEC_:
                        current_x -= 5;
 800121c:	897b      	ldrh	r3, [r7, #10]
 800121e:	3b05      	subs	r3, #5
 8001220:	817b      	strh	r3, [r7, #10]
                        value_preview = POSITIVE_MODULUS(value_preview, 21600);
 8001222:	4b8c      	ldr	r3, [pc, #560]	; (8001454 <main+0x8b4>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	4a8c      	ldr	r2, [pc, #560]	; (8001458 <main+0x8b8>)
 8001228:	fba2 1203 	umull	r1, r2, r2, r3
 800122c:	0b92      	lsrs	r2, r2, #14
 800122e:	f245 4160 	movw	r1, #21600	; 0x5460
 8001232:	fb01 f202 	mul.w	r2, r1, r2
 8001236:	1a9b      	subs	r3, r3, r2
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b86      	ldr	r3, [pc, #536]	; (8001454 <main+0x8b4>)
 800123c:	801a      	strh	r2, [r3, #0]
                        current_x += SH1106_printInt(current_x, SCR_H / 2, value_preview / 60, fnt7x10) + 1;
 800123e:	897b      	ldrh	r3, [r7, #10]
 8001240:	b2d8      	uxtb	r0, r3
 8001242:	4b84      	ldr	r3, [pc, #528]	; (8001454 <main+0x8b4>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	4a85      	ldr	r2, [pc, #532]	; (800145c <main+0x8bc>)
 8001248:	fba2 2303 	umull	r2, r3, r2, r3
 800124c:	095b      	lsrs	r3, r3, #5
 800124e:	b29b      	uxth	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	4b83      	ldr	r3, [pc, #524]	; (8001460 <main+0x8c0>)
 8001254:	2120      	movs	r1, #32
 8001256:	f001 fba7 	bl	80029a8 <SH1106_printInt>
 800125a:	4603      	mov	r3, r0
 800125c:	3301      	adds	r3, #1
 800125e:	b29a      	uxth	r2, r3
 8001260:	897b      	ldrh	r3, [r7, #10]
 8001262:	4413      	add	r3, r2
 8001264:	817b      	strh	r3, [r7, #10]
                        current_x += SH1106_printChar(current_x, (SCR_H / 2) - 5, 'o', fnt7x10) +
 8001266:	897b      	ldrh	r3, [r7, #10]
 8001268:	b2d8      	uxtb	r0, r3
 800126a:	4b7d      	ldr	r3, [pc, #500]	; (8001460 <main+0x8c0>)
 800126c:	226f      	movs	r2, #111	; 0x6f
 800126e:	211b      	movs	r1, #27
 8001270:	f001 f8f6 	bl	8002460 <SH1106_printChar>
 8001274:	4603      	mov	r3, r0
 8001276:	3301      	adds	r3, #1
 8001278:	b29a      	uxth	r2, r3
 800127a:	897b      	ldrh	r3, [r7, #10]
 800127c:	4413      	add	r3, r2
 800127e:	817b      	strh	r3, [r7, #10]
                                     1; //TODO alterar na lib das fontes o °
                        current_x += SH1106_printInt(current_x, SCR_H / 2, value_preview % 60, fnt7x10);
 8001280:	897b      	ldrh	r3, [r7, #10]
 8001282:	b2d8      	uxtb	r0, r3
 8001284:	4b73      	ldr	r3, [pc, #460]	; (8001454 <main+0x8b4>)
 8001286:	881a      	ldrh	r2, [r3, #0]
 8001288:	4b74      	ldr	r3, [pc, #464]	; (800145c <main+0x8bc>)
 800128a:	fba3 1302 	umull	r1, r3, r3, r2
 800128e:	0959      	lsrs	r1, r3, #5
 8001290:	460b      	mov	r3, r1
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	1a5b      	subs	r3, r3, r1
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b29b      	uxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	4b70      	ldr	r3, [pc, #448]	; (8001460 <main+0x8c0>)
 80012a0:	2120      	movs	r1, #32
 80012a2:	f001 fb81 	bl	80029a8 <SH1106_printInt>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	897b      	ldrh	r3, [r7, #10]
 80012ac:	4413      	add	r3, r2
 80012ae:	817b      	strh	r3, [r7, #10]
                        SH1106_printStr(current_x, SCR_H / 2, "'", fnt7x10);
 80012b0:	897b      	ldrh	r3, [r7, #10]
 80012b2:	b2d8      	uxtb	r0, r3
 80012b4:	4b6a      	ldr	r3, [pc, #424]	; (8001460 <main+0x8c0>)
 80012b6:	4a6b      	ldr	r2, [pc, #428]	; (8001464 <main+0x8c4>)
 80012b8:	2120      	movs	r1, #32
 80012ba:	f001 fb3b 	bl	8002934 <SH1106_printStr>
                        break;
 80012be:	e111      	b.n	80014e4 <main+0x944>
                    case RA:
                        current_x -= 5;
 80012c0:	897b      	ldrh	r3, [r7, #10]
 80012c2:	3b05      	subs	r3, #5
 80012c4:	817b      	strh	r3, [r7, #10]
                        value_preview = POSITIVE_MODULUS(value_preview, 1440);
 80012c6:	4b63      	ldr	r3, [pc, #396]	; (8001454 <main+0x8b4>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	095a      	lsrs	r2, r3, #5
 80012cc:	4966      	ldr	r1, [pc, #408]	; (8001468 <main+0x8c8>)
 80012ce:	fba1 1202 	umull	r1, r2, r1, r2
 80012d2:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 80012d6:	fb01 f202 	mul.w	r2, r1, r2
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b5d      	ldr	r3, [pc, #372]	; (8001454 <main+0x8b4>)
 80012e0:	801a      	strh	r2, [r3, #0]
                        current_x += SH1106_printInt(current_x, SCR_H / 2, value_preview / 60, fnt7x10) + 1;
 80012e2:	897b      	ldrh	r3, [r7, #10]
 80012e4:	b2d8      	uxtb	r0, r3
 80012e6:	4b5b      	ldr	r3, [pc, #364]	; (8001454 <main+0x8b4>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	4a5c      	ldr	r2, [pc, #368]	; (800145c <main+0x8bc>)
 80012ec:	fba2 2303 	umull	r2, r3, r2, r3
 80012f0:	095b      	lsrs	r3, r3, #5
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b5a      	ldr	r3, [pc, #360]	; (8001460 <main+0x8c0>)
 80012f8:	2120      	movs	r1, #32
 80012fa:	f001 fb55 	bl	80029a8 <SH1106_printInt>
 80012fe:	4603      	mov	r3, r0
 8001300:	3301      	adds	r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	897b      	ldrh	r3, [r7, #10]
 8001306:	4413      	add	r3, r2
 8001308:	817b      	strh	r3, [r7, #10]
                        current_x += SH1106_printChar(current_x, SCR_H / 2, 'h', fnt7x10) +
 800130a:	897b      	ldrh	r3, [r7, #10]
 800130c:	b2d8      	uxtb	r0, r3
 800130e:	4b54      	ldr	r3, [pc, #336]	; (8001460 <main+0x8c0>)
 8001310:	2268      	movs	r2, #104	; 0x68
 8001312:	2120      	movs	r1, #32
 8001314:	f001 f8a4 	bl	8002460 <SH1106_printChar>
 8001318:	4603      	mov	r3, r0
 800131a:	3301      	adds	r3, #1
 800131c:	b29a      	uxth	r2, r3
 800131e:	897b      	ldrh	r3, [r7, #10]
 8001320:	4413      	add	r3, r2
 8001322:	817b      	strh	r3, [r7, #10]
                                     1; //TODO alterar na lib das fontes o °
                        current_x += SH1106_printInt(current_x, SCR_H / 2, value_preview % 60, fnt7x10);
 8001324:	897b      	ldrh	r3, [r7, #10]
 8001326:	b2d8      	uxtb	r0, r3
 8001328:	4b4a      	ldr	r3, [pc, #296]	; (8001454 <main+0x8b4>)
 800132a:	881a      	ldrh	r2, [r3, #0]
 800132c:	4b4b      	ldr	r3, [pc, #300]	; (800145c <main+0x8bc>)
 800132e:	fba3 1302 	umull	r1, r3, r3, r2
 8001332:	0959      	lsrs	r1, r3, #5
 8001334:	460b      	mov	r3, r1
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	1a5b      	subs	r3, r3, r1
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4b47      	ldr	r3, [pc, #284]	; (8001460 <main+0x8c0>)
 8001344:	2120      	movs	r1, #32
 8001346:	f001 fb2f 	bl	80029a8 <SH1106_printInt>
 800134a:	4603      	mov	r3, r0
 800134c:	b29a      	uxth	r2, r3
 800134e:	897b      	ldrh	r3, [r7, #10]
 8001350:	4413      	add	r3, r2
 8001352:	817b      	strh	r3, [r7, #10]
                        SH1106_printStr(current_x, SCR_H / 2, "m", fnt7x10);
 8001354:	897b      	ldrh	r3, [r7, #10]
 8001356:	b2d8      	uxtb	r0, r3
 8001358:	4b41      	ldr	r3, [pc, #260]	; (8001460 <main+0x8c0>)
 800135a:	4a44      	ldr	r2, [pc, #272]	; (800146c <main+0x8cc>)
 800135c:	2120      	movs	r1, #32
 800135e:	f001 fae9 	bl	8002934 <SH1106_printStr>
                        break;
 8001362:	e0bf      	b.n	80014e4 <main+0x944>
                    case hemisphere:
                        current_x -= 5;
 8001364:	897b      	ldrh	r3, [r7, #10]
 8001366:	3b05      	subs	r3, #5
 8001368:	817b      	strh	r3, [r7, #10]
                        value_preview = BOOLIFY(value_preview);
 800136a:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <main+0x8b4>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	bf14      	ite	ne
 8001372:	2301      	movne	r3, #1
 8001374:	2300      	moveq	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <main+0x8b4>)
 800137c:	801a      	strh	r2, [r3, #0]
                        SH1106_printStr(current_x, SCR_H / 2, value_preview ? "Norte" : "Sul", fnt7x10);
 800137e:	897b      	ldrh	r3, [r7, #10]
 8001380:	b2d8      	uxtb	r0, r3
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <main+0x8b4>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <main+0x7ee>
 800138a:	4a39      	ldr	r2, [pc, #228]	; (8001470 <main+0x8d0>)
 800138c:	e000      	b.n	8001390 <main+0x7f0>
 800138e:	4a39      	ldr	r2, [pc, #228]	; (8001474 <main+0x8d4>)
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <main+0x8c0>)
 8001392:	2120      	movs	r1, #32
 8001394:	f001 face 	bl	8002934 <SH1106_printStr>
                        break;
 8001398:	e0a4      	b.n	80014e4 <main+0x944>
                    case automatic_mode:
                        value_preview = BOOLIFY(value_preview);
 800139a:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <main+0x8b4>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <main+0x8b4>)
 80013ac:	801a      	strh	r2, [r3, #0]
                        SH1106_printStr(current_x, SCR_H / 2, value_preview ? "ON" : "OFF", fnt7x10);
 80013ae:	897b      	ldrh	r3, [r7, #10]
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	4b28      	ldr	r3, [pc, #160]	; (8001454 <main+0x8b4>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <main+0x81e>
 80013ba:	4a2f      	ldr	r2, [pc, #188]	; (8001478 <main+0x8d8>)
 80013bc:	e000      	b.n	80013c0 <main+0x820>
 80013be:	4a2f      	ldr	r2, [pc, #188]	; (800147c <main+0x8dc>)
 80013c0:	4b27      	ldr	r3, [pc, #156]	; (8001460 <main+0x8c0>)
 80013c2:	2120      	movs	r1, #32
 80013c4:	f001 fab6 	bl	8002934 <SH1106_printStr>
                        break;
 80013c8:	e08c      	b.n	80014e4 <main+0x944>
                    case manual_mode:
                        value_preview = BOOLIFY(value_preview);
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <main+0x8b4>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf14      	ite	ne
 80013d2:	2301      	movne	r3, #1
 80013d4:	2300      	moveq	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <main+0x8b4>)
 80013dc:	801a      	strh	r2, [r3, #0]
                        SH1106_printStr(current_x, SCR_H / 2, value_preview ? "ON" : "OFF", fnt7x10);
 80013de:	897b      	ldrh	r3, [r7, #10]
 80013e0:	b2d8      	uxtb	r0, r3
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <main+0x8b4>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <main+0x84e>
 80013ea:	4a23      	ldr	r2, [pc, #140]	; (8001478 <main+0x8d8>)
 80013ec:	e000      	b.n	80013f0 <main+0x850>
 80013ee:	4a23      	ldr	r2, [pc, #140]	; (800147c <main+0x8dc>)
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <main+0x8c0>)
 80013f2:	2120      	movs	r1, #32
 80013f4:	f001 fa9e 	bl	8002934 <SH1106_printStr>
                        break;
 80013f8:	e074      	b.n	80014e4 <main+0x944>
                    case brilho_tela:
                        value_preview = POSITIVE_MODULUS(value_preview, 100);
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <main+0x8b4>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	4a20      	ldr	r2, [pc, #128]	; (8001480 <main+0x8e0>)
 8001400:	fba2 1203 	umull	r1, r2, r2, r3
 8001404:	0952      	lsrs	r2, r2, #5
 8001406:	2164      	movs	r1, #100	; 0x64
 8001408:	fb01 f202 	mul.w	r2, r1, r2
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <main+0x8b4>)
 8001412:	801a      	strh	r2, [r3, #0]
                        current_x += SH1106_printInt(current_x, SCR_H / 2, value_preview, fnt7x10);
 8001414:	897b      	ldrh	r3, [r7, #10]
 8001416:	b2d8      	uxtb	r0, r3
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <main+0x8b4>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <main+0x8c0>)
 8001420:	2120      	movs	r1, #32
 8001422:	f001 fac1 	bl	80029a8 <SH1106_printInt>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	897b      	ldrh	r3, [r7, #10]
 800142c:	4413      	add	r3, r2
 800142e:	817b      	strh	r3, [r7, #10]
                        SH1106_printChar(current_x, SCR_H / 2, '%', fnt7x10);
 8001430:	897b      	ldrh	r3, [r7, #10]
 8001432:	b2d8      	uxtb	r0, r3
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <main+0x8c0>)
 8001436:	2225      	movs	r2, #37	; 0x25
 8001438:	2120      	movs	r1, #32
 800143a:	f001 f811 	bl	8002460 <SH1106_printChar>
                        break;
 800143e:	e051      	b.n	80014e4 <main+0x944>
 8001440:	20000224 	.word	0x20000224
 8001444:	20000225 	.word	0x20000225
 8001448:	20000084 	.word	0x20000084
 800144c:	08009b84 	.word	0x08009b84
 8001450:	08005788 	.word	0x08005788
 8001454:	2000022a 	.word	0x2000022a
 8001458:	c22e4507 	.word	0xc22e4507
 800145c:	88888889 	.word	0x88888889
 8001460:	080097c4 	.word	0x080097c4
 8001464:	0800578c 	.word	0x0800578c
 8001468:	05b05b06 	.word	0x05b05b06
 800146c:	08005790 	.word	0x08005790
 8001470:	08005770 	.word	0x08005770
 8001474:	08005778 	.word	0x08005778
 8001478:	0800577c 	.word	0x0800577c
 800147c:	08005780 	.word	0x08005780
 8001480:	51eb851f 	.word	0x51eb851f
                    case tempo_tela:
                        value_preview = POSITIVE_MODULUS(value_preview, 255);
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <main+0x960>)
 8001486:	881a      	ldrh	r2, [r3, #0]
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <main+0x964>)
 800148a:	fba3 1302 	umull	r1, r3, r3, r2
 800148e:	09d9      	lsrs	r1, r3, #7
 8001490:	460b      	mov	r3, r1
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	1a5b      	subs	r3, r3, r1
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	b29a      	uxth	r2, r3
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <main+0x960>)
 800149c:	801a      	strh	r2, [r3, #0]
                        current_x += SH1106_printInt(current_x, SCR_H / 2, value_preview, fnt7x10);
 800149e:	897b      	ldrh	r3, [r7, #10]
 80014a0:	b2d8      	uxtb	r0, r3
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <main+0x960>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <main+0x968>)
 80014aa:	2120      	movs	r1, #32
 80014ac:	f001 fa7c 	bl	80029a8 <SH1106_printInt>
 80014b0:	4603      	mov	r3, r0
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	897b      	ldrh	r3, [r7, #10]
 80014b6:	4413      	add	r3, r2
 80014b8:	817b      	strh	r3, [r7, #10]
                        SH1106_printChar(current_x, SCR_H / 2, 's', fnt7x10);
 80014ba:	897b      	ldrh	r3, [r7, #10]
 80014bc:	b2d8      	uxtb	r0, r3
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <main+0x968>)
 80014c0:	2273      	movs	r2, #115	; 0x73
 80014c2:	2120      	movs	r1, #32
 80014c4:	f000 ffcc 	bl	8002460 <SH1106_printChar>
                        break;
 80014c8:	e00c      	b.n	80014e4 <main+0x944>
                    case save_configs:
                        set_flag(on_menu);
 80014ca:	2008      	movs	r0, #8
 80014cc:	f000 fbe0 	bl	8001c90 <set_flag>
                        break;
 80014d0:	e008      	b.n	80014e4 <main+0x944>
                    default:
                        SH1106_printInt(current_x, SCR_H / 2, value_preview, fnt7x10);
 80014d2:	897b      	ldrh	r3, [r7, #10]
 80014d4:	b2d8      	uxtb	r0, r3
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <main+0x960>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <main+0x968>)
 80014de:	2120      	movs	r1, #32
 80014e0:	f001 fa62 	bl	80029a8 <SH1106_printInt>

            }
        }

        /** < checks if changes to the buffer happened, and if so, flush them */
        if (get_flag(update_display)) {
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 fbf3 	bl	8001cd0 <get_flag>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f43f abc3 	beq.w	8000c78 <main+0xd8>
            reset_flag(update_display);
 80014f2:	2003      	movs	r0, #3
 80014f4:	f000 fbdc 	bl	8001cb0 <reset_flag>
            SH1106_flush();
 80014f8:	f000 fce0 	bl	8001ebc <SH1106_flush>
        SH1106_clear(); /** < clears buffer, to construct new one and flush it later */
 80014fc:	f7ff bbbc 	b.w	8000c78 <main+0xd8>
 8001500:	2000022a 	.word	0x2000022a
 8001504:	80808081 	.word	0x80808081
 8001508:	080097c4 	.word	0x080097c4

0800150c <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b094      	sub	sp, #80	; 0x50
 8001510:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001516:	2228      	movs	r2, #40	; 0x28
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f004 f8e0 	bl	80056e0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153c:	2301      	movs	r3, #1
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154a:	2301      	movs	r3, #1
 800154c:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154e:	2302      	movs	r3, #2
 8001550:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001556:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001558:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800155c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800155e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001562:	4618      	mov	r0, r3
 8001564:	f002 fed0 	bl	8004308 <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x66>
        Error_Handler();
 800156e:	f000 f957 	bl	8001820 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	617b      	str	r3, [r7, #20]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800157e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001582:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f003 f93c 	bl	800480c <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x92>
        Error_Handler();
 800159a:	f000 f941 	bl	8001820 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800159e:	2302      	movs	r3, #2
 80015a0:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a6:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 faf6 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0xae>
        Error_Handler();
 80015b6:	f000 f933 	bl	8001820 <Error_Handler>
    }
}
 80015ba:	bf00      	nop
 80015bc:	3750      	adds	r7, #80	; 0x50
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <get_bat_percentage>:

/* USER CODE BEGIN 4 */
uint8_t get_bat_percentage(void) {
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
    uint16_t read_voltage = voltage_read(5 * 10); //5v * 10 of reference on board
 80015c8:	2032      	movs	r0, #50	; 0x32
 80015ca:	f7ff f91f 	bl	800080c <voltage_read>
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
    uint8_t percent = ((read_voltage >= V_BAT_MIN ? read_voltage : V_BAT_MIN) - V_BAT_MIN) *
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	2b20      	cmp	r3, #32
 80015d6:	bf38      	it	cc
 80015d8:	2320      	movcc	r3, #32
 80015da:	b29b      	uxth	r3, r3
 80015dc:	3b20      	subs	r3, #32
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	717b      	strb	r3, [r7, #5]
                      (100 / (V_BAT_MAX - V_BAT_MIN));    // converting [bat_min, bat_max] to [0, 100]

    return percent;
 80015ea:	797b      	ldrb	r3, [r7, #5]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <handle_rotary_events>:

void handle_rotary_events(rotary_data_t *rotary_data) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

    if (get_flag(rotary_triggered)) { // rotary encoder triggered
 80015fc:	2001      	movs	r0, #1
 80015fe:	f000 fb67 	bl	8001cd0 <get_flag>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d027      	beq.n	8001658 <handle_rotary_events+0x64>
        reset_flag(rotary_triggered);
 8001608:	2001      	movs	r0, #1
 800160a:	f000 fb51 	bl	8001cb0 <reset_flag>
        set_flag(wake);
 800160e:	2004      	movs	r0, #4
 8001610:	f000 fb3e 	bl	8001c90 <set_flag>

        if ((TICKS_NOW - last_move_ticks) >= ROT_DEBOUNCE_DELAY_MS) {
 8001614:	f001 fb1e 	bl	8002c54 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <handle_rotary_events+0xd8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b09      	cmp	r3, #9
 8001622:	d915      	bls.n	8001650 <handle_rotary_events+0x5c>

            last_move_ticks = TICKS_NOW;
 8001624:	f001 fb16 	bl	8002c54 <HAL_GetTick>
 8001628:	4603      	mov	r3, r0
 800162a:	4a28      	ldr	r2, [pc, #160]	; (80016cc <handle_rotary_events+0xd8>)
 800162c:	6013      	str	r3, [r2, #0]

            if (get_flag(ccw)) { //counter-clockwise rotation
 800162e:	2002      	movs	r0, #2
 8001630:	f000 fb4e 	bl	8001cd0 <get_flag>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <handle_rotary_events+0x54>

                reset_flag(ccw);
 800163a:	2002      	movs	r0, #2
 800163c:	f000 fb38 	bl	8001cb0 <reset_flag>
                rotary_data->inc = -1;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	22ff      	movs	r2, #255	; 0xff
 8001644:	701a      	strb	r2, [r3, #0]
                return;
 8001646:	e03e      	b.n	80016c6 <handle_rotary_events+0xd2>
            } else { // clockwise rotation
                rotary_data->inc = 1;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
                return;
 800164e:	e03a      	b.n	80016c6 <handle_rotary_events+0xd2>
            }
        }
        set_flag(update_display);
 8001650:	2003      	movs	r0, #3
 8001652:	f000 fb1d 	bl	8001c90 <set_flag>
 8001656:	e030      	b.n	80016ba <handle_rotary_events+0xc6>

    } else if (get_flag(selected)) { // rotary encoder pressed
 8001658:	2000      	movs	r0, #0
 800165a:	f000 fb39 	bl	8001cd0 <get_flag>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d02a      	beq.n	80016ba <handle_rotary_events+0xc6>
        reset_flag(selected);
 8001664:	2000      	movs	r0, #0
 8001666:	f000 fb23 	bl	8001cb0 <reset_flag>
        set_flag(wake);
 800166a:	2004      	movs	r0, #4
 800166c:	f000 fb10 	bl	8001c90 <set_flag>

        if ((TICKS_NOW - last_move_ticks) >= PUSH_DEBOUNCE_DELAY_MS) {
 8001670:	f001 faf0 	bl	8002c54 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <handle_rotary_events+0xd8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001680:	d317      	bcc.n	80016b2 <handle_rotary_events+0xbe>

            last_move_ticks = TICKS_NOW;
 8001682:	f001 fae7 	bl	8002c54 <HAL_GetTick>
 8001686:	4603      	mov	r3, r0
 8001688:	4a10      	ldr	r2, [pc, #64]	; (80016cc <handle_rotary_events+0xd8>)
 800168a:	6013      	str	r3, [r2, #0]
            set_flag(wake);
 800168c:	2004      	movs	r0, #4
 800168e:	f000 faff 	bl	8001c90 <set_flag>

            rotary_data->was_pressed = true;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	705a      	strb	r2, [r3, #1]

            if (get_flag(on_menu)) reset_flag(on_menu);
 8001698:	2008      	movs	r0, #8
 800169a:	f000 fb19 	bl	8001cd0 <get_flag>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <handle_rotary_events+0xb8>
 80016a4:	2008      	movs	r0, #8
 80016a6:	f000 fb03 	bl	8001cb0 <reset_flag>
 80016aa:	e002      	b.n	80016b2 <handle_rotary_events+0xbe>
            else set_flag(on_menu);
 80016ac:	2008      	movs	r0, #8
 80016ae:	f000 faef 	bl	8001c90 <set_flag>

        }
        set_flag(update_display);
 80016b2:	2003      	movs	r0, #3
 80016b4:	f000 faec 	bl	8001c90 <set_flag>
        return;
 80016b8:	e005      	b.n	80016c6 <handle_rotary_events+0xd2>
    }

    /** resets all values if nothing happened */
    rotary_data->inc = 0;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
    rotary_data->was_pressed = false;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	705a      	strb	r2, [r3, #1]
}
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000021c 	.word	0x2000021c

080016d0 <handle_menu_changes>:

void handle_menu_changes(uint8_t *current_menu_top, uint8_t *arrow_row, uint16_t *op_value, int8_t increase) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	70fb      	strb	r3, [r7, #3]

    if (increase && (current_menu_top != NULL) && (arrow_row != NULL) && (op_value != NULL)) {
 80016de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d05e      	beq.n	80017a4 <handle_menu_changes+0xd4>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d05b      	beq.n	80017a4 <handle_menu_changes+0xd4>
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d058      	beq.n	80017a4 <handle_menu_changes+0xd4>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d055      	beq.n	80017a4 <handle_menu_changes+0xd4>
        if (increase == 1) {
 80016f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d125      	bne.n	800174c <handle_menu_changes+0x7c>
            if (get_flag(on_menu)) {
 8001700:	2008      	movs	r0, #8
 8001702:	f000 fae5 	bl	8001cd0 <get_flag>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d018      	beq.n	800173e <handle_menu_changes+0x6e>
                if (*arrow_row < SCREEN_ROWS
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d806      	bhi.n	8001722 <handle_menu_changes+0x52>
                                 - 1) {
                    (*arrow_row)++;
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	701a      	strb	r2, [r3, #0]
            } else {
                (*op_value) = (*op_value) > 0 ? ((*op_value) - 1) : (*op_value); //unsigned guarded decrease
            }
        }
    }
}
 8001720:	e040      	b.n	80017a4 <handle_menu_changes+0xd4>
                    *current_menu_top = SCROLL_DOWN_MENU(*current_menu_top);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d804      	bhi.n	8001734 <handle_menu_changes+0x64>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	e001      	b.n	8001738 <handle_menu_changes+0x68>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	7013      	strb	r3, [r2, #0]
}
 800173c:	e032      	b.n	80017a4 <handle_menu_changes+0xd4>
                (*op_value) += 5; //forward increase
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	3305      	adds	r3, #5
 8001744:	b29a      	uxth	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	801a      	strh	r2, [r3, #0]
}
 800174a:	e02b      	b.n	80017a4 <handle_menu_changes+0xd4>
            if (get_flag(on_menu)) {
 800174c:	2008      	movs	r0, #8
 800174e:	f000 fabf 	bl	8001cd0 <get_flag>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d018      	beq.n	800178a <handle_menu_changes+0xba>
                if (*arrow_row > 0) {
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <handle_menu_changes+0x9e>
                    (*arrow_row)--;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	3b01      	subs	r3, #1
 8001766:	b2da      	uxtb	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	701a      	strb	r2, [r3, #0]
}
 800176c:	e01a      	b.n	80017a4 <handle_menu_changes+0xd4>
                    *current_menu_top = SCROLL_UP_MENU(*current_menu_top);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d004      	beq.n	8001780 <handle_menu_changes+0xb0>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	3b01      	subs	r3, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	e001      	b.n	8001784 <handle_menu_changes+0xb4>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	7013      	strb	r3, [r2, #0]
}
 8001788:	e00c      	b.n	80017a4 <handle_menu_changes+0xd4>
                (*op_value) = (*op_value) > 0 ? ((*op_value) - 1) : (*op_value); //unsigned guarded decrease
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d004      	beq.n	800179c <handle_menu_changes+0xcc>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	3b01      	subs	r3, #1
 8001798:	b29b      	uxth	r3, r3
 800179a:	e001      	b.n	80017a0 <handle_menu_changes+0xd0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	8013      	strh	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_TIM_PeriodElapsedCallback>:
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */
    static uint8_t scaler_counter = 0;
    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM1) {
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 80017be:	f001 fa37 	bl	8002c30 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */
    if (htim == &htim2) {
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d119      	bne.n	80017fe <HAL_TIM_PeriodElapsedCallback+0x52>
        scaler_counter++;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017d4:	701a      	strb	r2, [r3, #0]
        if (timer_pre_scaler == scaler_counter) {
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80017d8:	781a      	ldrb	r2, [r3, #0]
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d10d      	bne.n	80017fe <HAL_TIM_PeriodElapsedCallback+0x52>
            if (RA_STEPPER.on_status && menu_op_value[automatic_mode]) {
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80017e4:	7a5b      	ldrb	r3, [r3, #9]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d006      	beq.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x4c>
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80017ec:	88db      	ldrh	r3, [r3, #6]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x4c>
                half_step(&RA_STEPPER);
 80017f2:	4809      	ldr	r0, [pc, #36]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80017f4:	f000 f85e 	bl	80018b4 <half_step>
            }
            scaler_counter = 0;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
        }
    }
    /* USER CODE END Callback 1 */
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40012c00 	.word	0x40012c00
 800180c:	2000027c 	.word	0x2000027c
 8001810:	2000022f 	.word	0x2000022f
 8001814:	200000a4 	.word	0x200000a4
 8001818:	2000003c 	.word	0x2000003c
 800181c:	2000020c 	.word	0x2000020c

08001820 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
#pragma clang diagnostic push
#pragma ide diagnostic ignored "EndlessLoop"
    while (1) {
 8001828:	e7fe      	b.n	8001828 <Error_Handler+0x8>

0800182a <stepper_enable>:
void stepper_disable(stepper_t *s) {
    s->on_status = 0;
    HAL_GPIO_WritePin(s->enable_pin.GPIO, s->enable_pin.port, (GPIO_PinState) !s->on_status);
}

void stepper_enable(stepper_t *s) {
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
    s->on_status = 1;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	725a      	strb	r2, [r3, #9]
    HAL_GPIO_WritePin(s->enable_pin.GPIO, s->enable_pin.port, (GPIO_PinState) !s->on_status);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69d8      	ldr	r0, [r3, #28]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	8c19      	ldrh	r1, [r3, #32]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7a5b      	ldrb	r3, [r3, #9]
 8001844:	f083 0301 	eor.w	r3, r3, #1
 8001848:	b2db      	uxtb	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	f002 f8ec 	bl	8003a28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(s->dir_pin.GPIO, s->dir_pin.port, (GPIO_PinState) s->direction);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6958      	ldr	r0, [r3, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	8b19      	ldrh	r1, [r3, #24]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7a1b      	ldrb	r3, [r3, #8]
 800185c:	461a      	mov	r2, r3
 800185e:	f002 f8e3 	bl	8003a28 <HAL_GPIO_WritePin>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <stepper_init>:

void stepper_init(stepper_t *s) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
    if (s == NULL) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d015      	beq.n	80018a6 <stepper_init+0x3a>
        return;
    }

    s->position = 0;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	805a      	strh	r2, [r3, #2]
    s->direction = 0;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	721a      	strb	r2, [r3, #8]
    stepper_enable(s);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffcf 	bl	800182a <stepper_enable>

    s->auto_step_period = (s->axis == Right_Ascension) ? (1000000 * RA_REVOLUTION_TIME_SECS / STEPPER_MAX_STEPS) : 0;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <stepper_init+0x2c>
 8001894:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <stepper_init+0x44>)
 8001896:	e000      	b.n	800189a <stepper_init+0x2e>
 8001898:	2200      	movs	r2, #0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	605a      	str	r2, [r3, #4]
    s->is_configured = true;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	729a      	strb	r2, [r3, #10]
 80018a4:	e000      	b.n	80018a8 <stepper_init+0x3c>
        return;
 80018a6:	bf00      	nop
}
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	00044aa2 	.word	0x00044aa2

080018b4 <half_step>:

uint16_t half_step(stepper_t *s) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    static bool rise = 0;
    rise = !rise;
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <half_step+0x80>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	f083 0301 	eor.w	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <half_step+0x80>)
 80018d8:	701a      	strb	r2, [r3, #0]

    int8_t inc;
    if (rise) {
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <half_step+0x80>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d01a      	beq.n	8001918 <half_step+0x64>
        HAL_GPIO_WritePin(s->step_pin.GPIO, s->step_pin.port, GPIO_PIN_SET); //pulse rise
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68d8      	ldr	r0, [r3, #12]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	8a1b      	ldrh	r3, [r3, #16]
 80018ea:	2201      	movs	r2, #1
 80018ec:	4619      	mov	r1, r3
 80018ee:	f002 f89b 	bl	8003a28 <HAL_GPIO_WritePin>

        if (s->direction) {
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7a1b      	ldrb	r3, [r3, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <half_step+0x4c>
            inc = 1;
 80018fa:	2301      	movs	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
 80018fe:	e001      	b.n	8001904 <half_step+0x50>
        } else {
            inc = -1;
 8001900:	23ff      	movs	r3, #255	; 0xff
 8001902:	73fb      	strb	r3, [r7, #15]
        }
        s->position += inc;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	885a      	ldrh	r2, [r3, #2]
 8001908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4413      	add	r3, r2
 8001910:	b29a      	uxth	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	805a      	strh	r2, [r3, #2]
 8001916:	e007      	b.n	8001928 <half_step+0x74>
    } else {
        HAL_GPIO_WritePin(s->step_pin.GPIO, s->step_pin.port, GPIO_PIN_RESET); //pulse fall
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68d8      	ldr	r0, [r3, #12]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	8a1b      	ldrh	r3, [r3, #16]
 8001920:	2200      	movs	r2, #0
 8001922:	4619      	mov	r1, r3
 8001924:	f002 f880 	bl	8003a28 <HAL_GPIO_WritePin>
    }

    return s->position;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	885b      	ldrh	r3, [r3, #2]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000230 	.word	0x20000230

08001938 <stepper_set_direction>:
void stepper_reverse_direction(stepper_t *s) {
    s->direction = !s->direction;
    HAL_GPIO_WritePin(s->dir_pin.GPIO, s->dir_pin.port, (GPIO_PinState) s->direction);
}

void stepper_set_direction(stepper_t *s, direction_t dir) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	70fb      	strb	r3, [r7, #3]
    if (dir == clockwise) {
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10b      	bne.n	8001962 <stepper_set_direction+0x2a>
        s->direction = clockwise;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	721a      	strb	r2, [r3, #8]
        HAL_GPIO_WritePin(s->dir_pin.GPIO, s->dir_pin.port, GPIO_PIN_SET);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6958      	ldr	r0, [r3, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	8b1b      	ldrh	r3, [r3, #24]
 8001958:	2201      	movs	r2, #1
 800195a:	4619      	mov	r1, r3
 800195c:	f002 f864 	bl	8003a28 <HAL_GPIO_WritePin>
    } else {
        s->direction = counter_clockwise;
        HAL_GPIO_WritePin(s->dir_pin.GPIO, s->dir_pin.port, GPIO_PIN_RESET);
    }
}
 8001960:	e00a      	b.n	8001978 <stepper_set_direction+0x40>
        s->direction = counter_clockwise;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	721a      	strb	r2, [r3, #8]
        HAL_GPIO_WritePin(s->dir_pin.GPIO, s->dir_pin.port, GPIO_PIN_RESET);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6958      	ldr	r0, [r3, #20]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	8b1b      	ldrh	r3, [r3, #24]
 8001970:	2200      	movs	r2, #0
 8001972:	4619      	mov	r1, r3
 8001974:	f002 f858 	bl	8003a28 <HAL_GPIO_WritePin>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_MspInit+0x6c>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <HAL_MspInit+0x6c>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6193      	str	r3, [r2, #24]
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_MspInit+0x6c>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_MspInit+0x6c>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <HAL_MspInit+0x6c>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_MspInit+0x6c>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2005      	movs	r0, #5
 80019bc:	f001 fe85 	bl	80036ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80019c0:	2005      	movs	r0, #5
 80019c2:	f001 fe9e 	bl	8003702 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_MspInit+0x70>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_MspInit+0x70>)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010000 	.word	0x40010000

080019f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <HAL_InitTick+0xd0>)
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	4a2d      	ldr	r2, [pc, #180]	; (8001ac4 <HAL_InitTick+0xd0>)
 8001a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a14:	6193      	str	r3, [r2, #24]
 8001a16:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_InitTick+0xd0>)
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a22:	f107 020c 	add.w	r2, r7, #12
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f003 f867 	bl	8004b00 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a32:	f003 f851 	bl	8004ad8 <HAL_RCC_GetPCLK2Freq>
 8001a36:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3a:	4a23      	ldr	r2, [pc, #140]	; (8001ac8 <HAL_InitTick+0xd4>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	0c9b      	lsrs	r3, r3, #18
 8001a42:	3b01      	subs	r3, #1
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_InitTick+0xd8>)
 8001a48:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <HAL_InitTick+0xdc>)
 8001a4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <HAL_InitTick+0xd8>)
 8001a4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a52:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a54:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_InitTick+0xd8>)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <HAL_InitTick+0xd8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_InitTick+0xd8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_InitTick+0xd8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a6c:	4817      	ldr	r0, [pc, #92]	; (8001acc <HAL_InitTick+0xd8>)
 8001a6e:	f003 fa0b 	bl	8004e88 <HAL_TIM_Base_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d11b      	bne.n	8001ab8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a80:	4812      	ldr	r0, [pc, #72]	; (8001acc <HAL_InitTick+0xd8>)
 8001a82:	f003 fa51 	bl	8004f28 <HAL_TIM_Base_Start_IT>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d111      	bne.n	8001ab8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a94:	2019      	movs	r0, #25
 8001a96:	f001 fe34 	bl	8003702 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b0f      	cmp	r3, #15
 8001a9e:	d808      	bhi.n	8001ab2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	2019      	movs	r0, #25
 8001aa6:	f001 fe10 	bl	80036ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_InitTick+0xe0>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	e002      	b.n	8001ab8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3730      	adds	r7, #48	; 0x30
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	431bde83 	.word	0x431bde83
 8001acc:	20000234 	.word	0x20000234
 8001ad0:	40012c00 	.word	0x40012c00
 8001ad4:	20000134 	.word	0x20000134

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8001adc:	e7fe      	b.n	8001adc <NMI_Handler+0x4>

08001ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
	...

08001b34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <TIM1_UP_IRQHandler+0x10>)
 8001b3a:	f003 fa47 	bl	8004fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000234 	.word	0x20000234

08001b48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM2_IRQHandler+0x10>)
 8001b4e:	f003 fa3d 	bl	8004fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000027c 	.word	0x2000027c

08001b5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
    if (EXTI->PR & SELECT_Pin) {
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <EXTI15_10_IRQHandler+0x44>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <EXTI15_10_IRQHandler+0x22>
        /* Clear bit */
        EXTI->PR = SELECT_Pin;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <EXTI15_10_IRQHandler+0x44>)
 8001b6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b72:	615a      	str	r2, [r3, #20]
        /* Call global function */
        HAL_GPIO_EXTI_IRQHandler(SELECT_Pin);
 8001b74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b78:	f001 ff6e 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b7c:	e00d      	b.n	8001b9a <EXTI15_10_IRQHandler+0x3e>
    } else if (EXTI->PR & ROTARY_TRIG_Pin) {
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <EXTI15_10_IRQHandler+0x44>)
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <EXTI15_10_IRQHandler+0x3e>
        EXTI->PR = ROTARY_TRIG_Pin;
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <EXTI15_10_IRQHandler+0x44>)
 8001b8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b90:	615a      	str	r2, [r3, #20]
        HAL_GPIO_EXTI_IRQHandler(ROTARY_TRIG_Pin);
 8001b92:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b96:	f001 ff5f 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40010400 	.word	0x40010400

08001ba4 <SystemInit>:
  *         SystemCoreClock variable.
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit(void) {
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <MX_TIM2_Init+0x94>)
 8001bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <MX_TIM2_Init+0x94>)
 8001bd6:	2247      	movs	r2, #71	; 0x47
 8001bd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_TIM2_Init+0x94>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1875 - 1 ;
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <MX_TIM2_Init+0x94>)
 8001be2:	f240 7252 	movw	r2, #1874	; 0x752
 8001be6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_TIM2_Init+0x94>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <MX_TIM2_Init+0x94>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bf4:	4813      	ldr	r0, [pc, #76]	; (8001c44 <MX_TIM2_Init+0x94>)
 8001bf6:	f003 f947 	bl	8004e88 <HAL_TIM_Base_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c00:	f7ff fe0e 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480c      	ldr	r0, [pc, #48]	; (8001c44 <MX_TIM2_Init+0x94>)
 8001c12:	f003 fae3 	bl	80051dc <HAL_TIM_ConfigClockSource>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c1c:	f7ff fe00 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c28:	463b      	mov	r3, r7
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_TIM2_Init+0x94>)
 8001c2e:	f003 fcb5 	bl	800559c <HAL_TIMEx_MasterConfigSynchronization>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c38:	f7ff fdf2 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	2000027c 	.word	0x2000027c

08001c48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c58:	d113      	bne.n	8001c82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <HAL_TIM_Base_MspInit+0x44>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <HAL_TIM_Base_MspInit+0x44>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	61d3      	str	r3, [r2, #28]
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_TIM_Base_MspInit+0x44>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	201c      	movs	r0, #28
 8001c78:	f001 fd27 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c7c:	201c      	movs	r0, #28
 8001c7e:	f001 fd40 	bl	8003702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000

08001c90 <set_flag>:
#include "variables.h"

void set_flag(bool_var_t flag_var) {
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	boolVariables[flag_var] = 1;
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4a03      	ldr	r2, [pc, #12]	; (8001cac <set_flag+0x1c>)
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	54d1      	strb	r1, [r2, r3]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	200002c4 	.word	0x200002c4

08001cb0 <reset_flag>:

void reset_flag(bool_var_t flag_var) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	boolVariables[flag_var] = 0;
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4a03      	ldr	r2, [pc, #12]	; (8001ccc <reset_flag+0x1c>)
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	54d1      	strb	r1, [r2, r3]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	200002c4 	.word	0x200002c4

08001cd0 <get_flag>:

bool get_flag(bool_var_t flag_var) {
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
	return boolVariables[flag_var];
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4a03      	ldr	r2, [pc, #12]	; (8001cec <get_flag+0x1c>)
 8001cde:	5cd3      	ldrb	r3, [r2, r3]
 8001ce0:	b2db      	uxtb	r3, r3
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	200002c4 	.word	0x200002c4

08001cf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cf2:	490d      	ldr	r1, [pc, #52]	; (8001d28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d08:	4c0a      	ldr	r4, [pc, #40]	; (8001d34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d16:	f7ff ff45 	bl	8001ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f003 fcaf 	bl	800567c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d1e:	f7fe ff3f 	bl	8000ba0 <main>
  bx lr
 8001d22:	4770      	bx	lr
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d28:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8001d2c:	08009d98 	.word	0x08009d98
  ldr r2, =_sbss
 8001d30:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8001d34:	20000754 	.word	0x20000754

08001d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC1_2_IRQHandler>
	...

08001d3c <SH1106_cmd>:
        {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F};

// Send single byte command to display
// input:
//   cmd - display command
static void SH1106_cmd(uint8_t cmd) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
    // Send command to display
    uint8_t command[] = {0x00, cmd};
 8001d46:	2300      	movs	r3, #0
 8001d48:	733b      	strb	r3, [r7, #12]
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, command,
 8001d4e:	f107 020c 	add.w	r2, r7, #12
 8001d52:	230a      	movs	r3, #10
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2302      	movs	r3, #2
 8001d58:	2178      	movs	r1, #120	; 0x78
 8001d5a:	4803      	ldr	r0, [pc, #12]	; (8001d68 <SH1106_cmd+0x2c>)
 8001d5c:	f001 ffce 	bl	8003cfc <HAL_I2C_Master_Transmit>
                            sizeof(command), 10);
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200001b8 	.word	0x200001b8

08001d6c <SH1106_data>:

// Send double byte command to display
// input:
//   data - page buffer data with 0x40 blocks
//   num_bytes - number of bytes to display in the page
static void SH1106_data(uint8_t *data, uint8_t num_bytes) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
    // Send double byte command to display
    HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, data,
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	220a      	movs	r2, #10
 8001d7e:	9200      	str	r2, [sp, #0]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	2178      	movs	r1, #120	; 0x78
 8001d84:	4803      	ldr	r0, [pc, #12]	; (8001d94 <SH1106_data+0x28>)
 8001d86:	f001 ffb9 	bl	8003cfc <HAL_I2C_Master_Transmit>
                            num_bytes, 10);
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200001b8 	.word	0x200001b8

08001d98 <SH1106_Init>:

// Initialize SDA peripheral and SH1106 display
// note: SDA peripheral must be initialized before
void SH1106_Init(void) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
    // Initial display configuration
    HAL_Delay(100);
 8001d9c:	2064      	movs	r0, #100	; 0x64
 8001d9e:	f000 ff63 	bl	8002c68 <HAL_Delay>

    SH1106_cmd(SH1106_CMD_DISP_OFF);
 8001da2:	20ae      	movs	r0, #174	; 0xae
 8001da4:	f7ff ffca 	bl	8001d3c <SH1106_cmd>

    SH1106_cmd(SH1106_CMD_COL_LOW);
 8001da8:	2002      	movs	r0, #2
 8001daa:	f7ff ffc7 	bl	8001d3c <SH1106_cmd>
    SH1106_cmd(SH1106_CMD_COL_HIGH);
 8001dae:	2010      	movs	r0, #16
 8001db0:	f7ff ffc4 	bl	8001d3c <SH1106_cmd>

    SH1106_cmd(SH1106_CMD_STARTLINE);
 8001db4:	2040      	movs	r0, #64	; 0x40
 8001db6:	f7ff ffc1 	bl	8001d3c <SH1106_cmd>

    SH1106_cmd(SH1106_CMD_PAGE_ADDR);
 8001dba:	20b0      	movs	r0, #176	; 0xb0
 8001dbc:	f7ff ffbe 	bl	8001d3c <SH1106_cmd>

    SH1106_cmd(SH1106_CMD_CONTRAST);
 8001dc0:	2081      	movs	r0, #129	; 0x81
 8001dc2:	f7ff ffbb 	bl	8001d3c <SH1106_cmd>
    SH1106_cmd(0x88); // 0x00...0xff
 8001dc6:	2088      	movs	r0, #136	; 0x88
 8001dc8:	f7ff ffb8 	bl	8001d3c <SH1106_cmd>

    SH1106_cmd(SH1106_CMD_SEG_NORM + 1);
 8001dcc:	20a1      	movs	r0, #161	; 0xa1
 8001dce:	f7ff ffb5 	bl	8001d3c <SH1106_cmd>

    SH1106_cmd(SH1106_CMD_EDOFF); // Display follows RAM content
 8001dd2:	20a4      	movs	r0, #164	; 0xa4
 8001dd4:	f7ff ffb2 	bl	8001d3c <SH1106_cmd>

    SH1106_cmd(SH1106_CMD_INV_OFF); // Normal display mode
 8001dd8:	20a6      	movs	r0, #166	; 0xa6
 8001dda:	f7ff ffaf 	bl	8001d3c <SH1106_cmd>

    SH1106_cmd(SH1106_CMD_SETMUX);
 8001dde:	20a8      	movs	r0, #168	; 0xa8
 8001de0:	f7ff ffac 	bl	8001d3c <SH1106_cmd>
    SH1106_cmd(0x3F); // 63 -> 64mux
 8001de4:	203f      	movs	r0, #63	; 0x3f
 8001de6:	f7ff ffa9 	bl	8001d3c <SH1106_cmd>

    SH1106_cmd(SH1106_CMD_DC_DC_SET);
 8001dea:	20ad      	movs	r0, #173	; 0xad
 8001dec:	f7ff ffa6 	bl	8001d3c <SH1106_cmd>
    SH1106_cmd(0x8B); // on
 8001df0:	208b      	movs	r0, #139	; 0x8b
 8001df2:	f7ff ffa3 	bl	8001d3c <SH1106_cmd>
    SH1106_cmd(0x32); // 8v
 8001df6:	2032      	movs	r0, #50	; 0x32
 8001df8:	f7ff ffa0 	bl	8001d3c <SH1106_cmd>


    SH1106_cmd(SH1106_CMD_COM_INV);
 8001dfc:	20c8      	movs	r0, #200	; 0xc8
 8001dfe:	f7ff ff9d 	bl	8001d3c <SH1106_cmd>

    SH1106_cmd(SH1106_CMD_SETOFFS);
 8001e02:	20d3      	movs	r0, #211	; 0xd3
 8001e04:	f7ff ff9a 	bl	8001d3c <SH1106_cmd>
    SH1106_cmd(0x00); // 0px
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff ff97 	bl	8001d3c <SH1106_cmd>

    SH1106_cmd(SH1106_CMD_CLOCKDIV);
 8001e0e:	20d5      	movs	r0, #213	; 0xd5
 8001e10:	f7ff ff94 	bl	8001d3c <SH1106_cmd>
    SH1106_cmd(0xF0); // ~100Hz
 8001e14:	20f0      	movs	r0, #240	; 0xf0
 8001e16:	f7ff ff91 	bl	8001d3c <SH1106_cmd>

    SH1106_cmd(SH1106_CMD_SET_CHARGE);
 8001e1a:	20d9      	movs	r0, #217	; 0xd9
 8001e1c:	f7ff ff8e 	bl	8001d3c <SH1106_cmd>
    SH1106_cmd(0x2A); //4MSb are discharge ticks and 4LSb are pre charge ticks
 8001e20:	202a      	movs	r0, #42	; 0x2a
 8001e22:	f7ff ff8b 	bl	8001d3c <SH1106_cmd>
    // Set COM pins hardware configuration
    // bit[4]: reset - sequential COM pin configuration
    //         set   - alternative COM pin configuration (reset value)
    // bit[5]: reset - disable COM left/right remap (reset value)
    //         set   - enable COM left/right remap
    SH1106_cmd(SH1106_CMD_COM_HW);
 8001e26:	20da      	movs	r0, #218	; 0xda
 8001e28:	f7ff ff88 	bl	8001d3c <SH1106_cmd>
    SH1106_cmd(0x12);
 8001e2c:	2012      	movs	r0, #18
 8001e2e:	f7ff ff85 	bl	8001d3c <SH1106_cmd>

    SH1106_cmd(0xDB);
 8001e32:	20db      	movs	r0, #219	; 0xdb
 8001e34:	f7ff ff82 	bl	8001d3c <SH1106_cmd>
    SH1106_cmd(0x40);
 8001e38:	2040      	movs	r0, #64	; 0x40
 8001e3a:	f7ff ff7f 	bl	8001d3c <SH1106_cmd>

    HAL_Delay(100);
 8001e3e:	2064      	movs	r0, #100	; 0x64
 8001e40:	f000 ff12 	bl	8002c68 <HAL_Delay>

    SH1106_cmd(SH1106_CMD_DISP_ON); // Display enabled
 8001e44:	20af      	movs	r0, #175	; 0xaf
 8001e46:	f7ff ff79 	bl	8001d3c <SH1106_cmd>

    HAL_Delay(100);
 8001e4a:	2064      	movs	r0, #100	; 0x64
 8001e4c:	f000 ff0c 	bl	8002c68 <HAL_Delay>
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <SH1106_setAllPixelsOn>:
// set entire LCD pixels on or off
// input:
//   eon_state - new pixels state (one of SH1106_ENTIRE_PIXELS_XXX values)
// note: SH1106_ENTIRE_PIXELS_ON means what all pixels on display will be on
//       without regard of display memory contents
void SH1106_setAllPixelsOn(uint8_t eon_state) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
    SH1106_cmd(eon_state ? SH1106_CMD_EDON : SH1106_CMD_EDOFF);
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <SH1106_setAllPixelsOn+0x14>
 8001e64:	23a5      	movs	r3, #165	; 0xa5
 8001e66:	e000      	b.n	8001e6a <SH1106_setAllPixelsOn+0x16>
 8001e68:	23a4      	movs	r3, #164	; 0xa4
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff66 	bl	8001d3c <SH1106_cmd>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <SH1106_clear>:
    // Store orientation
    scr_orientation = orientation;
}

// clear vRAM buffer
void SH1106_clear(void) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
    uint8_t page;
    static uint8_t null_buff[SCR_W] = {0x00};
    for (page = 0; page < 8; page++) {
 8001e7e:	2300      	movs	r3, #0
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	e00e      	b.n	8001ea2 <SH1106_clear+0x2a>
        memcpy(vRAM + (page << 7), null_buff, SCR_W);
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	01db      	lsls	r3, r3, #7
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <SH1106_clear+0x3c>)
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <SH1106_clear+0x40>)
 8001e90:	4618      	mov	r0, r3
 8001e92:	4611      	mov	r1, r2
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	461a      	mov	r2, r3
 8001e98:	f003 fc14 	bl	80056c4 <memcpy>
    for (page = 0; page < 8; page++) {
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	71fb      	strb	r3, [r7, #7]
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	2b07      	cmp	r3, #7
 8001ea6:	d9ed      	bls.n	8001e84 <SH1106_clear+0xc>
    }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200002d0 	.word	0x200002d0
 8001eb8:	200006d0 	.word	0x200006d0

08001ebc <SH1106_flush>:

// Send vRAM buffer into display
void SH1106_flush(void) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
    uint8_t page;
    static uint8_t screen_buffer[SCR_W + 1] = {0x40};
    for (page = 0; page < 8; page++) {
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	71fb      	strb	r3, [r7, #7]
 8001ec6:	e01e      	b.n	8001f06 <SH1106_flush+0x4a>

        uint8_t *page_content = vRAM + (page << 7);
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	01db      	lsls	r3, r3, #7
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <SH1106_flush+0x5c>)
 8001ed0:	4413      	add	r3, r2
 8001ed2:	603b      	str	r3, [r7, #0]
        memcpy(screen_buffer + 1, page_content, SCR_W);
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <SH1106_flush+0x60>)
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	6839      	ldr	r1, [r7, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 fbf2 	bl	80056c4 <memcpy>

        SH1106_cmd(SH1106_CMD_PAGE_ADDR + page);
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	3b50      	subs	r3, #80	; 0x50
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff28 	bl	8001d3c <SH1106_cmd>
        SH1106_cmd(SH1106_CMD_COL_LOW);
 8001eec:	2002      	movs	r0, #2
 8001eee:	f7ff ff25 	bl	8001d3c <SH1106_cmd>
        SH1106_cmd(SH1106_CMD_COL_HIGH);
 8001ef2:	2010      	movs	r0, #16
 8001ef4:	f7ff ff22 	bl	8001d3c <SH1106_cmd>

        SH1106_data(screen_buffer, sizeof(screen_buffer));
 8001ef8:	2181      	movs	r1, #129	; 0x81
 8001efa:	4809      	ldr	r0, [pc, #36]	; (8001f20 <SH1106_flush+0x64>)
 8001efc:	f7ff ff36 	bl	8001d6c <SH1106_data>
    for (page = 0; page < 8; page++) {
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	3301      	adds	r3, #1
 8001f04:	71fb      	strb	r3, [r7, #7]
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	2b07      	cmp	r3, #7
 8001f0a:	d9dd      	bls.n	8001ec8 <SH1106_flush+0xc>
    }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200002d0 	.word	0x200002d0
 8001f1c:	200000b1 	.word	0x200000b1
 8001f20:	200000b0 	.word	0x200000b0

08001f24 <SH1106_cleanInit>:
        memcpy(vRAM + (page << 7), fill_buff, SCR_W);
    }
}

//init routine grouped in one function
void SH1106_cleanInit(void) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
    SH1106_Init();
 8001f28:	f7ff ff36 	bl	8001d98 <SH1106_Init>
    SH1106_setAllPixelsOn(0);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f7ff ff91 	bl	8001e54 <SH1106_setAllPixelsOn>
    SH1106_clear();
 8001f32:	f7ff ffa1 	bl	8001e78 <SH1106_clear>
    SH1106_flush();
 8001f36:	f7ff ffc1 	bl	8001ebc <SH1106_flush>
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <SH1106_drawHLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   x - horizontal coordinate of line start
//   y - vertical coordinate
//   w - line width
static void SH1106_drawHLineInt(uint8_t x, uint8_t y, uint8_t w) {
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	71bb      	strb	r3, [r7, #6]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	717b      	strb	r3, [r7, #5]
    uint8_t *ptr;
    uint8_t mask;

    // Pointer to the first byte of line in video buffer
    // This is optimized formula, original is "((y >> 3) * SCR_W) + x"
    ptr = &vRAM[((y >> 3) << 7)] + x;
 8001f52:	79bb      	ldrb	r3, [r7, #6]
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	01db      	lsls	r3, r3, #7
 8001f5a:	4a23      	ldr	r2, [pc, #140]	; (8001fe8 <SH1106_drawHLineInt+0xa8>)
 8001f5c:	441a      	add	r2, r3
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	4413      	add	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

    // Mask bit for pixel in byte
    mask = 1 << (y & 0x07);
 8001f64:	79bb      	ldrb	r3, [r7, #6]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	72fb      	strb	r3, [r7, #11]

    // Draw line
    switch (SH1106_PixelMode) {
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <SH1106_drawHLineInt+0xac>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d002      	beq.n	8001f80 <SH1106_drawHLineInt+0x40>
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d01a      	beq.n	8001fb4 <SH1106_drawHLineInt+0x74>
 8001f7e:	e01f      	b.n	8001fc0 <SH1106_drawHLineInt+0x80>
        case SH1106_PRES:
            mask = ~mask;
 8001f80:	7afb      	ldrb	r3, [r7, #11]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	72fb      	strb	r3, [r7, #11]
            while (w--)
 8001f86:	e007      	b.n	8001f98 <SH1106_drawHLineInt+0x58>
                *ptr++ &= mask;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	60fa      	str	r2, [r7, #12]
 8001f8e:	7819      	ldrb	r1, [r3, #0]
 8001f90:	7afa      	ldrb	r2, [r7, #11]
 8001f92:	400a      	ands	r2, r1
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]
            while (w--)
 8001f98:	797b      	ldrb	r3, [r7, #5]
 8001f9a:	1e5a      	subs	r2, r3, #1
 8001f9c:	717a      	strb	r2, [r7, #5]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f2      	bne.n	8001f88 <SH1106_drawHLineInt+0x48>
            break;
 8001fa2:	e01c      	b.n	8001fde <SH1106_drawHLineInt+0x9e>
        case SH1106_PINV:
            while (w--)
                *ptr++ ^= mask;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	60fa      	str	r2, [r7, #12]
 8001faa:	7819      	ldrb	r1, [r3, #0]
 8001fac:	7afa      	ldrb	r2, [r7, #11]
 8001fae:	404a      	eors	r2, r1
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	701a      	strb	r2, [r3, #0]
            while (w--)
 8001fb4:	797b      	ldrb	r3, [r7, #5]
 8001fb6:	1e5a      	subs	r2, r3, #1
 8001fb8:	717a      	strb	r2, [r7, #5]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f2      	bne.n	8001fa4 <SH1106_drawHLineInt+0x64>
            break;
 8001fbe:	e00e      	b.n	8001fde <SH1106_drawHLineInt+0x9e>
        default:
            while (w--)
 8001fc0:	e007      	b.n	8001fd2 <SH1106_drawHLineInt+0x92>
                *ptr++ |= mask;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	60fa      	str	r2, [r7, #12]
 8001fc8:	7819      	ldrb	r1, [r3, #0]
 8001fca:	7afa      	ldrb	r2, [r7, #11]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]
            while (w--)
 8001fd2:	797b      	ldrb	r3, [r7, #5]
 8001fd4:	1e5a      	subs	r2, r3, #1
 8001fd6:	717a      	strb	r2, [r7, #5]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f2      	bne.n	8001fc2 <SH1106_drawHLineInt+0x82>
            break;
 8001fdc:	bf00      	nop
    }
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	200002d0 	.word	0x200002d0
 8001fec:	200002cd 	.word	0x200002cd

08001ff0 <SH1106_drawVLineInt>:
// Optimized draw vertical line (without regard of screen rotation)
// input:
//   x - horizontal coordinate
//   y - vertical coordinate
//   h - line length
static void SH1106_drawVLineInt(uint8_t x, uint8_t y, uint8_t h) {
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	71bb      	strb	r3, [r7, #6]
 8001ffe:	4613      	mov	r3, r2
 8002000:	717b      	strb	r3, [r7, #5]
    uint8_t mask;
    uint8_t modulo;

    // Pointer to the first byte of line in video buffer
    // This is optimized formula, original is "((y >> 3) * SCR_W) + x"
    ptr = &vRAM[((y >> 3) << 7)] + x;
 8002002:	79bb      	ldrb	r3, [r7, #6]
 8002004:	08db      	lsrs	r3, r3, #3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	01db      	lsls	r3, r3, #7
 800200a:	4a5f      	ldr	r2, [pc, #380]	; (8002188 <SH1106_drawVLineInt+0x198>)
 800200c:	441a      	add	r2, r3
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	4413      	add	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]

    // First partial byte?
    modulo = (y & 0x07);
 8002014:	79bb      	ldrb	r3, [r7, #6]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	72bb      	strb	r3, [r7, #10]
    if (modulo) {
 800201c:	7abb      	ldrb	r3, [r7, #10]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d046      	beq.n	80020b0 <SH1106_drawVLineInt+0xc0>
        // Get bit mask for first partial byte from lookup table
        modulo = 8 - modulo;
 8002022:	7abb      	ldrb	r3, [r7, #10]
 8002024:	f1c3 0308 	rsb	r3, r3, #8
 8002028:	72bb      	strb	r3, [r7, #10]
        mask = LUT_FB[modulo];
 800202a:	7abb      	ldrb	r3, [r7, #10]
 800202c:	4a57      	ldr	r2, [pc, #348]	; (800218c <SH1106_drawVLineInt+0x19c>)
 800202e:	5cd3      	ldrb	r3, [r2, r3]
 8002030:	72fb      	strb	r3, [r7, #11]

        // Trim mask if line is will not go out from a current byte
        if (modulo > h)
 8002032:	7aba      	ldrb	r2, [r7, #10]
 8002034:	797b      	ldrb	r3, [r7, #5]
 8002036:	429a      	cmp	r2, r3
 8002038:	d90b      	bls.n	8002052 <SH1106_drawVLineInt+0x62>
            mask &= (0xFF >> (modulo - h));
 800203a:	7aba      	ldrb	r2, [r7, #10]
 800203c:	797b      	ldrb	r3, [r7, #5]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	22ff      	movs	r2, #255	; 0xff
 8002042:	fa42 f303 	asr.w	r3, r2, r3
 8002046:	b25a      	sxtb	r2, r3
 8002048:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800204c:	4013      	ands	r3, r2
 800204e:	b25b      	sxtb	r3, r3
 8002050:	72fb      	strb	r3, [r7, #11]

        // Modify bits in first byte of line
        switch (SH1106_PixelMode) {
 8002052:	4b4f      	ldr	r3, [pc, #316]	; (8002190 <SH1106_drawVLineInt+0x1a0>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d002      	beq.n	8002060 <SH1106_drawVLineInt+0x70>
 800205a:	2b02      	cmp	r3, #2
 800205c:	d00d      	beq.n	800207a <SH1106_drawVLineInt+0x8a>
 800205e:	e014      	b.n	800208a <SH1106_drawVLineInt+0x9a>
            case SH1106_PRES:
                *ptr &= ~mask;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b25a      	sxtb	r2, r3
 8002066:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800206a:	43db      	mvns	r3, r3
 800206c:	b25b      	sxtb	r3, r3
 800206e:	4013      	ands	r3, r2
 8002070:	b25b      	sxtb	r3, r3
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	701a      	strb	r2, [r3, #0]
                break;
 8002078:	e00f      	b.n	800209a <SH1106_drawVLineInt+0xaa>
            case SH1106_PINV:
                *ptr ^= mask;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	7afb      	ldrb	r3, [r7, #11]
 8002080:	4053      	eors	r3, r2
 8002082:	b2da      	uxtb	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	701a      	strb	r2, [r3, #0]
                break;
 8002088:	e007      	b.n	800209a <SH1106_drawVLineInt+0xaa>
            default:
                *ptr |= mask;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	781a      	ldrb	r2, [r3, #0]
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	4313      	orrs	r3, r2
 8002092:	b2da      	uxtb	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	701a      	strb	r2, [r3, #0]
                break;
 8002098:	bf00      	nop
        }

        // Return if line is over
        if (modulo > h)
 800209a:	7aba      	ldrb	r2, [r7, #10]
 800209c:	797b      	ldrb	r3, [r7, #5]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d86d      	bhi.n	800217e <SH1106_drawVLineInt+0x18e>
            return;

        // Shift pointer to the next byte in line and decrease line height counter
        ptr += SCR_W;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3380      	adds	r3, #128	; 0x80
 80020a6:	60fb      	str	r3, [r7, #12]
        h -= modulo;
 80020a8:	797a      	ldrb	r2, [r7, #5]
 80020aa:	7abb      	ldrb	r3, [r7, #10]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	717b      	strb	r3, [r7, #5]
    }

    // Fill solid bytes
    if (h > 7) {
 80020b0:	797b      	ldrb	r3, [r7, #5]
 80020b2:	2b07      	cmp	r3, #7
 80020b4:	d933      	bls.n	800211e <SH1106_drawVLineInt+0x12e>
        // Separate cycle for each case of pixel mode (to improve performance)
        switch (SH1106_PixelMode) {
 80020b6:	4b36      	ldr	r3, [pc, #216]	; (8002190 <SH1106_drawVLineInt+0x1a0>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d003      	beq.n	80020c6 <SH1106_drawVLineInt+0xd6>
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d00f      	beq.n	80020e2 <SH1106_drawVLineInt+0xf2>
 80020c2:	e01f      	b.n	8002104 <SH1106_drawVLineInt+0x114>
            case SH1106_PRES:
 80020c4:	bf00      	nop
                do {
                    *ptr = 0x00;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
                    ptr += SCR_W;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3380      	adds	r3, #128	; 0x80
 80020d0:	60fb      	str	r3, [r7, #12]
                    h -= 8;
 80020d2:	797b      	ldrb	r3, [r7, #5]
 80020d4:	3b08      	subs	r3, #8
 80020d6:	717b      	strb	r3, [r7, #5]
                } while (h > 7);
 80020d8:	797b      	ldrb	r3, [r7, #5]
 80020da:	2b07      	cmp	r3, #7
 80020dc:	d8f2      	bhi.n	80020c4 <SH1106_drawVLineInt+0xd4>
                break;
 80020de:	e01f      	b.n	8002120 <SH1106_drawVLineInt+0x130>
            case SH1106_PINV:
 80020e0:	bf00      	nop
                do {
                    *ptr = ~(*ptr);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	701a      	strb	r2, [r3, #0]
                    ptr += SCR_W;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3380      	adds	r3, #128	; 0x80
 80020f2:	60fb      	str	r3, [r7, #12]
                    h -= 8;
 80020f4:	797b      	ldrb	r3, [r7, #5]
 80020f6:	3b08      	subs	r3, #8
 80020f8:	717b      	strb	r3, [r7, #5]
                } while (h > 7);
 80020fa:	797b      	ldrb	r3, [r7, #5]
 80020fc:	2b07      	cmp	r3, #7
 80020fe:	d8ef      	bhi.n	80020e0 <SH1106_drawVLineInt+0xf0>
                break;
 8002100:	e00e      	b.n	8002120 <SH1106_drawVLineInt+0x130>
            default:
 8002102:	bf00      	nop
                do {
                    *ptr = 0xFF;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	22ff      	movs	r2, #255	; 0xff
 8002108:	701a      	strb	r2, [r3, #0]
                    ptr += SCR_W;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3380      	adds	r3, #128	; 0x80
 800210e:	60fb      	str	r3, [r7, #12]
                    h -= 8;
 8002110:	797b      	ldrb	r3, [r7, #5]
 8002112:	3b08      	subs	r3, #8
 8002114:	717b      	strb	r3, [r7, #5]
                } while (h > 7);
 8002116:	797b      	ldrb	r3, [r7, #5]
 8002118:	2b07      	cmp	r3, #7
 800211a:	d8f2      	bhi.n	8002102 <SH1106_drawVLineInt+0x112>
                break;
 800211c:	e000      	b.n	8002120 <SH1106_drawVLineInt+0x130>
        }
    }
 800211e:	bf00      	nop

    // Last partial byte?
    if (h) {
 8002120:	797b      	ldrb	r3, [r7, #5]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d02c      	beq.n	8002180 <SH1106_drawVLineInt+0x190>
        // Get bit mask for last partial byte from lookup table
        modulo = (h & 0x07);
 8002126:	797b      	ldrb	r3, [r7, #5]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	72bb      	strb	r3, [r7, #10]
        mask = LUT_LB[modulo];
 800212e:	7abb      	ldrb	r3, [r7, #10]
 8002130:	4a18      	ldr	r2, [pc, #96]	; (8002194 <SH1106_drawVLineInt+0x1a4>)
 8002132:	5cd3      	ldrb	r3, [r2, r3]
 8002134:	72fb      	strb	r3, [r7, #11]

        // Modify bits in last byte of line
        switch (SH1106_PixelMode) {
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <SH1106_drawVLineInt+0x1a0>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d002      	beq.n	8002144 <SH1106_drawVLineInt+0x154>
 800213e:	2b02      	cmp	r3, #2
 8002140:	d00d      	beq.n	800215e <SH1106_drawVLineInt+0x16e>
 8002142:	e014      	b.n	800216e <SH1106_drawVLineInt+0x17e>
            case SH1106_PRES:
                *ptr &= ~mask;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b25a      	sxtb	r2, r3
 800214a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800214e:	43db      	mvns	r3, r3
 8002150:	b25b      	sxtb	r3, r3
 8002152:	4013      	ands	r3, r2
 8002154:	b25b      	sxtb	r3, r3
 8002156:	b2da      	uxtb	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	701a      	strb	r2, [r3, #0]
                break;
 800215c:	e010      	b.n	8002180 <SH1106_drawVLineInt+0x190>
            case SH1106_PINV:
                *ptr ^= mask;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	7afb      	ldrb	r3, [r7, #11]
 8002164:	4053      	eors	r3, r2
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	701a      	strb	r2, [r3, #0]
                break;
 800216c:	e008      	b.n	8002180 <SH1106_drawVLineInt+0x190>
            default:
                *ptr |= mask;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	7afb      	ldrb	r3, [r7, #11]
 8002174:	4313      	orrs	r3, r2
 8002176:	b2da      	uxtb	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	701a      	strb	r2, [r3, #0]
                break;
 800217c:	e000      	b.n	8002180 <SH1106_drawVLineInt+0x190>
            return;
 800217e:	bf00      	nop
        }
    }
}
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	200002d0 	.word	0x200002d0
 800218c:	08009d80 	.word	0x08009d80
 8002190:	200002cd 	.word	0x200002cd
 8002194:	08009d88 	.word	0x08009d88

08002198 <SH1106_drawHLine>:

// Draw horizontal line
// input:
//   x1, x2 - left and right horizontal coordinates
//   y - vertical coordinate
void SH1106_drawHLine(uint8_t x1, uint8_t x2, uint8_t y) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
 80021a2:	460b      	mov	r3, r1
 80021a4:	71bb      	strb	r3, [r7, #6]
 80021a6:	4613      	mov	r3, r2
 80021a8:	717b      	strb	r3, [r7, #5]
    uint8_t x, w;

    if (x1 > x2) {
 80021aa:	79fa      	ldrb	r2, [r7, #7]
 80021ac:	79bb      	ldrb	r3, [r7, #6]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d906      	bls.n	80021c0 <SH1106_drawHLine+0x28>
        x = x2;
 80021b2:	79bb      	ldrb	r3, [r7, #6]
 80021b4:	73fb      	strb	r3, [r7, #15]
        w = x1 - x2;
 80021b6:	79fa      	ldrb	r2, [r7, #7]
 80021b8:	79bb      	ldrb	r3, [r7, #6]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	73bb      	strb	r3, [r7, #14]
 80021be:	e005      	b.n	80021cc <SH1106_drawHLine+0x34>
    } else {
        x = x1;
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	73fb      	strb	r3, [r7, #15]
        w = x2 - x1;
 80021c4:	79ba      	ldrb	r2, [r7, #6]
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	73bb      	strb	r3, [r7, #14]
    }
    w++;
 80021cc:	7bbb      	ldrb	r3, [r7, #14]
 80021ce:	3301      	adds	r3, #1
 80021d0:	73bb      	strb	r3, [r7, #14]

    if (scr_orientation == SH1106_ORIENT_CW
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <SH1106_drawHLine+0x70>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d003      	beq.n	80021e2 <SH1106_drawHLine+0x4a>
        || scr_orientation == SH1106_ORIENT_CCW) {
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <SH1106_drawHLine+0x70>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d106      	bne.n	80021f0 <SH1106_drawHLine+0x58>
        SH1106_drawVLineInt(y, x, w);
 80021e2:	7bba      	ldrb	r2, [r7, #14]
 80021e4:	7bf9      	ldrb	r1, [r7, #15]
 80021e6:	797b      	ldrb	r3, [r7, #5]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff01 	bl	8001ff0 <SH1106_drawVLineInt>
 80021ee:	e006      	b.n	80021fe <SH1106_drawHLine+0x66>
    } else {
        SH1106_drawHLineInt(x, y, w);
 80021f0:	7bba      	ldrb	r2, [r7, #14]
 80021f2:	7979      	ldrb	r1, [r7, #5]
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fea2 	bl	8001f40 <SH1106_drawHLineInt>
    }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200002ce 	.word	0x200002ce

0800220c <SH1106_drawVLine>:

// Draw vertical line
// input:
//   x - horizontal coordinate
//   y1,y2 - top and bottom vertical coordinates (y1 must be less than y2)
void SH1106_drawVLine(uint8_t x, uint8_t y1, uint8_t y2) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
 8002216:	460b      	mov	r3, r1
 8002218:	71bb      	strb	r3, [r7, #6]
 800221a:	4613      	mov	r3, r2
 800221c:	717b      	strb	r3, [r7, #5]
    uint8_t y, h;

    if (y1 > y2) {
 800221e:	79ba      	ldrb	r2, [r7, #6]
 8002220:	797b      	ldrb	r3, [r7, #5]
 8002222:	429a      	cmp	r2, r3
 8002224:	d906      	bls.n	8002234 <SH1106_drawVLine+0x28>
        y = y2;
 8002226:	797b      	ldrb	r3, [r7, #5]
 8002228:	73fb      	strb	r3, [r7, #15]
        h = y1 - y2;
 800222a:	79ba      	ldrb	r2, [r7, #6]
 800222c:	797b      	ldrb	r3, [r7, #5]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	73bb      	strb	r3, [r7, #14]
 8002232:	e005      	b.n	8002240 <SH1106_drawVLine+0x34>
    } else {
        y = y1;
 8002234:	79bb      	ldrb	r3, [r7, #6]
 8002236:	73fb      	strb	r3, [r7, #15]
        h = y2 - y1;
 8002238:	797a      	ldrb	r2, [r7, #5]
 800223a:	79bb      	ldrb	r3, [r7, #6]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	73bb      	strb	r3, [r7, #14]
    }
    h++;
 8002240:	7bbb      	ldrb	r3, [r7, #14]
 8002242:	3301      	adds	r3, #1
 8002244:	73bb      	strb	r3, [r7, #14]

    if (scr_orientation == SH1106_ORIENT_CW
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <SH1106_drawVLine+0x70>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d003      	beq.n	8002256 <SH1106_drawVLine+0x4a>
        || scr_orientation == SH1106_ORIENT_CCW) {
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <SH1106_drawVLine+0x70>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d106      	bne.n	8002264 <SH1106_drawVLine+0x58>
        SH1106_drawHLineInt(y, x, h);
 8002256:	7bba      	ldrb	r2, [r7, #14]
 8002258:	79f9      	ldrb	r1, [r7, #7]
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fe6f 	bl	8001f40 <SH1106_drawHLineInt>
 8002262:	e006      	b.n	8002272 <SH1106_drawVLine+0x66>
    } else {
        SH1106_drawVLineInt(x, y, h);
 8002264:	7bba      	ldrb	r2, [r7, #14]
 8002266:	7bf9      	ldrb	r1, [r7, #15]
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fec0 	bl	8001ff0 <SH1106_drawVLineInt>
    }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200002ce 	.word	0x200002ce

08002280 <SH1106_fillRect>:

// Draw filled rectangle
// input:
//   x1,y1 - top left coordinates
//   x2,y2 - bottom right coordinates
void SH1106_fillRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	4604      	mov	r4, r0
 8002288:	4608      	mov	r0, r1
 800228a:	4611      	mov	r1, r2
 800228c:	461a      	mov	r2, r3
 800228e:	4623      	mov	r3, r4
 8002290:	71fb      	strb	r3, [r7, #7]
 8002292:	4603      	mov	r3, r0
 8002294:	71bb      	strb	r3, [r7, #6]
 8002296:	460b      	mov	r3, r1
 8002298:	717b      	strb	r3, [r7, #5]
 800229a:	4613      	mov	r3, r2
 800229c:	713b      	strb	r3, [r7, #4]
    uint8_t z, e, t, l;

    // Fill rectangle by vertical lines is most optimal, therefore calculate coordinates
    // with regard of screen rotation
    if (scr_orientation == SH1106_ORIENT_CW
 800229e:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <SH1106_fillRect+0xd0>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d003      	beq.n	80022ae <SH1106_fillRect+0x2e>
        || scr_orientation == SH1106_ORIENT_CCW) {
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <SH1106_fillRect+0xd0>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d11e      	bne.n	80022ec <SH1106_fillRect+0x6c>
        if (x1 > x2) {
 80022ae:	79fa      	ldrb	r2, [r7, #7]
 80022b0:	797b      	ldrb	r3, [r7, #5]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d906      	bls.n	80022c4 <SH1106_fillRect+0x44>
            t = x2;
 80022b6:	797b      	ldrb	r3, [r7, #5]
 80022b8:	737b      	strb	r3, [r7, #13]
            l = x1 - x2;
 80022ba:	79fa      	ldrb	r2, [r7, #7]
 80022bc:	797b      	ldrb	r3, [r7, #5]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	733b      	strb	r3, [r7, #12]
 80022c2:	e005      	b.n	80022d0 <SH1106_fillRect+0x50>
        } else {
            t = x1;
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	737b      	strb	r3, [r7, #13]
            l = x2 - x1;
 80022c8:	797a      	ldrb	r2, [r7, #5]
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	733b      	strb	r3, [r7, #12]
        }

        if (y1 > y2) {
 80022d0:	79ba      	ldrb	r2, [r7, #6]
 80022d2:	793b      	ldrb	r3, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d904      	bls.n	80022e2 <SH1106_fillRect+0x62>
            z = y1;
 80022d8:	79bb      	ldrb	r3, [r7, #6]
 80022da:	73fb      	strb	r3, [r7, #15]
            e = y2;
 80022dc:	793b      	ldrb	r3, [r7, #4]
 80022de:	73bb      	strb	r3, [r7, #14]
        if (y1 > y2) {
 80022e0:	e022      	b.n	8002328 <SH1106_fillRect+0xa8>
        } else {
            z = y2;
 80022e2:	793b      	ldrb	r3, [r7, #4]
 80022e4:	73fb      	strb	r3, [r7, #15]
            e = y1;
 80022e6:	79bb      	ldrb	r3, [r7, #6]
 80022e8:	73bb      	strb	r3, [r7, #14]
        if (y1 > y2) {
 80022ea:	e01d      	b.n	8002328 <SH1106_fillRect+0xa8>
        }
    } else {
        if (y1 > y2) {
 80022ec:	79ba      	ldrb	r2, [r7, #6]
 80022ee:	793b      	ldrb	r3, [r7, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d906      	bls.n	8002302 <SH1106_fillRect+0x82>
            t = y2;
 80022f4:	793b      	ldrb	r3, [r7, #4]
 80022f6:	737b      	strb	r3, [r7, #13]
            l = y1 - y2;
 80022f8:	79ba      	ldrb	r2, [r7, #6]
 80022fa:	793b      	ldrb	r3, [r7, #4]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	733b      	strb	r3, [r7, #12]
 8002300:	e005      	b.n	800230e <SH1106_fillRect+0x8e>
        } else {
            t = y1;
 8002302:	79bb      	ldrb	r3, [r7, #6]
 8002304:	737b      	strb	r3, [r7, #13]
            l = y2 - y1;
 8002306:	793a      	ldrb	r2, [r7, #4]
 8002308:	79bb      	ldrb	r3, [r7, #6]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	733b      	strb	r3, [r7, #12]
        }

        if (x1 > x2) {
 800230e:	79fa      	ldrb	r2, [r7, #7]
 8002310:	797b      	ldrb	r3, [r7, #5]
 8002312:	429a      	cmp	r2, r3
 8002314:	d904      	bls.n	8002320 <SH1106_fillRect+0xa0>
            z = x1;
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	73fb      	strb	r3, [r7, #15]
            e = x2;
 800231a:	797b      	ldrb	r3, [r7, #5]
 800231c:	73bb      	strb	r3, [r7, #14]
 800231e:	e003      	b.n	8002328 <SH1106_fillRect+0xa8>
        } else {
            z = x2;
 8002320:	797b      	ldrb	r3, [r7, #5]
 8002322:	73fb      	strb	r3, [r7, #15]
            e = x1;
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	73bb      	strb	r3, [r7, #14]
        }
    }
    l++;
 8002328:	7b3b      	ldrb	r3, [r7, #12]
 800232a:	3301      	adds	r3, #1
 800232c:	733b      	strb	r3, [r7, #12]

    // Fill a rectangle
    do {
        SH1106_drawVLineInt(z, t, l);
 800232e:	7b3a      	ldrb	r2, [r7, #12]
 8002330:	7b79      	ldrb	r1, [r7, #13]
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fe5b 	bl	8001ff0 <SH1106_drawVLineInt>
    } while (z-- > e);
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	73fa      	strb	r2, [r7, #15]
 8002340:	7bba      	ldrb	r2, [r7, #14]
 8002342:	429a      	cmp	r2, r3
 8002344:	d3f3      	bcc.n	800232e <SH1106_fillRect+0xae>
}
 8002346:	bf00      	nop
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bd90      	pop	{r4, r7, pc}
 8002350:	200002ce 	.word	0x200002ce

08002354 <SH1106_drawRoundRectFill>:
 * @param x: topleft x coordinate to draw gauge
 * @param y: topleft y coordinate to draw gauge
 * @param w: width of the gauge
 * @param h: height of the gauge
 */
void SH1106_drawRoundRectFill(uint8_t fill_percentage, uint8_t x, uint8_t y, uint8_t w, uint8_t h) {
 8002354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4604      	mov	r4, r0
 800235c:	4608      	mov	r0, r1
 800235e:	4611      	mov	r1, r2
 8002360:	461a      	mov	r2, r3
 8002362:	4623      	mov	r3, r4
 8002364:	71fb      	strb	r3, [r7, #7]
 8002366:	4603      	mov	r3, r0
 8002368:	71bb      	strb	r3, [r7, #6]
 800236a:	460b      	mov	r3, r1
 800236c:	717b      	strb	r3, [r7, #5]
 800236e:	4613      	mov	r3, r2
 8002370:	713b      	strb	r3, [r7, #4]
    SH1106_drawHLine(x + 1, x + (w - 1), y); //top
 8002372:	79bb      	ldrb	r3, [r7, #6]
 8002374:	3301      	adds	r3, #1
 8002376:	b2d8      	uxtb	r0, r3
 8002378:	793a      	ldrb	r2, [r7, #4]
 800237a:	79bb      	ldrb	r3, [r7, #6]
 800237c:	4413      	add	r3, r2
 800237e:	b2db      	uxtb	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	797a      	ldrb	r2, [r7, #5]
 8002386:	4619      	mov	r1, r3
 8002388:	f7ff ff06 	bl	8002198 <SH1106_drawHLine>
    SH1106_drawHLine(x + 1, x + (w - 1), y + (h - 1)); //bottom
 800238c:	79bb      	ldrb	r3, [r7, #6]
 800238e:	3301      	adds	r3, #1
 8002390:	b2d8      	uxtb	r0, r3
 8002392:	793a      	ldrb	r2, [r7, #4]
 8002394:	79bb      	ldrb	r3, [r7, #6]
 8002396:	4413      	add	r3, r2
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b2d9      	uxtb	r1, r3
 800239e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023a2:	797b      	ldrb	r3, [r7, #5]
 80023a4:	4413      	add	r3, r2
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	f7ff fef3 	bl	8002198 <SH1106_drawHLine>
    SH1106_drawVLine(x, y + 1, y + (h - 2)); //left
 80023b2:	797b      	ldrb	r3, [r7, #5]
 80023b4:	3301      	adds	r3, #1
 80023b6:	b2d9      	uxtb	r1, r3
 80023b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023bc:	797b      	ldrb	r3, [r7, #5]
 80023be:	4413      	add	r3, r2
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	3b02      	subs	r3, #2
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	79bb      	ldrb	r3, [r7, #6]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff1f 	bl	800220c <SH1106_drawVLine>
    SH1106_drawVLine(x + w, y + 1, y + (h - 2)); //right
 80023ce:	79ba      	ldrb	r2, [r7, #6]
 80023d0:	793b      	ldrb	r3, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	b2d8      	uxtb	r0, r3
 80023d6:	797b      	ldrb	r3, [r7, #5]
 80023d8:	3301      	adds	r3, #1
 80023da:	b2d9      	uxtb	r1, r3
 80023dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023e0:	797b      	ldrb	r3, [r7, #5]
 80023e2:	4413      	add	r3, r2
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	3b02      	subs	r3, #2
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	f7ff ff0e 	bl	800220c <SH1106_drawVLine>
    SH1106_fillRect(x, y + 1, x + (fill_percentage / (100 / (float) w)), y + (h - 2)); //percentage for filling
 80023f0:	797b      	ldrb	r3, [r7, #5]
 80023f2:	3301      	adds	r3, #1
 80023f4:	b2dc      	uxtb	r4, r3
 80023f6:	79bb      	ldrb	r3, [r7, #6]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fd ff61 	bl	80002c0 <__aeabi_i2f>
 80023fe:	4605      	mov	r5, r0
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fd ff5c 	bl	80002c0 <__aeabi_i2f>
 8002408:	4606      	mov	r6, r0
 800240a:	793b      	ldrb	r3, [r7, #4]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fd ff53 	bl	80002b8 <__aeabi_ui2f>
 8002412:	4603      	mov	r3, r0
 8002414:	4619      	mov	r1, r3
 8002416:	4811      	ldr	r0, [pc, #68]	; (800245c <SH1106_drawRoundRectFill+0x108>)
 8002418:	f7fe f85a 	bl	80004d0 <__aeabi_fdiv>
 800241c:	4603      	mov	r3, r0
 800241e:	4619      	mov	r1, r3
 8002420:	4630      	mov	r0, r6
 8002422:	f7fe f855 	bl	80004d0 <__aeabi_fdiv>
 8002426:	4603      	mov	r3, r0
 8002428:	4619      	mov	r1, r3
 800242a:	4628      	mov	r0, r5
 800242c:	f7fd fe94 	bl	8000158 <__addsf3>
 8002430:	4603      	mov	r3, r0
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe f8e8 	bl	8000608 <__aeabi_f2uiz>
 8002438:	4603      	mov	r3, r0
 800243a:	b2d9      	uxtb	r1, r3
 800243c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002440:	797b      	ldrb	r3, [r7, #5]
 8002442:	4413      	add	r3, r2
 8002444:	b2db      	uxtb	r3, r3
 8002446:	3b02      	subs	r3, #2
 8002448:	b2db      	uxtb	r3, r3
 800244a:	79b8      	ldrb	r0, [r7, #6]
 800244c:	460a      	mov	r2, r1
 800244e:	4621      	mov	r1, r4
 8002450:	f7ff ff16 	bl	8002280 <SH1106_fillRect>
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245c:	42c80000 	.word	0x42c80000

08002460 <SH1106_printChar>:
//   x,y - character top left corner coordinates
//   ch - character to be drawn
//   Font - pointer to font
// return: character width in pixels
uint8_t SH1106_printChar(uint8_t x, uint8_t y, uint8_t ch,
                         const Font_TypeDef *Font) {
 8002460:	b4b0      	push	{r4, r5, r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
 800246c:	460b      	mov	r3, r1
 800246e:	71bb      	strb	r3, [r7, #6]
 8002470:	4613      	mov	r3, r2
 8002472:	717b      	strb	r3, [r7, #5]
    uint8_t tmpCh;
    uint8_t bL;
    const uint8_t *pCh;

    // If the specified character code is out of bounds should substitute the code of the "unknown" character
    if (ch < Font->font_MinChar || ch > Font->font_MaxChar)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	791b      	ldrb	r3, [r3, #4]
 8002478:	797a      	ldrb	r2, [r7, #5]
 800247a:	429a      	cmp	r2, r3
 800247c:	d304      	bcc.n	8002488 <SH1106_printChar+0x28>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	795b      	ldrb	r3, [r3, #5]
 8002482:	797a      	ldrb	r2, [r7, #5]
 8002484:	429a      	cmp	r2, r3
 8002486:	d902      	bls.n	800248e <SH1106_printChar+0x2e>
        ch = Font->font_UnknownChar;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	799b      	ldrb	r3, [r3, #6]
 800248c:	717b      	strb	r3, [r7, #5]

    // Pointer to the first byte of character in font data array
    pCh = &Font->font_Data[(ch - Font->font_MinChar) * Font->font_BPC];
 800248e:	797b      	ldrb	r3, [r7, #5]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	7912      	ldrb	r2, [r2, #4]
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	7892      	ldrb	r2, [r2, #2]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	4413      	add	r3, r2
 80024a2:	3307      	adds	r3, #7
 80024a4:	61bb      	str	r3, [r7, #24]

    // Draw character
    if (Font->font_Scan == FONT_V) {
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	78db      	ldrb	r3, [r3, #3]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 8116 	bne.w	80026dc <SH1106_printChar+0x27c>
        // Vertical pixels order
        if (Font->font_Height < 9) {
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	785b      	ldrb	r3, [r3, #1]
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d878      	bhi.n	80025aa <SH1106_printChar+0x14a>
            // Height is 8 pixels or less (one byte per column)
            p_x = x;
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	77fb      	strb	r3, [r7, #31]
            while (p_x < x + Font->font_Width) {
 80024bc:	e06d      	b.n	800259a <SH1106_printChar+0x13a>
                p_y = y;
 80024be:	79bb      	ldrb	r3, [r7, #6]
 80024c0:	77bb      	strb	r3, [r7, #30]
                tmpCh = *pCh++;
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	61ba      	str	r2, [r7, #24]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	777b      	strb	r3, [r7, #29]
                while (tmpCh) {
 80024cc:	e05f      	b.n	800258e <SH1106_printChar+0x12e>
                    if (tmpCh & 0x01)
 80024ce:	7f7b      	ldrb	r3, [r7, #29]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d054      	beq.n	8002582 <SH1106_printChar+0x122>
                        SH1106_pixel(p_x, p_y, SH1106_PixelMode);
 80024d8:	4b98      	ldr	r3, [pc, #608]	; (800273c <SH1106_printChar+0x2dc>)
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	7ffb      	ldrb	r3, [r7, #31]
 80024de:	75fb      	strb	r3, [r7, #23]
 80024e0:	7fbb      	ldrb	r3, [r7, #30]
 80024e2:	75bb      	strb	r3, [r7, #22]
 80024e4:	4613      	mov	r3, r2
 80024e6:	757b      	strb	r3, [r7, #21]
    if (scr_orientation == SH1106_ORIENT_CW
 80024e8:	4b95      	ldr	r3, [pc, #596]	; (8002740 <SH1106_printChar+0x2e0>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d003      	beq.n	80024f8 <SH1106_printChar+0x98>
        || scr_orientation == SH1106_ORIENT_CCW) {
 80024f0:	4b93      	ldr	r3, [pc, #588]	; (8002740 <SH1106_printChar+0x2e0>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d10a      	bne.n	800250e <SH1106_printChar+0xae>
        offset = ((x >> 3) << 7) + y;
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	08db      	lsrs	r3, r3, #3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	01da      	lsls	r2, r3, #7
 8002500:	7dbb      	ldrb	r3, [r7, #22]
 8002502:	4413      	add	r3, r2
 8002504:	461c      	mov	r4, r3
        bpos = x & 0x07;
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	f003 0507 	and.w	r5, r3, #7
 800250c:	e009      	b.n	8002522 <SH1106_printChar+0xc2>
        offset = ((y >> 3) << 7) + x;
 800250e:	7dbb      	ldrb	r3, [r7, #22]
 8002510:	08db      	lsrs	r3, r3, #3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	01da      	lsls	r2, r3, #7
 8002516:	7dfb      	ldrb	r3, [r7, #23]
 8002518:	4413      	add	r3, r2
 800251a:	461c      	mov	r4, r3
        bpos = y & 0x07;
 800251c:	7dbb      	ldrb	r3, [r7, #22]
 800251e:	f003 0507 	and.w	r5, r3, #7
    if (offset > ((SCR_W * SCR_H) >> 3)) {
 8002522:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002526:	d82b      	bhi.n	8002580 <SH1106_printChar+0x120>
    switch (Mode) {
 8002528:	7d7b      	ldrb	r3, [r7, #21]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d002      	beq.n	8002534 <SH1106_printChar+0xd4>
 800252e:	2b02      	cmp	r3, #2
 8002530:	d00e      	beq.n	8002550 <SH1106_printChar+0xf0>
 8002532:	e019      	b.n	8002568 <SH1106_printChar+0x108>
            vRAM[offset] &= ~(1 << bpos);
 8002534:	4b83      	ldr	r3, [pc, #524]	; (8002744 <SH1106_printChar+0x2e4>)
 8002536:	5d1b      	ldrb	r3, [r3, r4]
 8002538:	b25a      	sxtb	r2, r3
 800253a:	2301      	movs	r3, #1
 800253c:	40ab      	lsls	r3, r5
 800253e:	b25b      	sxtb	r3, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	b25b      	sxtb	r3, r3
 8002544:	4013      	ands	r3, r2
 8002546:	b25b      	sxtb	r3, r3
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4b7e      	ldr	r3, [pc, #504]	; (8002744 <SH1106_printChar+0x2e4>)
 800254c:	551a      	strb	r2, [r3, r4]
            break;
 800254e:	e018      	b.n	8002582 <SH1106_printChar+0x122>
            vRAM[offset] ^= (1 << bpos);
 8002550:	4b7c      	ldr	r3, [pc, #496]	; (8002744 <SH1106_printChar+0x2e4>)
 8002552:	5d1b      	ldrb	r3, [r3, r4]
 8002554:	b25a      	sxtb	r2, r3
 8002556:	2301      	movs	r3, #1
 8002558:	40ab      	lsls	r3, r5
 800255a:	b25b      	sxtb	r3, r3
 800255c:	4053      	eors	r3, r2
 800255e:	b25b      	sxtb	r3, r3
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b78      	ldr	r3, [pc, #480]	; (8002744 <SH1106_printChar+0x2e4>)
 8002564:	551a      	strb	r2, [r3, r4]
            break;
 8002566:	e00c      	b.n	8002582 <SH1106_printChar+0x122>
            vRAM[offset] |= (1 << bpos);
 8002568:	4b76      	ldr	r3, [pc, #472]	; (8002744 <SH1106_printChar+0x2e4>)
 800256a:	5d1b      	ldrb	r3, [r3, r4]
 800256c:	b25a      	sxtb	r2, r3
 800256e:	2301      	movs	r3, #1
 8002570:	40ab      	lsls	r3, r5
 8002572:	b25b      	sxtb	r3, r3
 8002574:	4313      	orrs	r3, r2
 8002576:	b25b      	sxtb	r3, r3
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b72      	ldr	r3, [pc, #456]	; (8002744 <SH1106_printChar+0x2e4>)
 800257c:	551a      	strb	r2, [r3, r4]
            break;
 800257e:	e000      	b.n	8002582 <SH1106_printChar+0x122>
        return;
 8002580:	bf00      	nop
                    tmpCh >>= 1;
 8002582:	7f7b      	ldrb	r3, [r7, #29]
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	777b      	strb	r3, [r7, #29]
                    p_y++;
 8002588:	7fbb      	ldrb	r3, [r7, #30]
 800258a:	3301      	adds	r3, #1
 800258c:	77bb      	strb	r3, [r7, #30]
                while (tmpCh) {
 800258e:	7f7b      	ldrb	r3, [r7, #29]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d19c      	bne.n	80024ce <SH1106_printChar+0x6e>
                }
                p_x++;
 8002594:	7ffb      	ldrb	r3, [r7, #31]
 8002596:	3301      	adds	r3, #1
 8002598:	77fb      	strb	r3, [r7, #31]
            while (p_x < x + Font->font_Width) {
 800259a:	7ffa      	ldrb	r2, [r7, #31]
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	6839      	ldr	r1, [r7, #0]
 80025a0:	7809      	ldrb	r1, [r1, #0]
 80025a2:	440b      	add	r3, r1
 80025a4:	429a      	cmp	r2, r3
 80025a6:	db8a      	blt.n	80024be <SH1106_printChar+0x5e>
 80025a8:	e1b4      	b.n	8002914 <SH1106_printChar+0x4b4>
            }
        } else {
            // Height is more than 8 pixels (several bytes per column)
            p_x = x;
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	77fb      	strb	r3, [r7, #31]
            while (p_x < x + Font->font_Width) {
 80025ae:	e08c      	b.n	80026ca <SH1106_printChar+0x26a>
                p_y = y;
 80025b0:	79bb      	ldrb	r3, [r7, #6]
 80025b2:	77bb      	strb	r3, [r7, #30]
                while (p_y < y + Font->font_Height) {
 80025b4:	e07e      	b.n	80026b4 <SH1106_printChar+0x254>
                    bL = 8;
 80025b6:	2308      	movs	r3, #8
 80025b8:	773b      	strb	r3, [r7, #28]
                    tmpCh = *pCh++;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	61ba      	str	r2, [r7, #24]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	777b      	strb	r3, [r7, #29]
                    if (tmpCh) {
 80025c4:	7f7b      	ldrb	r3, [r7, #29]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d070      	beq.n	80026ac <SH1106_printChar+0x24c>
                        while (bL) {
 80025ca:	e06b      	b.n	80026a4 <SH1106_printChar+0x244>
                            if (tmpCh & 0x01)
 80025cc:	7f7b      	ldrb	r3, [r7, #29]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d054      	beq.n	8002680 <SH1106_printChar+0x220>
                                SH1106_pixel(p_x, p_y, SH1106_PixelMode);
 80025d6:	4b59      	ldr	r3, [pc, #356]	; (800273c <SH1106_printChar+0x2dc>)
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	7ffb      	ldrb	r3, [r7, #31]
 80025dc:	753b      	strb	r3, [r7, #20]
 80025de:	7fbb      	ldrb	r3, [r7, #30]
 80025e0:	74fb      	strb	r3, [r7, #19]
 80025e2:	4613      	mov	r3, r2
 80025e4:	74bb      	strb	r3, [r7, #18]
    if (scr_orientation == SH1106_ORIENT_CW
 80025e6:	4b56      	ldr	r3, [pc, #344]	; (8002740 <SH1106_printChar+0x2e0>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d003      	beq.n	80025f6 <SH1106_printChar+0x196>
        || scr_orientation == SH1106_ORIENT_CCW) {
 80025ee:	4b54      	ldr	r3, [pc, #336]	; (8002740 <SH1106_printChar+0x2e0>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d10a      	bne.n	800260c <SH1106_printChar+0x1ac>
        offset = ((x >> 3) << 7) + y;
 80025f6:	7d3b      	ldrb	r3, [r7, #20]
 80025f8:	08db      	lsrs	r3, r3, #3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	01da      	lsls	r2, r3, #7
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	4413      	add	r3, r2
 8002602:	461c      	mov	r4, r3
        bpos = x & 0x07;
 8002604:	7d3b      	ldrb	r3, [r7, #20]
 8002606:	f003 0507 	and.w	r5, r3, #7
 800260a:	e009      	b.n	8002620 <SH1106_printChar+0x1c0>
        offset = ((y >> 3) << 7) + x;
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	08db      	lsrs	r3, r3, #3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	01da      	lsls	r2, r3, #7
 8002614:	7d3b      	ldrb	r3, [r7, #20]
 8002616:	4413      	add	r3, r2
 8002618:	461c      	mov	r4, r3
        bpos = y & 0x07;
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	f003 0507 	and.w	r5, r3, #7
    if (offset > ((SCR_W * SCR_H) >> 3)) {
 8002620:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002624:	d82b      	bhi.n	800267e <SH1106_printChar+0x21e>
    switch (Mode) {
 8002626:	7cbb      	ldrb	r3, [r7, #18]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d002      	beq.n	8002632 <SH1106_printChar+0x1d2>
 800262c:	2b02      	cmp	r3, #2
 800262e:	d00e      	beq.n	800264e <SH1106_printChar+0x1ee>
 8002630:	e019      	b.n	8002666 <SH1106_printChar+0x206>
            vRAM[offset] &= ~(1 << bpos);
 8002632:	4b44      	ldr	r3, [pc, #272]	; (8002744 <SH1106_printChar+0x2e4>)
 8002634:	5d1b      	ldrb	r3, [r3, r4]
 8002636:	b25a      	sxtb	r2, r3
 8002638:	2301      	movs	r3, #1
 800263a:	40ab      	lsls	r3, r5
 800263c:	b25b      	sxtb	r3, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4013      	ands	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	b2da      	uxtb	r2, r3
 8002648:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <SH1106_printChar+0x2e4>)
 800264a:	551a      	strb	r2, [r3, r4]
            break;
 800264c:	e018      	b.n	8002680 <SH1106_printChar+0x220>
            vRAM[offset] ^= (1 << bpos);
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <SH1106_printChar+0x2e4>)
 8002650:	5d1b      	ldrb	r3, [r3, r4]
 8002652:	b25a      	sxtb	r2, r3
 8002654:	2301      	movs	r3, #1
 8002656:	40ab      	lsls	r3, r5
 8002658:	b25b      	sxtb	r3, r3
 800265a:	4053      	eors	r3, r2
 800265c:	b25b      	sxtb	r3, r3
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4b38      	ldr	r3, [pc, #224]	; (8002744 <SH1106_printChar+0x2e4>)
 8002662:	551a      	strb	r2, [r3, r4]
            break;
 8002664:	e00c      	b.n	8002680 <SH1106_printChar+0x220>
            vRAM[offset] |= (1 << bpos);
 8002666:	4b37      	ldr	r3, [pc, #220]	; (8002744 <SH1106_printChar+0x2e4>)
 8002668:	5d1b      	ldrb	r3, [r3, r4]
 800266a:	b25a      	sxtb	r2, r3
 800266c:	2301      	movs	r3, #1
 800266e:	40ab      	lsls	r3, r5
 8002670:	b25b      	sxtb	r3, r3
 8002672:	4313      	orrs	r3, r2
 8002674:	b25b      	sxtb	r3, r3
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b32      	ldr	r3, [pc, #200]	; (8002744 <SH1106_printChar+0x2e4>)
 800267a:	551a      	strb	r2, [r3, r4]
            break;
 800267c:	e000      	b.n	8002680 <SH1106_printChar+0x220>
        return;
 800267e:	bf00      	nop
                            tmpCh >>= 1;
 8002680:	7f7b      	ldrb	r3, [r7, #29]
 8002682:	085b      	lsrs	r3, r3, #1
 8002684:	777b      	strb	r3, [r7, #29]
                            if (tmpCh) {
 8002686:	7f7b      	ldrb	r3, [r7, #29]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <SH1106_printChar+0x23a>
                                p_y++;
 800268c:	7fbb      	ldrb	r3, [r7, #30]
 800268e:	3301      	adds	r3, #1
 8002690:	77bb      	strb	r3, [r7, #30]
                                bL--;
 8002692:	7f3b      	ldrb	r3, [r7, #28]
 8002694:	3b01      	subs	r3, #1
 8002696:	773b      	strb	r3, [r7, #28]
 8002698:	e004      	b.n	80026a4 <SH1106_printChar+0x244>
                            } else {
                                p_y += bL;
 800269a:	7fba      	ldrb	r2, [r7, #30]
 800269c:	7f3b      	ldrb	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	77bb      	strb	r3, [r7, #30]
                                break;
 80026a2:	e007      	b.n	80026b4 <SH1106_printChar+0x254>
                        while (bL) {
 80026a4:	7f3b      	ldrb	r3, [r7, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d190      	bne.n	80025cc <SH1106_printChar+0x16c>
 80026aa:	e003      	b.n	80026b4 <SH1106_printChar+0x254>
                            }
                        }
                    } else {
                        p_y += bL;
 80026ac:	7fba      	ldrb	r2, [r7, #30]
 80026ae:	7f3b      	ldrb	r3, [r7, #28]
 80026b0:	4413      	add	r3, r2
 80026b2:	77bb      	strb	r3, [r7, #30]
                while (p_y < y + Font->font_Height) {
 80026b4:	7fba      	ldrb	r2, [r7, #30]
 80026b6:	79bb      	ldrb	r3, [r7, #6]
 80026b8:	6839      	ldr	r1, [r7, #0]
 80026ba:	7849      	ldrb	r1, [r1, #1]
 80026bc:	440b      	add	r3, r1
 80026be:	429a      	cmp	r2, r3
 80026c0:	f6ff af79 	blt.w	80025b6 <SH1106_printChar+0x156>
                    }
                }
                p_x++;
 80026c4:	7ffb      	ldrb	r3, [r7, #31]
 80026c6:	3301      	adds	r3, #1
 80026c8:	77fb      	strb	r3, [r7, #31]
            while (p_x < x + Font->font_Width) {
 80026ca:	7ffa      	ldrb	r2, [r7, #31]
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	6839      	ldr	r1, [r7, #0]
 80026d0:	7809      	ldrb	r1, [r1, #0]
 80026d2:	440b      	add	r3, r1
 80026d4:	429a      	cmp	r2, r3
 80026d6:	f6ff af6b 	blt.w	80025b0 <SH1106_printChar+0x150>
 80026da:	e11b      	b.n	8002914 <SH1106_printChar+0x4b4>
            }
        }
    } else {
        // Horizontal pixels order
        if (Font->font_Width < 9) {
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d87f      	bhi.n	80027e4 <SH1106_printChar+0x384>
            // Width is 8 pixels or less (one byte per row)
            p_y = y;
 80026e4:	79bb      	ldrb	r3, [r7, #6]
 80026e6:	77bb      	strb	r3, [r7, #30]
            while (p_y < y + Font->font_Height) {
 80026e8:	e074      	b.n	80027d4 <SH1106_printChar+0x374>
                p_x = x;
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	77fb      	strb	r3, [r7, #31]
                tmpCh = *pCh++;
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	61ba      	str	r2, [r7, #24]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	777b      	strb	r3, [r7, #29]
                while (tmpCh) {
 80026f8:	e066      	b.n	80027c8 <SH1106_printChar+0x368>
                    if (tmpCh & 0x01)
 80026fa:	7f7b      	ldrb	r3, [r7, #29]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05b      	beq.n	80027bc <SH1106_printChar+0x35c>
                        SH1106_pixel(p_x, p_y, SH1106_PixelMode);
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <SH1106_printChar+0x2dc>)
 8002706:	781a      	ldrb	r2, [r3, #0]
 8002708:	7ffb      	ldrb	r3, [r7, #31]
 800270a:	747b      	strb	r3, [r7, #17]
 800270c:	7fbb      	ldrb	r3, [r7, #30]
 800270e:	743b      	strb	r3, [r7, #16]
 8002710:	4613      	mov	r3, r2
 8002712:	73fb      	strb	r3, [r7, #15]
    if (scr_orientation == SH1106_ORIENT_CW
 8002714:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <SH1106_printChar+0x2e0>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d003      	beq.n	8002724 <SH1106_printChar+0x2c4>
        || scr_orientation == SH1106_ORIENT_CCW) {
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <SH1106_printChar+0x2e0>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d111      	bne.n	8002748 <SH1106_printChar+0x2e8>
        offset = ((x >> 3) << 7) + y;
 8002724:	7c7b      	ldrb	r3, [r7, #17]
 8002726:	08db      	lsrs	r3, r3, #3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	01da      	lsls	r2, r3, #7
 800272c:	7c3b      	ldrb	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	461c      	mov	r4, r3
        bpos = x & 0x07;
 8002732:	7c7b      	ldrb	r3, [r7, #17]
 8002734:	f003 0507 	and.w	r5, r3, #7
 8002738:	e010      	b.n	800275c <SH1106_printChar+0x2fc>
 800273a:	bf00      	nop
 800273c:	200002cd 	.word	0x200002cd
 8002740:	200002ce 	.word	0x200002ce
 8002744:	200002d0 	.word	0x200002d0
        offset = ((y >> 3) << 7) + x;
 8002748:	7c3b      	ldrb	r3, [r7, #16]
 800274a:	08db      	lsrs	r3, r3, #3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	01da      	lsls	r2, r3, #7
 8002750:	7c7b      	ldrb	r3, [r7, #17]
 8002752:	4413      	add	r3, r2
 8002754:	461c      	mov	r4, r3
        bpos = y & 0x07;
 8002756:	7c3b      	ldrb	r3, [r7, #16]
 8002758:	f003 0507 	and.w	r5, r3, #7
    if (offset > ((SCR_W * SCR_H) >> 3)) {
 800275c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002760:	d82b      	bhi.n	80027ba <SH1106_printChar+0x35a>
    switch (Mode) {
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d002      	beq.n	800276e <SH1106_printChar+0x30e>
 8002768:	2b02      	cmp	r3, #2
 800276a:	d00e      	beq.n	800278a <SH1106_printChar+0x32a>
 800276c:	e019      	b.n	80027a2 <SH1106_printChar+0x342>
            vRAM[offset] &= ~(1 << bpos);
 800276e:	4b6e      	ldr	r3, [pc, #440]	; (8002928 <SH1106_printChar+0x4c8>)
 8002770:	5d1b      	ldrb	r3, [r3, r4]
 8002772:	b25a      	sxtb	r2, r3
 8002774:	2301      	movs	r3, #1
 8002776:	40ab      	lsls	r3, r5
 8002778:	b25b      	sxtb	r3, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	b25b      	sxtb	r3, r3
 800277e:	4013      	ands	r3, r2
 8002780:	b25b      	sxtb	r3, r3
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b68      	ldr	r3, [pc, #416]	; (8002928 <SH1106_printChar+0x4c8>)
 8002786:	551a      	strb	r2, [r3, r4]
            break;
 8002788:	e018      	b.n	80027bc <SH1106_printChar+0x35c>
            vRAM[offset] ^= (1 << bpos);
 800278a:	4b67      	ldr	r3, [pc, #412]	; (8002928 <SH1106_printChar+0x4c8>)
 800278c:	5d1b      	ldrb	r3, [r3, r4]
 800278e:	b25a      	sxtb	r2, r3
 8002790:	2301      	movs	r3, #1
 8002792:	40ab      	lsls	r3, r5
 8002794:	b25b      	sxtb	r3, r3
 8002796:	4053      	eors	r3, r2
 8002798:	b25b      	sxtb	r3, r3
 800279a:	b2da      	uxtb	r2, r3
 800279c:	4b62      	ldr	r3, [pc, #392]	; (8002928 <SH1106_printChar+0x4c8>)
 800279e:	551a      	strb	r2, [r3, r4]
            break;
 80027a0:	e00c      	b.n	80027bc <SH1106_printChar+0x35c>
            vRAM[offset] |= (1 << bpos);
 80027a2:	4b61      	ldr	r3, [pc, #388]	; (8002928 <SH1106_printChar+0x4c8>)
 80027a4:	5d1b      	ldrb	r3, [r3, r4]
 80027a6:	b25a      	sxtb	r2, r3
 80027a8:	2301      	movs	r3, #1
 80027aa:	40ab      	lsls	r3, r5
 80027ac:	b25b      	sxtb	r3, r3
 80027ae:	4313      	orrs	r3, r2
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b5c      	ldr	r3, [pc, #368]	; (8002928 <SH1106_printChar+0x4c8>)
 80027b6:	551a      	strb	r2, [r3, r4]
            break;
 80027b8:	e000      	b.n	80027bc <SH1106_printChar+0x35c>
        return;
 80027ba:	bf00      	nop
                    tmpCh >>= 1;
 80027bc:	7f7b      	ldrb	r3, [r7, #29]
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	777b      	strb	r3, [r7, #29]
                    p_x++;
 80027c2:	7ffb      	ldrb	r3, [r7, #31]
 80027c4:	3301      	adds	r3, #1
 80027c6:	77fb      	strb	r3, [r7, #31]
                while (tmpCh) {
 80027c8:	7f7b      	ldrb	r3, [r7, #29]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d195      	bne.n	80026fa <SH1106_printChar+0x29a>
                }
                p_y++;
 80027ce:	7fbb      	ldrb	r3, [r7, #30]
 80027d0:	3301      	adds	r3, #1
 80027d2:	77bb      	strb	r3, [r7, #30]
            while (p_y < y + Font->font_Height) {
 80027d4:	7fba      	ldrb	r2, [r7, #30]
 80027d6:	79bb      	ldrb	r3, [r7, #6]
 80027d8:	6839      	ldr	r1, [r7, #0]
 80027da:	7849      	ldrb	r1, [r1, #1]
 80027dc:	440b      	add	r3, r1
 80027de:	429a      	cmp	r2, r3
 80027e0:	db83      	blt.n	80026ea <SH1106_printChar+0x28a>
 80027e2:	e097      	b.n	8002914 <SH1106_printChar+0x4b4>
            }
        } else {
            // Width is more than 8 pixels (several bytes per row)
            p_y = y;
 80027e4:	79bb      	ldrb	r3, [r7, #6]
 80027e6:	77bb      	strb	r3, [r7, #30]
            while (p_y < y + Font->font_Height) {
 80027e8:	e08c      	b.n	8002904 <SH1106_printChar+0x4a4>
                p_x = x;
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	77fb      	strb	r3, [r7, #31]
                while (p_x < x + Font->font_Width) {
 80027ee:	e07e      	b.n	80028ee <SH1106_printChar+0x48e>
                    bL = 8;
 80027f0:	2308      	movs	r3, #8
 80027f2:	773b      	strb	r3, [r7, #28]
                    tmpCh = *pCh++;
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	61ba      	str	r2, [r7, #24]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	777b      	strb	r3, [r7, #29]
                    if (tmpCh) {
 80027fe:	7f7b      	ldrb	r3, [r7, #29]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d070      	beq.n	80028e6 <SH1106_printChar+0x486>
                        while (bL) {
 8002804:	e06b      	b.n	80028de <SH1106_printChar+0x47e>
                            if (tmpCh & 0x01)
 8002806:	7f7b      	ldrb	r3, [r7, #29]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d054      	beq.n	80028ba <SH1106_printChar+0x45a>
                                SH1106_pixel(p_x, p_y, SH1106_PixelMode);
 8002810:	4b46      	ldr	r3, [pc, #280]	; (800292c <SH1106_printChar+0x4cc>)
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	7ffb      	ldrb	r3, [r7, #31]
 8002816:	73bb      	strb	r3, [r7, #14]
 8002818:	7fbb      	ldrb	r3, [r7, #30]
 800281a:	737b      	strb	r3, [r7, #13]
 800281c:	4613      	mov	r3, r2
 800281e:	733b      	strb	r3, [r7, #12]
    if (scr_orientation == SH1106_ORIENT_CW
 8002820:	4b43      	ldr	r3, [pc, #268]	; (8002930 <SH1106_printChar+0x4d0>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d003      	beq.n	8002830 <SH1106_printChar+0x3d0>
        || scr_orientation == SH1106_ORIENT_CCW) {
 8002828:	4b41      	ldr	r3, [pc, #260]	; (8002930 <SH1106_printChar+0x4d0>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d10a      	bne.n	8002846 <SH1106_printChar+0x3e6>
        offset = ((x >> 3) << 7) + y;
 8002830:	7bbb      	ldrb	r3, [r7, #14]
 8002832:	08db      	lsrs	r3, r3, #3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	01da      	lsls	r2, r3, #7
 8002838:	7b7b      	ldrb	r3, [r7, #13]
 800283a:	4413      	add	r3, r2
 800283c:	461c      	mov	r4, r3
        bpos = x & 0x07;
 800283e:	7bbb      	ldrb	r3, [r7, #14]
 8002840:	f003 0507 	and.w	r5, r3, #7
 8002844:	e009      	b.n	800285a <SH1106_printChar+0x3fa>
        offset = ((y >> 3) << 7) + x;
 8002846:	7b7b      	ldrb	r3, [r7, #13]
 8002848:	08db      	lsrs	r3, r3, #3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	01da      	lsls	r2, r3, #7
 800284e:	7bbb      	ldrb	r3, [r7, #14]
 8002850:	4413      	add	r3, r2
 8002852:	461c      	mov	r4, r3
        bpos = y & 0x07;
 8002854:	7b7b      	ldrb	r3, [r7, #13]
 8002856:	f003 0507 	and.w	r5, r3, #7
    if (offset > ((SCR_W * SCR_H) >> 3)) {
 800285a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800285e:	d82b      	bhi.n	80028b8 <SH1106_printChar+0x458>
    switch (Mode) {
 8002860:	7b3b      	ldrb	r3, [r7, #12]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d002      	beq.n	800286c <SH1106_printChar+0x40c>
 8002866:	2b02      	cmp	r3, #2
 8002868:	d00e      	beq.n	8002888 <SH1106_printChar+0x428>
 800286a:	e019      	b.n	80028a0 <SH1106_printChar+0x440>
            vRAM[offset] &= ~(1 << bpos);
 800286c:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <SH1106_printChar+0x4c8>)
 800286e:	5d1b      	ldrb	r3, [r3, r4]
 8002870:	b25a      	sxtb	r2, r3
 8002872:	2301      	movs	r3, #1
 8002874:	40ab      	lsls	r3, r5
 8002876:	b25b      	sxtb	r3, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	b25b      	sxtb	r3, r3
 800287c:	4013      	ands	r3, r2
 800287e:	b25b      	sxtb	r3, r3
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b29      	ldr	r3, [pc, #164]	; (8002928 <SH1106_printChar+0x4c8>)
 8002884:	551a      	strb	r2, [r3, r4]
            break;
 8002886:	e018      	b.n	80028ba <SH1106_printChar+0x45a>
            vRAM[offset] ^= (1 << bpos);
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <SH1106_printChar+0x4c8>)
 800288a:	5d1b      	ldrb	r3, [r3, r4]
 800288c:	b25a      	sxtb	r2, r3
 800288e:	2301      	movs	r3, #1
 8002890:	40ab      	lsls	r3, r5
 8002892:	b25b      	sxtb	r3, r3
 8002894:	4053      	eors	r3, r2
 8002896:	b25b      	sxtb	r3, r3
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b23      	ldr	r3, [pc, #140]	; (8002928 <SH1106_printChar+0x4c8>)
 800289c:	551a      	strb	r2, [r3, r4]
            break;
 800289e:	e00c      	b.n	80028ba <SH1106_printChar+0x45a>
            vRAM[offset] |= (1 << bpos);
 80028a0:	4b21      	ldr	r3, [pc, #132]	; (8002928 <SH1106_printChar+0x4c8>)
 80028a2:	5d1b      	ldrb	r3, [r3, r4]
 80028a4:	b25a      	sxtb	r2, r3
 80028a6:	2301      	movs	r3, #1
 80028a8:	40ab      	lsls	r3, r5
 80028aa:	b25b      	sxtb	r3, r3
 80028ac:	4313      	orrs	r3, r2
 80028ae:	b25b      	sxtb	r3, r3
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <SH1106_printChar+0x4c8>)
 80028b4:	551a      	strb	r2, [r3, r4]
            break;
 80028b6:	e000      	b.n	80028ba <SH1106_printChar+0x45a>
        return;
 80028b8:	bf00      	nop
                            tmpCh >>= 1;
 80028ba:	7f7b      	ldrb	r3, [r7, #29]
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	777b      	strb	r3, [r7, #29]
                            if (tmpCh) {
 80028c0:	7f7b      	ldrb	r3, [r7, #29]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d006      	beq.n	80028d4 <SH1106_printChar+0x474>
                                p_x++;
 80028c6:	7ffb      	ldrb	r3, [r7, #31]
 80028c8:	3301      	adds	r3, #1
 80028ca:	77fb      	strb	r3, [r7, #31]
                                bL--;
 80028cc:	7f3b      	ldrb	r3, [r7, #28]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	773b      	strb	r3, [r7, #28]
 80028d2:	e004      	b.n	80028de <SH1106_printChar+0x47e>
                            } else {
                                p_x += bL;
 80028d4:	7ffa      	ldrb	r2, [r7, #31]
 80028d6:	7f3b      	ldrb	r3, [r7, #28]
 80028d8:	4413      	add	r3, r2
 80028da:	77fb      	strb	r3, [r7, #31]
                                break;
 80028dc:	e007      	b.n	80028ee <SH1106_printChar+0x48e>
                        while (bL) {
 80028de:	7f3b      	ldrb	r3, [r7, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d190      	bne.n	8002806 <SH1106_printChar+0x3a6>
 80028e4:	e003      	b.n	80028ee <SH1106_printChar+0x48e>
                            }
                        }
                    } else {
                        p_x += bL;
 80028e6:	7ffa      	ldrb	r2, [r7, #31]
 80028e8:	7f3b      	ldrb	r3, [r7, #28]
 80028ea:	4413      	add	r3, r2
 80028ec:	77fb      	strb	r3, [r7, #31]
                while (p_x < x + Font->font_Width) {
 80028ee:	7ffa      	ldrb	r2, [r7, #31]
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	6839      	ldr	r1, [r7, #0]
 80028f4:	7809      	ldrb	r1, [r1, #0]
 80028f6:	440b      	add	r3, r1
 80028f8:	429a      	cmp	r2, r3
 80028fa:	f6ff af79 	blt.w	80027f0 <SH1106_printChar+0x390>
                    }
                }
                p_y++;
 80028fe:	7fbb      	ldrb	r3, [r7, #30]
 8002900:	3301      	adds	r3, #1
 8002902:	77bb      	strb	r3, [r7, #30]
            while (p_y < y + Font->font_Height) {
 8002904:	7fba      	ldrb	r2, [r7, #30]
 8002906:	79bb      	ldrb	r3, [r7, #6]
 8002908:	6839      	ldr	r1, [r7, #0]
 800290a:	7849      	ldrb	r1, [r1, #1]
 800290c:	440b      	add	r3, r1
 800290e:	429a      	cmp	r2, r3
 8002910:	f6ff af6b 	blt.w	80027ea <SH1106_printChar+0x38a>
            }
        }
    }

    return Font->font_Width + 1;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	3301      	adds	r3, #1
 800291a:	b2db      	uxtb	r3, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	3724      	adds	r7, #36	; 0x24
 8002920:	46bd      	mov	sp, r7
 8002922:	bcb0      	pop	{r4, r5, r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	200002d0 	.word	0x200002d0
 800292c:	200002cd 	.word	0x200002cd
 8002930:	200002ce 	.word	0x200002ce

08002934 <SH1106_printStr>:
//   x,y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   Font - pointer to font
// return: string width in pixels
uint16_t SH1106_printStr(uint8_t x, uint8_t y, const char *str,
                         const Font_TypeDef *Font) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60ba      	str	r2, [r7, #8]
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	4603      	mov	r3, r0
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	460b      	mov	r3, r1
 8002944:	73bb      	strb	r3, [r7, #14]
    uint8_t p_x = x;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	75fb      	strb	r3, [r7, #23]
    uint8_t eX = scr_width - Font->font_Width - 1;
 800294a:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <SH1106_printStr+0x70>)
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	75bb      	strb	r3, [r7, #22]

    while (*str) {
 800295c:	e011      	b.n	8002982 <SH1106_printStr+0x4e>
        p_x += SH1106_printChar(p_x, y, *str++, Font);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	60ba      	str	r2, [r7, #8]
 8002964:	781a      	ldrb	r2, [r3, #0]
 8002966:	7bb9      	ldrb	r1, [r7, #14]
 8002968:	7df8      	ldrb	r0, [r7, #23]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f7ff fd78 	bl	8002460 <SH1106_printChar>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	4413      	add	r3, r2
 8002978:	75fb      	strb	r3, [r7, #23]
        if (p_x > eX)
 800297a:	7dfa      	ldrb	r2, [r7, #23]
 800297c:	7dbb      	ldrb	r3, [r7, #22]
 800297e:	429a      	cmp	r2, r3
 8002980:	d804      	bhi.n	800298c <SH1106_printStr+0x58>
    while (*str) {
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e9      	bne.n	800295e <SH1106_printStr+0x2a>
 800298a:	e000      	b.n	800298e <SH1106_printStr+0x5a>
            break;
 800298c:	bf00      	nop
    }

    return (p_x - x);
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	b29a      	uxth	r2, r3
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	b29b      	uxth	r3, r3
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	b29b      	uxth	r3, r3
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200000ac 	.word	0x200000ac

080029a8 <SH1106_printInt>:
//   x,y - top left coordinates of first symbol
//   num - signed integer value
//   Font - pointer to font
// return: number width in pixels
uint8_t SH1106_printInt(uint8_t x, uint8_t y, int32_t num,
                        const Font_TypeDef *Font) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60ba      	str	r2, [r7, #8]
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	4603      	mov	r3, r0
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	460b      	mov	r3, r1
 80029b8:	73bb      	strb	r3, [r7, #14]
    uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
    uint8_t *pStr = str;
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t p_x = x;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t neg = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    // String termination character
    *pStr++ = '\0';
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	627a      	str	r2, [r7, #36]	; 0x24
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]

    // Convert number to characters
    if (num < 0) {
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	da05      	bge.n	80029e8 <SH1106_printInt+0x40>
        neg = 1;
 80029dc:	2301      	movs	r3, #1
 80029de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        num *= -1;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	425b      	negs	r3, r3
 80029e6:	60bb      	str	r3, [r7, #8]
    }
    do {
        *pStr++ = (num % 10) + '0';
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <SH1106_printInt+0xd0>)
 80029ec:	fb83 1302 	smull	r1, r3, r3, r2
 80029f0:	1099      	asrs	r1, r3, #2
 80029f2:	17d3      	asrs	r3, r2, #31
 80029f4:	1ac9      	subs	r1, r1, r3
 80029f6:	460b      	mov	r3, r1
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	1ad1      	subs	r1, r2, r3
 8002a00:	b2ca      	uxtb	r2, r1
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	1c59      	adds	r1, r3, #1
 8002a06:	6279      	str	r1, [r7, #36]	; 0x24
 8002a08:	3230      	adds	r2, #48	; 0x30
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]
    } while (num /= 10);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <SH1106_printInt+0xd0>)
 8002a12:	fb82 1203 	smull	r1, r2, r2, r3
 8002a16:	1092      	asrs	r2, r2, #2
 8002a18:	17db      	asrs	r3, r3, #31
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e1      	bne.n	80029e8 <SH1106_printInt+0x40>
    if (neg)
 8002a24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d014      	beq.n	8002a56 <SH1106_printInt+0xae>
        *pStr++ = '-';
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	627a      	str	r2, [r7, #36]	; 0x24
 8002a32:	222d      	movs	r2, #45	; 0x2d
 8002a34:	701a      	strb	r2, [r3, #0]

    // Draw a number
    while (*--pStr)
 8002a36:	e00e      	b.n	8002a56 <SH1106_printInt+0xae>
        p_x += SH1106_printChar(p_x, y, *pStr, Font);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	781a      	ldrb	r2, [r3, #0]
 8002a3c:	7bb9      	ldrb	r1, [r7, #14]
 8002a3e:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f7ff fd0c 	bl	8002460 <SH1106_printChar>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a50:	4413      	add	r3, r2
 8002a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (*--pStr)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e9      	bne.n	8002a38 <SH1106_printInt+0x90>

    return (p_x - x);
 8002a64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	b2db      	uxtb	r3, r3
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3728      	adds	r7, #40	; 0x28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	66666667 	.word	0x66666667

08002a7c <SH1106_drawBitmap>:
//   pBMP - pointer to array containing bitmap
// note: each '1' bit in the bitmap will be drawn as a pixel
//       each '0' bit in the will not be drawn (transparent bitmap)
// bitmap: one byte per 8 vertical pixels, LSB top, truncate bottom bits
void SH1106_drawBitmap(uint8_t x, uint8_t y, uint8_t w, uint8_t h,
                       const uint8_t *pBMP) {
 8002a7c:	b4b0      	push	{r4, r5, r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4604      	mov	r4, r0
 8002a84:	4608      	mov	r0, r1
 8002a86:	4611      	mov	r1, r2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4623      	mov	r3, r4
 8002a8c:	71fb      	strb	r3, [r7, #7]
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71bb      	strb	r3, [r7, #6]
 8002a92:	460b      	mov	r3, r1
 8002a94:	717b      	strb	r3, [r7, #5]
 8002a96:	4613      	mov	r3, r2
 8002a98:	713b      	strb	r3, [r7, #4]
    uint8_t p_x;
    uint8_t p_y;
    uint8_t tmpCh;
    uint8_t bL;

    p_y = y;
 8002a9a:	79bb      	ldrb	r3, [r7, #6]
 8002a9c:	73bb      	strb	r3, [r7, #14]
    while (p_y < y + h) {
 8002a9e:	e08a      	b.n	8002bb6 <SH1106_drawBitmap+0x13a>
        p_x = x;
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	73fb      	strb	r3, [r7, #15]
        while (p_x < x + w) {
 8002aa4:	e07d      	b.n	8002ba2 <SH1106_drawBitmap+0x126>
            bL = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	733b      	strb	r3, [r7, #12]
            tmpCh = *pBMP++;
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	623a      	str	r2, [r7, #32]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	737b      	strb	r3, [r7, #13]
            if (tmpCh) {
 8002ab4:	7b7b      	ldrb	r3, [r7, #13]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d070      	beq.n	8002b9c <SH1106_drawBitmap+0x120>
                while (bL < 8) {
 8002aba:	e06b      	b.n	8002b94 <SH1106_drawBitmap+0x118>
                    if (tmpCh & 0x01)
 8002abc:	7b7b      	ldrb	r3, [r7, #13]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d058      	beq.n	8002b78 <SH1106_drawBitmap+0xfc>
                        SH1106_pixel(p_x, p_y + bL, SH1106_PixelMode);
 8002ac6:	7bba      	ldrb	r2, [r7, #14]
 8002ac8:	7b3b      	ldrb	r3, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	b2d9      	uxtb	r1, r3
 8002ace:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <SH1106_drawBitmap+0x154>)
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	72fb      	strb	r3, [r7, #11]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	72bb      	strb	r3, [r7, #10]
 8002ada:	4613      	mov	r3, r2
 8002adc:	727b      	strb	r3, [r7, #9]
    if (scr_orientation == SH1106_ORIENT_CW
 8002ade:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <SH1106_drawBitmap+0x158>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d003      	beq.n	8002aee <SH1106_drawBitmap+0x72>
        || scr_orientation == SH1106_ORIENT_CCW) {
 8002ae6:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <SH1106_drawBitmap+0x158>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d10a      	bne.n	8002b04 <SH1106_drawBitmap+0x88>
        offset = ((x >> 3) << 7) + y;
 8002aee:	7afb      	ldrb	r3, [r7, #11]
 8002af0:	08db      	lsrs	r3, r3, #3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	01da      	lsls	r2, r3, #7
 8002af6:	7abb      	ldrb	r3, [r7, #10]
 8002af8:	4413      	add	r3, r2
 8002afa:	461c      	mov	r4, r3
        bpos = x & 0x07;
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	f003 0507 	and.w	r5, r3, #7
 8002b02:	e009      	b.n	8002b18 <SH1106_drawBitmap+0x9c>
        offset = ((y >> 3) << 7) + x;
 8002b04:	7abb      	ldrb	r3, [r7, #10]
 8002b06:	08db      	lsrs	r3, r3, #3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	01da      	lsls	r2, r3, #7
 8002b0c:	7afb      	ldrb	r3, [r7, #11]
 8002b0e:	4413      	add	r3, r2
 8002b10:	461c      	mov	r4, r3
        bpos = y & 0x07;
 8002b12:	7abb      	ldrb	r3, [r7, #10]
 8002b14:	f003 0507 	and.w	r5, r3, #7
    if (offset > ((SCR_W * SCR_H) >> 3)) {
 8002b18:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002b1c:	d82b      	bhi.n	8002b76 <SH1106_drawBitmap+0xfa>
    switch (Mode) {
 8002b1e:	7a7b      	ldrb	r3, [r7, #9]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d002      	beq.n	8002b2a <SH1106_drawBitmap+0xae>
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d00e      	beq.n	8002b46 <SH1106_drawBitmap+0xca>
 8002b28:	e019      	b.n	8002b5e <SH1106_drawBitmap+0xe2>
            vRAM[offset] &= ~(1 << bpos);
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <SH1106_drawBitmap+0x15c>)
 8002b2c:	5d1b      	ldrb	r3, [r3, r4]
 8002b2e:	b25a      	sxtb	r2, r3
 8002b30:	2301      	movs	r3, #1
 8002b32:	40ab      	lsls	r3, r5
 8002b34:	b25b      	sxtb	r3, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	b25b      	sxtb	r3, r3
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	b25b      	sxtb	r3, r3
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <SH1106_drawBitmap+0x15c>)
 8002b42:	551a      	strb	r2, [r3, r4]
            break;
 8002b44:	e018      	b.n	8002b78 <SH1106_drawBitmap+0xfc>
            vRAM[offset] ^= (1 << bpos);
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <SH1106_drawBitmap+0x15c>)
 8002b48:	5d1b      	ldrb	r3, [r3, r4]
 8002b4a:	b25a      	sxtb	r2, r3
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	40ab      	lsls	r3, r5
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	4053      	eors	r3, r2
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <SH1106_drawBitmap+0x15c>)
 8002b5a:	551a      	strb	r2, [r3, r4]
            break;
 8002b5c:	e00c      	b.n	8002b78 <SH1106_drawBitmap+0xfc>
            vRAM[offset] |= (1 << bpos);
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <SH1106_drawBitmap+0x15c>)
 8002b60:	5d1b      	ldrb	r3, [r3, r4]
 8002b62:	b25a      	sxtb	r2, r3
 8002b64:	2301      	movs	r3, #1
 8002b66:	40ab      	lsls	r3, r5
 8002b68:	b25b      	sxtb	r3, r3
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <SH1106_drawBitmap+0x15c>)
 8002b72:	551a      	strb	r2, [r3, r4]
            break;
 8002b74:	e000      	b.n	8002b78 <SH1106_drawBitmap+0xfc>
        return;
 8002b76:	bf00      	nop
                    tmpCh >>= 1;
 8002b78:	7b7b      	ldrb	r3, [r7, #13]
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	737b      	strb	r3, [r7, #13]
                    if (tmpCh) {
 8002b7e:	7b7b      	ldrb	r3, [r7, #13]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <SH1106_drawBitmap+0x110>
                        bL++;
 8002b84:	7b3b      	ldrb	r3, [r7, #12]
 8002b86:	3301      	adds	r3, #1
 8002b88:	733b      	strb	r3, [r7, #12]
 8002b8a:	e003      	b.n	8002b94 <SH1106_drawBitmap+0x118>
                    } else {
                        p_x++;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
                        break;
 8002b92:	e006      	b.n	8002ba2 <SH1106_drawBitmap+0x126>
                while (bL < 8) {
 8002b94:	7b3b      	ldrb	r3, [r7, #12]
 8002b96:	2b07      	cmp	r3, #7
 8002b98:	d990      	bls.n	8002abc <SH1106_drawBitmap+0x40>
 8002b9a:	e002      	b.n	8002ba2 <SH1106_drawBitmap+0x126>
                    }
                }
            } else {
                p_x++;
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
        while (p_x < x + w) {
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	79f9      	ldrb	r1, [r7, #7]
 8002ba6:	797b      	ldrb	r3, [r7, #5]
 8002ba8:	440b      	add	r3, r1
 8002baa:	429a      	cmp	r2, r3
 8002bac:	f6ff af7b 	blt.w	8002aa6 <SH1106_drawBitmap+0x2a>
            }
        }
        p_y += 8;
 8002bb0:	7bbb      	ldrb	r3, [r7, #14]
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	73bb      	strb	r3, [r7, #14]
    while (p_y < y + h) {
 8002bb6:	7bba      	ldrb	r2, [r7, #14]
 8002bb8:	79b9      	ldrb	r1, [r7, #6]
 8002bba:	793b      	ldrb	r3, [r7, #4]
 8002bbc:	440b      	add	r3, r1
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	f6ff af6e 	blt.w	8002aa0 <SH1106_drawBitmap+0x24>
    }
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bcb0      	pop	{r4, r5, r7}
 8002bce:	4770      	bx	lr
 8002bd0:	200002cd 	.word	0x200002cd
 8002bd4:	200002ce 	.word	0x200002ce
 8002bd8:	200002d0 	.word	0x200002d0

08002bdc <SH1106_drawBitmapFullscreen>:

void SH1106_drawBitmapFullscreen(const uint8_t *pBMP) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
    memcpy(vRAM, pBMP, (SCR_W * SCR_H) >> 3);
 8002be4:	4a06      	ldr	r2, [pc, #24]	; (8002c00 <SH1106_drawBitmapFullscreen+0x24>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f002 fd67 	bl	80056c4 <memcpy>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200002d0 	.word	0x200002d0

08002c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_Init+0x28>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a07      	ldr	r2, [pc, #28]	; (8002c2c <HAL_Init+0x28>)
 8002c0e:	f043 0310 	orr.w	r3, r3, #16
 8002c12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c14:	2003      	movs	r0, #3
 8002c16:	f000 fd4d 	bl	80036b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c1a:	200f      	movs	r0, #15
 8002c1c:	f7fe feea 	bl	80019f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c20:	f7fe feae 	bl	8001980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40022000 	.word	0x40022000

08002c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_IncTick+0x1c>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_IncTick+0x20>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4413      	add	r3, r2
 8002c40:	4a03      	ldr	r2, [pc, #12]	; (8002c50 <HAL_IncTick+0x20>)
 8002c42:	6013      	str	r3, [r2, #0]
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	20000138 	.word	0x20000138
 8002c50:	20000750 	.word	0x20000750

08002c54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return uwTick;
 8002c58:	4b02      	ldr	r3, [pc, #8]	; (8002c64 <HAL_GetTick+0x10>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	20000750 	.word	0x20000750

08002c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c70:	f7ff fff0 	bl	8002c54 <HAL_GetTick>
 8002c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c80:	d005      	beq.n	8002c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <HAL_Delay+0x44>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c8e:	bf00      	nop
 8002c90:	f7ff ffe0 	bl	8002c54 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d8f7      	bhi.n	8002c90 <HAL_Delay+0x28>
  {
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000138 	.word	0x20000138

08002cb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0be      	b.n	8002e50 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fd fd26 	bl	8000740 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fbf1 	bl	80034dc <ADC_ConversionStop_Disable>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 8099 	bne.w	8002e3e <HAL_ADC_Init+0x18e>
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f040 8095 	bne.w	8002e3e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d1c:	f023 0302 	bic.w	r3, r3, #2
 8002d20:	f043 0202 	orr.w	r2, r3, #2
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7b1b      	ldrb	r3, [r3, #12]
 8002d36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d48:	d003      	beq.n	8002d52 <HAL_ADC_Init+0xa2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d102      	bne.n	8002d58 <HAL_ADC_Init+0xa8>
 8002d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d56:	e000      	b.n	8002d5a <HAL_ADC_Init+0xaa>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7d1b      	ldrb	r3, [r3, #20]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d119      	bne.n	8002d9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	7b1b      	ldrb	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	035a      	lsls	r2, r3, #13
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	e00b      	b.n	8002d9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	f043 0201 	orr.w	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <HAL_ADC_Init+0x1a8>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dcc:	d003      	beq.n	8002dd6 <HAL_ADC_Init+0x126>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d104      	bne.n	8002de0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	051b      	lsls	r3, r3, #20
 8002dde:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_ADC_Init+0x1ac>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d10b      	bne.n	8002e1c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	f043 0201 	orr.w	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e1a:	e018      	b.n	8002e4e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	f023 0312 	bic.w	r3, r3, #18
 8002e24:	f043 0210 	orr.w	r2, r3, #16
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e3c:	e007      	b.n	8002e4e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	f043 0210 	orr.w	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	ffe1f7fd 	.word	0xffe1f7fd
 8002e5c:	ff1f0efe 	.word	0xff1f0efe

08002e60 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_Start+0x1a>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e098      	b.n	8002fac <HAL_ADC_Start+0x14c>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fad0 	bl	8003428 <ADC_Enable>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f040 8087 	bne.w	8002fa2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a41      	ldr	r2, [pc, #260]	; (8002fb4 <HAL_ADC_Start+0x154>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d105      	bne.n	8002ebe <HAL_ADC_Start+0x5e>
 8002eb2:	4b41      	ldr	r3, [pc, #260]	; (8002fb8 <HAL_ADC_Start+0x158>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d115      	bne.n	8002eea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d026      	beq.n	8002f26 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ee0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ee8:	e01d      	b.n	8002f26 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <HAL_ADC_Start+0x158>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d004      	beq.n	8002f0a <HAL_ADC_Start+0xaa>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2b      	ldr	r2, [pc, #172]	; (8002fb4 <HAL_ADC_Start+0x154>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d10d      	bne.n	8002f26 <HAL_ADC_Start+0xc6>
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_ADC_Start+0x158>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	f023 0206 	bic.w	r2, r3, #6
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f3e:	e002      	b.n	8002f46 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f06f 0202 	mvn.w	r2, #2
 8002f56:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f62:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f66:	d113      	bne.n	8002f90 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f6c:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <HAL_ADC_Start+0x154>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d105      	bne.n	8002f7e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f72:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_ADC_Start+0x158>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d108      	bne.n	8002f90 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	e00c      	b.n	8002faa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	e003      	b.n	8002faa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40012800 	.word	0x40012800
 8002fb8:	40012400 	.word	0x40012400

08002fbc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_Stop+0x1a>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e01a      	b.n	800300c <HAL_ADC_Stop+0x50>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa7c 	bl	80034dc <ADC_ConversionStop_Disable>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003014:	b590      	push	{r4, r7, lr}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800302a:	f7ff fe13 	bl	8002c54 <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	f043 0220 	orr.w	r2, r3, #32
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e0d3      	b.n	80031fe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d131      	bne.n	80030c8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800306e:	2b00      	cmp	r3, #0
 8003070:	d12a      	bne.n	80030c8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003072:	e021      	b.n	80030b8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d01d      	beq.n	80030b8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_ADC_PollForConversion+0x7e>
 8003082:	f7ff fde7 	bl	8002c54 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d212      	bcs.n	80030b8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10b      	bne.n	80030b8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	f043 0204 	orr.w	r2, r3, #4
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e0a2      	b.n	80031fe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0d6      	beq.n	8003074 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80030c6:	e070      	b.n	80031aa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80030c8:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <HAL_ADC_PollForConversion+0x1f4>)
 80030ca:	681c      	ldr	r4, [r3, #0]
 80030cc:	2002      	movs	r0, #2
 80030ce:	f001 fe1b 	bl	8004d08 <HAL_RCCEx_GetPeriphCLKFreq>
 80030d2:	4603      	mov	r3, r0
 80030d4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6919      	ldr	r1, [r3, #16]
 80030de:	4b4b      	ldr	r3, [pc, #300]	; (800320c <HAL_ADC_PollForConversion+0x1f8>)
 80030e0:	400b      	ands	r3, r1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d118      	bne.n	8003118 <HAL_ADC_PollForConversion+0x104>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68d9      	ldr	r1, [r3, #12]
 80030ec:	4b48      	ldr	r3, [pc, #288]	; (8003210 <HAL_ADC_PollForConversion+0x1fc>)
 80030ee:	400b      	ands	r3, r1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d111      	bne.n	8003118 <HAL_ADC_PollForConversion+0x104>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6919      	ldr	r1, [r3, #16]
 80030fa:	4b46      	ldr	r3, [pc, #280]	; (8003214 <HAL_ADC_PollForConversion+0x200>)
 80030fc:	400b      	ands	r3, r1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d108      	bne.n	8003114 <HAL_ADC_PollForConversion+0x100>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68d9      	ldr	r1, [r3, #12]
 8003108:	4b43      	ldr	r3, [pc, #268]	; (8003218 <HAL_ADC_PollForConversion+0x204>)
 800310a:	400b      	ands	r3, r1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_ADC_PollForConversion+0x100>
 8003110:	2314      	movs	r3, #20
 8003112:	e020      	b.n	8003156 <HAL_ADC_PollForConversion+0x142>
 8003114:	2329      	movs	r3, #41	; 0x29
 8003116:	e01e      	b.n	8003156 <HAL_ADC_PollForConversion+0x142>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6919      	ldr	r1, [r3, #16]
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_ADC_PollForConversion+0x200>)
 8003120:	400b      	ands	r3, r1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_ADC_PollForConversion+0x120>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68d9      	ldr	r1, [r3, #12]
 800312c:	4b3a      	ldr	r3, [pc, #232]	; (8003218 <HAL_ADC_PollForConversion+0x204>)
 800312e:	400b      	ands	r3, r1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00d      	beq.n	8003150 <HAL_ADC_PollForConversion+0x13c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6919      	ldr	r1, [r3, #16]
 800313a:	4b38      	ldr	r3, [pc, #224]	; (800321c <HAL_ADC_PollForConversion+0x208>)
 800313c:	400b      	ands	r3, r1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d108      	bne.n	8003154 <HAL_ADC_PollForConversion+0x140>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68d9      	ldr	r1, [r3, #12]
 8003148:	4b34      	ldr	r3, [pc, #208]	; (800321c <HAL_ADC_PollForConversion+0x208>)
 800314a:	400b      	ands	r3, r1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_PollForConversion+0x140>
 8003150:	2354      	movs	r3, #84	; 0x54
 8003152:	e000      	b.n	8003156 <HAL_ADC_PollForConversion+0x142>
 8003154:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800315c:	e021      	b.n	80031a2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d01a      	beq.n	800319c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <HAL_ADC_PollForConversion+0x168>
 800316c:	f7ff fd72 	bl	8002c54 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d20f      	bcs.n	800319c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	429a      	cmp	r2, r3
 8003182:	d90b      	bls.n	800319c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e030      	b.n	80031fe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3301      	adds	r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d8d9      	bhi.n	800315e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f06f 0212 	mvn.w	r2, #18
 80031b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031ce:	d115      	bne.n	80031fc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d111      	bne.n	80031fc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	bd90      	pop	{r4, r7, pc}
 8003206:	bf00      	nop
 8003208:	200000a8 	.word	0x200000a8
 800320c:	24924924 	.word	0x24924924
 8003210:	00924924 	.word	0x00924924
 8003214:	12492492 	.word	0x12492492
 8003218:	00492492 	.word	0x00492492
 800321c:	00249249 	.word	0x00249249

08003220 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x20>
 8003254:	2302      	movs	r3, #2
 8003256:	e0dc      	b.n	8003412 <HAL_ADC_ConfigChannel+0x1da>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b06      	cmp	r3, #6
 8003266:	d81c      	bhi.n	80032a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	3b05      	subs	r3, #5
 800327a:	221f      	movs	r2, #31
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	4019      	ands	r1, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	3b05      	subs	r3, #5
 8003294:	fa00 f203 	lsl.w	r2, r0, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	635a      	str	r2, [r3, #52]	; 0x34
 80032a0:	e03c      	b.n	800331c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b0c      	cmp	r3, #12
 80032a8:	d81c      	bhi.n	80032e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	3b23      	subs	r3, #35	; 0x23
 80032bc:	221f      	movs	r2, #31
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	4019      	ands	r1, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	3b23      	subs	r3, #35	; 0x23
 80032d6:	fa00 f203 	lsl.w	r2, r0, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
 80032e2:	e01b      	b.n	800331c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	3b41      	subs	r3, #65	; 0x41
 80032f6:	221f      	movs	r2, #31
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4019      	ands	r1, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	3b41      	subs	r3, #65	; 0x41
 8003310:	fa00 f203 	lsl.w	r2, r0, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b09      	cmp	r3, #9
 8003322:	d91c      	bls.n	800335e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68d9      	ldr	r1, [r3, #12]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	3b1e      	subs	r3, #30
 8003336:	2207      	movs	r2, #7
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	4019      	ands	r1, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6898      	ldr	r0, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	3b1e      	subs	r3, #30
 8003350:	fa00 f203 	lsl.w	r2, r0, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	60da      	str	r2, [r3, #12]
 800335c:	e019      	b.n	8003392 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6919      	ldr	r1, [r3, #16]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	2207      	movs	r2, #7
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	4019      	ands	r1, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6898      	ldr	r0, [r3, #8]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	fa00 f203 	lsl.w	r2, r0, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b10      	cmp	r3, #16
 8003398:	d003      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800339e:	2b11      	cmp	r3, #17
 80033a0:	d132      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_ADC_ConfigChannel+0x1e4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d125      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d126      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80033c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b10      	cmp	r3, #16
 80033d0:	d11a      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033d2:	4b13      	ldr	r3, [pc, #76]	; (8003420 <HAL_ADC_ConfigChannel+0x1e8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a13      	ldr	r2, [pc, #76]	; (8003424 <HAL_ADC_ConfigChannel+0x1ec>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	0c9a      	lsrs	r2, r3, #18
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033e8:	e002      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f9      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x1b2>
 80033f6:	e007      	b.n	8003408 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	40012400 	.word	0x40012400
 8003420:	200000a8 	.word	0x200000a8
 8003424:	431bde83 	.word	0x431bde83

08003428 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d040      	beq.n	80034c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003456:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <ADC_Enable+0xac>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <ADC_Enable+0xb0>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	0c9b      	lsrs	r3, r3, #18
 8003462:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003464:	e002      	b.n	800346c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3b01      	subs	r3, #1
 800346a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f9      	bne.n	8003466 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003472:	f7ff fbef 	bl	8002c54 <HAL_GetTick>
 8003476:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003478:	e01f      	b.n	80034ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800347a:	f7ff fbeb 	bl	8002c54 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d918      	bls.n	80034ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d011      	beq.n	80034ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	f043 0210 	orr.w	r2, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	f043 0201 	orr.w	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e007      	b.n	80034ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d1d8      	bne.n	800347a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200000a8 	.word	0x200000a8
 80034d8:	431bde83 	.word	0x431bde83

080034dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d12e      	bne.n	8003554 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003506:	f7ff fba5 	bl	8002c54 <HAL_GetTick>
 800350a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800350c:	e01b      	b.n	8003546 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800350e:	f7ff fba1 	bl	8002c54 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d914      	bls.n	8003546 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10d      	bne.n	8003546 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	f043 0210 	orr.w	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e007      	b.n	8003556 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d0dc      	beq.n	800350e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800357c:	4013      	ands	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800358c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003592:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	60d3      	str	r3, [r2, #12]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	f003 0307 	and.w	r3, r3, #7
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	db0b      	blt.n	80035ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	f003 021f 	and.w	r2, r3, #31
 80035dc:	4906      	ldr	r1, [pc, #24]	; (80035f8 <__NVIC_EnableIRQ+0x34>)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2001      	movs	r0, #1
 80035e6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	e000e100 	.word	0xe000e100

080035fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	6039      	str	r1, [r7, #0]
 8003606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	2b00      	cmp	r3, #0
 800360e:	db0a      	blt.n	8003626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	490c      	ldr	r1, [pc, #48]	; (8003648 <__NVIC_SetPriority+0x4c>)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	440b      	add	r3, r1
 8003620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003624:	e00a      	b.n	800363c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4908      	ldr	r1, [pc, #32]	; (800364c <__NVIC_SetPriority+0x50>)
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	3b04      	subs	r3, #4
 8003634:	0112      	lsls	r2, r2, #4
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	440b      	add	r3, r1
 800363a:	761a      	strb	r2, [r3, #24]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000e100 	.word	0xe000e100
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f1c3 0307 	rsb	r3, r3, #7
 800366a:	2b04      	cmp	r3, #4
 800366c:	bf28      	it	cs
 800366e:	2304      	movcs	r3, #4
 8003670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3304      	adds	r3, #4
 8003676:	2b06      	cmp	r3, #6
 8003678:	d902      	bls.n	8003680 <NVIC_EncodePriority+0x30>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3b03      	subs	r3, #3
 800367e:	e000      	b.n	8003682 <NVIC_EncodePriority+0x32>
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003684:	f04f 32ff 	mov.w	r2, #4294967295
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43da      	mvns	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	401a      	ands	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003698:	f04f 31ff 	mov.w	r1, #4294967295
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	fa01 f303 	lsl.w	r3, r1, r3
 80036a2:	43d9      	mvns	r1, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	4313      	orrs	r3, r2
         );
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3724      	adds	r7, #36	; 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ff4f 	bl	8003560 <__NVIC_SetPriorityGrouping>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b086      	sub	sp, #24
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036dc:	f7ff ff64 	bl	80035a8 <__NVIC_GetPriorityGrouping>
 80036e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f7ff ffb2 	bl	8003650 <NVIC_EncodePriority>
 80036ec:	4602      	mov	r2, r0
 80036ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff81 	bl	80035fc <__NVIC_SetPriority>
}
 80036fa:	bf00      	nop
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800370c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff57 	bl	80035c4 <__NVIC_EnableIRQ>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003720:	b480      	push	{r7}
 8003722:	b08b      	sub	sp, #44	; 0x2c
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800372e:	2300      	movs	r3, #0
 8003730:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003732:	e169      	b.n	8003a08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003734:	2201      	movs	r2, #1
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	429a      	cmp	r2, r3
 800374e:	f040 8158 	bne.w	8003a02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4a9a      	ldr	r2, [pc, #616]	; (80039c0 <HAL_GPIO_Init+0x2a0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d05e      	beq.n	800381a <HAL_GPIO_Init+0xfa>
 800375c:	4a98      	ldr	r2, [pc, #608]	; (80039c0 <HAL_GPIO_Init+0x2a0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d875      	bhi.n	800384e <HAL_GPIO_Init+0x12e>
 8003762:	4a98      	ldr	r2, [pc, #608]	; (80039c4 <HAL_GPIO_Init+0x2a4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d058      	beq.n	800381a <HAL_GPIO_Init+0xfa>
 8003768:	4a96      	ldr	r2, [pc, #600]	; (80039c4 <HAL_GPIO_Init+0x2a4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d86f      	bhi.n	800384e <HAL_GPIO_Init+0x12e>
 800376e:	4a96      	ldr	r2, [pc, #600]	; (80039c8 <HAL_GPIO_Init+0x2a8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d052      	beq.n	800381a <HAL_GPIO_Init+0xfa>
 8003774:	4a94      	ldr	r2, [pc, #592]	; (80039c8 <HAL_GPIO_Init+0x2a8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d869      	bhi.n	800384e <HAL_GPIO_Init+0x12e>
 800377a:	4a94      	ldr	r2, [pc, #592]	; (80039cc <HAL_GPIO_Init+0x2ac>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d04c      	beq.n	800381a <HAL_GPIO_Init+0xfa>
 8003780:	4a92      	ldr	r2, [pc, #584]	; (80039cc <HAL_GPIO_Init+0x2ac>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d863      	bhi.n	800384e <HAL_GPIO_Init+0x12e>
 8003786:	4a92      	ldr	r2, [pc, #584]	; (80039d0 <HAL_GPIO_Init+0x2b0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d046      	beq.n	800381a <HAL_GPIO_Init+0xfa>
 800378c:	4a90      	ldr	r2, [pc, #576]	; (80039d0 <HAL_GPIO_Init+0x2b0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d85d      	bhi.n	800384e <HAL_GPIO_Init+0x12e>
 8003792:	2b12      	cmp	r3, #18
 8003794:	d82a      	bhi.n	80037ec <HAL_GPIO_Init+0xcc>
 8003796:	2b12      	cmp	r3, #18
 8003798:	d859      	bhi.n	800384e <HAL_GPIO_Init+0x12e>
 800379a:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <HAL_GPIO_Init+0x80>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	0800381b 	.word	0x0800381b
 80037a4:	080037f5 	.word	0x080037f5
 80037a8:	08003807 	.word	0x08003807
 80037ac:	08003849 	.word	0x08003849
 80037b0:	0800384f 	.word	0x0800384f
 80037b4:	0800384f 	.word	0x0800384f
 80037b8:	0800384f 	.word	0x0800384f
 80037bc:	0800384f 	.word	0x0800384f
 80037c0:	0800384f 	.word	0x0800384f
 80037c4:	0800384f 	.word	0x0800384f
 80037c8:	0800384f 	.word	0x0800384f
 80037cc:	0800384f 	.word	0x0800384f
 80037d0:	0800384f 	.word	0x0800384f
 80037d4:	0800384f 	.word	0x0800384f
 80037d8:	0800384f 	.word	0x0800384f
 80037dc:	0800384f 	.word	0x0800384f
 80037e0:	0800384f 	.word	0x0800384f
 80037e4:	080037fd 	.word	0x080037fd
 80037e8:	08003811 	.word	0x08003811
 80037ec:	4a79      	ldr	r2, [pc, #484]	; (80039d4 <HAL_GPIO_Init+0x2b4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037f2:	e02c      	b.n	800384e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	623b      	str	r3, [r7, #32]
          break;
 80037fa:	e029      	b.n	8003850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	3304      	adds	r3, #4
 8003802:	623b      	str	r3, [r7, #32]
          break;
 8003804:	e024      	b.n	8003850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	3308      	adds	r3, #8
 800380c:	623b      	str	r3, [r7, #32]
          break;
 800380e:	e01f      	b.n	8003850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	330c      	adds	r3, #12
 8003816:	623b      	str	r3, [r7, #32]
          break;
 8003818:	e01a      	b.n	8003850 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003822:	2304      	movs	r3, #4
 8003824:	623b      	str	r3, [r7, #32]
          break;
 8003826:	e013      	b.n	8003850 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d105      	bne.n	800383c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003830:	2308      	movs	r3, #8
 8003832:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	611a      	str	r2, [r3, #16]
          break;
 800383a:	e009      	b.n	8003850 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800383c:	2308      	movs	r3, #8
 800383e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	615a      	str	r2, [r3, #20]
          break;
 8003846:	e003      	b.n	8003850 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003848:	2300      	movs	r3, #0
 800384a:	623b      	str	r3, [r7, #32]
          break;
 800384c:	e000      	b.n	8003850 <HAL_GPIO_Init+0x130>
          break;
 800384e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2bff      	cmp	r3, #255	; 0xff
 8003854:	d801      	bhi.n	800385a <HAL_GPIO_Init+0x13a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	e001      	b.n	800385e <HAL_GPIO_Init+0x13e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2bff      	cmp	r3, #255	; 0xff
 8003864:	d802      	bhi.n	800386c <HAL_GPIO_Init+0x14c>
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	e002      	b.n	8003872 <HAL_GPIO_Init+0x152>
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	3b08      	subs	r3, #8
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	210f      	movs	r1, #15
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	401a      	ands	r2, r3
 8003884:	6a39      	ldr	r1, [r7, #32]
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	431a      	orrs	r2, r3
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80b1 	beq.w	8003a02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038a0:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <HAL_GPIO_Init+0x2b8>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	4a4c      	ldr	r2, [pc, #304]	; (80039d8 <HAL_GPIO_Init+0x2b8>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6193      	str	r3, [r2, #24]
 80038ac:	4b4a      	ldr	r3, [pc, #296]	; (80039d8 <HAL_GPIO_Init+0x2b8>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038b8:	4a48      	ldr	r2, [pc, #288]	; (80039dc <HAL_GPIO_Init+0x2bc>)
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	089b      	lsrs	r3, r3, #2
 80038be:	3302      	adds	r3, #2
 80038c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	220f      	movs	r2, #15
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a40      	ldr	r2, [pc, #256]	; (80039e0 <HAL_GPIO_Init+0x2c0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <HAL_GPIO_Init+0x1ec>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a3f      	ldr	r2, [pc, #252]	; (80039e4 <HAL_GPIO_Init+0x2c4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00d      	beq.n	8003908 <HAL_GPIO_Init+0x1e8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a3e      	ldr	r2, [pc, #248]	; (80039e8 <HAL_GPIO_Init+0x2c8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d007      	beq.n	8003904 <HAL_GPIO_Init+0x1e4>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a3d      	ldr	r2, [pc, #244]	; (80039ec <HAL_GPIO_Init+0x2cc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <HAL_GPIO_Init+0x1e0>
 80038fc:	2303      	movs	r3, #3
 80038fe:	e006      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 8003900:	2304      	movs	r3, #4
 8003902:	e004      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 8003904:	2302      	movs	r3, #2
 8003906:	e002      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 800390c:	2300      	movs	r3, #0
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	f002 0203 	and.w	r2, r2, #3
 8003914:	0092      	lsls	r2, r2, #2
 8003916:	4093      	lsls	r3, r2
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800391e:	492f      	ldr	r1, [pc, #188]	; (80039dc <HAL_GPIO_Init+0x2bc>)
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	3302      	adds	r3, #2
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d006      	beq.n	8003946 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003938:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	492c      	ldr	r1, [pc, #176]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]
 8003944:	e006      	b.n	8003954 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003946:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	43db      	mvns	r3, r3
 800394e:	4928      	ldr	r1, [pc, #160]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003950:	4013      	ands	r3, r2
 8003952:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d006      	beq.n	800396e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003960:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	4922      	ldr	r1, [pc, #136]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
 800396c:	e006      	b.n	800397c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800396e:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	43db      	mvns	r3, r3
 8003976:	491e      	ldr	r1, [pc, #120]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003978:	4013      	ands	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003988:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	4918      	ldr	r1, [pc, #96]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	608b      	str	r3, [r1, #8]
 8003994:	e006      	b.n	80039a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003996:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	43db      	mvns	r3, r3
 800399e:	4914      	ldr	r1, [pc, #80]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d021      	beq.n	80039f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	490e      	ldr	r1, [pc, #56]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60cb      	str	r3, [r1, #12]
 80039bc:	e021      	b.n	8003a02 <HAL_GPIO_Init+0x2e2>
 80039be:	bf00      	nop
 80039c0:	10320000 	.word	0x10320000
 80039c4:	10310000 	.word	0x10310000
 80039c8:	10220000 	.word	0x10220000
 80039cc:	10210000 	.word	0x10210000
 80039d0:	10120000 	.word	0x10120000
 80039d4:	10110000 	.word	0x10110000
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40010000 	.word	0x40010000
 80039e0:	40010800 	.word	0x40010800
 80039e4:	40010c00 	.word	0x40010c00
 80039e8:	40011000 	.word	0x40011000
 80039ec:	40011400 	.word	0x40011400
 80039f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_GPIO_Init+0x304>)
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	4909      	ldr	r1, [pc, #36]	; (8003a24 <HAL_GPIO_Init+0x304>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	3301      	adds	r3, #1
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f47f ae8e 	bne.w	8003734 <HAL_GPIO_Init+0x14>
  }
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	372c      	adds	r7, #44	; 0x2c
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	40010400 	.word	0x40010400

08003a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	807b      	strh	r3, [r7, #2]
 8003a34:	4613      	mov	r3, r2
 8003a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a38:	787b      	ldrb	r3, [r7, #1]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a44:	e003      	b.n	8003a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a46:	887b      	ldrh	r3, [r7, #2]
 8003a48:	041a      	lsls	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	611a      	str	r2, [r3, #16]
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
   HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fd f877 	bl	8000b58 <HAL_GPIO_EXTI_Callback>

}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e12b      	b.n	8003cde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fd f81e 	bl	8000adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2224      	movs	r2, #36	; 0x24
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0201 	bic.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ad6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ad8:	f000 ffea 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 8003adc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4a81      	ldr	r2, [pc, #516]	; (8003ce8 <HAL_I2C_Init+0x274>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d807      	bhi.n	8003af8 <HAL_I2C_Init+0x84>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4a80      	ldr	r2, [pc, #512]	; (8003cec <HAL_I2C_Init+0x278>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	bf94      	ite	ls
 8003af0:	2301      	movls	r3, #1
 8003af2:	2300      	movhi	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e006      	b.n	8003b06 <HAL_I2C_Init+0x92>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a7d      	ldr	r2, [pc, #500]	; (8003cf0 <HAL_I2C_Init+0x27c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	bf94      	ite	ls
 8003b00:	2301      	movls	r3, #1
 8003b02:	2300      	movhi	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e0e7      	b.n	8003cde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4a78      	ldr	r2, [pc, #480]	; (8003cf4 <HAL_I2C_Init+0x280>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	0c9b      	lsrs	r3, r3, #18
 8003b18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4a6a      	ldr	r2, [pc, #424]	; (8003ce8 <HAL_I2C_Init+0x274>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d802      	bhi.n	8003b48 <HAL_I2C_Init+0xd4>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	3301      	adds	r3, #1
 8003b46:	e009      	b.n	8003b5c <HAL_I2C_Init+0xe8>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	4a69      	ldr	r2, [pc, #420]	; (8003cf8 <HAL_I2C_Init+0x284>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	099b      	lsrs	r3, r3, #6
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	495c      	ldr	r1, [pc, #368]	; (8003ce8 <HAL_I2C_Init+0x274>)
 8003b78:	428b      	cmp	r3, r1
 8003b7a:	d819      	bhi.n	8003bb0 <HAL_I2C_Init+0x13c>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1e59      	subs	r1, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b8a:	1c59      	adds	r1, r3, #1
 8003b8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b90:	400b      	ands	r3, r1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_I2C_Init+0x138>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1e59      	subs	r1, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003baa:	e051      	b.n	8003c50 <HAL_I2C_Init+0x1dc>
 8003bac:	2304      	movs	r3, #4
 8003bae:	e04f      	b.n	8003c50 <HAL_I2C_Init+0x1dc>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d111      	bne.n	8003bdc <HAL_I2C_Init+0x168>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1e58      	subs	r0, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	440b      	add	r3, r1
 8003bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e012      	b.n	8003c02 <HAL_I2C_Init+0x18e>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1e58      	subs	r0, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	0099      	lsls	r1, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_I2C_Init+0x196>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e022      	b.n	8003c50 <HAL_I2C_Init+0x1dc>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10e      	bne.n	8003c30 <HAL_I2C_Init+0x1bc>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1e58      	subs	r0, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6859      	ldr	r1, [r3, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	440b      	add	r3, r1
 8003c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c24:	3301      	adds	r3, #1
 8003c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2e:	e00f      	b.n	8003c50 <HAL_I2C_Init+0x1dc>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1e58      	subs	r0, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	0099      	lsls	r1, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c46:	3301      	adds	r3, #1
 8003c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	6809      	ldr	r1, [r1, #0]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69da      	ldr	r2, [r3, #28]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6911      	ldr	r1, [r2, #16]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68d2      	ldr	r2, [r2, #12]
 8003c8a:	4311      	orrs	r1, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	000186a0 	.word	0x000186a0
 8003cec:	001e847f 	.word	0x001e847f
 8003cf0:	003d08ff 	.word	0x003d08ff
 8003cf4:	431bde83 	.word	0x431bde83
 8003cf8:	10624dd3 	.word	0x10624dd3

08003cfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	607a      	str	r2, [r7, #4]
 8003d06:	461a      	mov	r2, r3
 8003d08:	460b      	mov	r3, r1
 8003d0a:	817b      	strh	r3, [r7, #10]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d10:	f7fe ffa0 	bl	8002c54 <HAL_GetTick>
 8003d14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	f040 80e0 	bne.w	8003ee4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	2319      	movs	r3, #25
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4970      	ldr	r1, [pc, #448]	; (8003ef0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f964 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e0d3      	b.n	8003ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_I2C_Master_Transmit+0x50>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e0cc      	b.n	8003ee6 <HAL_I2C_Master_Transmit+0x1ea>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d007      	beq.n	8003d72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0201 	orr.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2221      	movs	r2, #33	; 0x21
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2210      	movs	r2, #16
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	893a      	ldrh	r2, [r7, #8]
 8003da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4a50      	ldr	r2, [pc, #320]	; (8003ef4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003db2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003db4:	8979      	ldrh	r1, [r7, #10]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	6a3a      	ldr	r2, [r7, #32]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f89c 	bl	8003ef8 <I2C_MasterRequestWrite>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e08d      	b.n	8003ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003de0:	e066      	b.n	8003eb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	6a39      	ldr	r1, [r7, #32]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f9de 	bl	80041a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d107      	bne.n	8003e0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e06b      	b.n	8003ee6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	781a      	ldrb	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d11b      	bne.n	8003e84 <HAL_I2C_Master_Transmit+0x188>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d017      	beq.n	8003e84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	6a39      	ldr	r1, [r7, #32]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f9ce 	bl	800422a <I2C_WaitOnBTFFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00d      	beq.n	8003eb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d107      	bne.n	8003eac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e01a      	b.n	8003ee6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d194      	bne.n	8003de2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e000      	b.n	8003ee6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
  }
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	00100002 	.word	0x00100002
 8003ef4:	ffff0000 	.word	0xffff0000

08003ef8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	460b      	mov	r3, r1
 8003f06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d006      	beq.n	8003f22 <I2C_MasterRequestWrite+0x2a>
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d003      	beq.n	8003f22 <I2C_MasterRequestWrite+0x2a>
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f20:	d108      	bne.n	8003f34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e00b      	b.n	8003f4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	2b12      	cmp	r3, #18
 8003f3a:	d107      	bne.n	8003f4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f84f 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00d      	beq.n	8003f80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f72:	d103      	bne.n	8003f7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e035      	b.n	8003fec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f88:	d108      	bne.n	8003f9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f8a:	897b      	ldrh	r3, [r7, #10]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f98:	611a      	str	r2, [r3, #16]
 8003f9a:	e01b      	b.n	8003fd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f9c:	897b      	ldrh	r3, [r7, #10]
 8003f9e:	11db      	asrs	r3, r3, #7
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f003 0306 	and.w	r3, r3, #6
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f063 030f 	orn	r3, r3, #15
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	490e      	ldr	r1, [pc, #56]	; (8003ff4 <I2C_MasterRequestWrite+0xfc>)
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f875 	bl	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e010      	b.n	8003fec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fca:	897b      	ldrh	r3, [r7, #10]
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	4907      	ldr	r1, [pc, #28]	; (8003ff8 <I2C_MasterRequestWrite+0x100>)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f865 	bl	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	00010008 	.word	0x00010008
 8003ff8:	00010002 	.word	0x00010002

08003ffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800400c:	e025      	b.n	800405a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d021      	beq.n	800405a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004016:	f7fe fe1d 	bl	8002c54 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d302      	bcc.n	800402c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d116      	bne.n	800405a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f043 0220 	orr.w	r2, r3, #32
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e023      	b.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d10d      	bne.n	8004080 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	43da      	mvns	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4013      	ands	r3, r2
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	e00c      	b.n	800409a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	43da      	mvns	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4013      	ands	r3, r2
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	bf0c      	ite	eq
 8004092:	2301      	moveq	r3, #1
 8004094:	2300      	movne	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	429a      	cmp	r2, r3
 800409e:	d0b6      	beq.n	800400e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
 80040b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040b8:	e051      	b.n	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c8:	d123      	bne.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0204 	orr.w	r2, r3, #4
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e046      	b.n	80041a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d021      	beq.n	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411a:	f7fe fd9b 	bl	8002c54 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d116      	bne.n	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e020      	b.n	80041a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d10c      	bne.n	8004182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf14      	ite	ne
 800417a:	2301      	movne	r3, #1
 800417c:	2300      	moveq	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	e00b      	b.n	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	43da      	mvns	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4013      	ands	r3, r2
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf14      	ite	ne
 8004194:	2301      	movne	r3, #1
 8004196:	2300      	moveq	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d18d      	bne.n	80040ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041b4:	e02d      	b.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f878 	bl	80042ac <I2C_IsAcknowledgeFailed>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e02d      	b.n	8004222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d021      	beq.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ce:	f7fe fd41 	bl	8002c54 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d116      	bne.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f043 0220 	orr.w	r2, r3, #32
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e007      	b.n	8004222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b80      	cmp	r3, #128	; 0x80
 800421e:	d1ca      	bne.n	80041b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004236:	e02d      	b.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f837 	bl	80042ac <I2C_IsAcknowledgeFailed>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e02d      	b.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	d021      	beq.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004250:	f7fe fd00 	bl	8002c54 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	429a      	cmp	r2, r3
 800425e:	d302      	bcc.n	8004266 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d116      	bne.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f043 0220 	orr.w	r2, r3, #32
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e007      	b.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d1ca      	bne.n	8004238 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c2:	d11b      	bne.n	80042fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f043 0204 	orr.w	r2, r3, #4
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e272      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8087 	beq.w	8004436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004328:	4b92      	ldr	r3, [pc, #584]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b04      	cmp	r3, #4
 8004332:	d00c      	beq.n	800434e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004334:	4b8f      	ldr	r3, [pc, #572]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 030c 	and.w	r3, r3, #12
 800433c:	2b08      	cmp	r3, #8
 800433e:	d112      	bne.n	8004366 <HAL_RCC_OscConfig+0x5e>
 8004340:	4b8c      	ldr	r3, [pc, #560]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434c:	d10b      	bne.n	8004366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434e:	4b89      	ldr	r3, [pc, #548]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d06c      	beq.n	8004434 <HAL_RCC_OscConfig+0x12c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d168      	bne.n	8004434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e24c      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436e:	d106      	bne.n	800437e <HAL_RCC_OscConfig+0x76>
 8004370:	4b80      	ldr	r3, [pc, #512]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a7f      	ldr	r2, [pc, #508]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	e02e      	b.n	80043dc <HAL_RCC_OscConfig+0xd4>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x98>
 8004386:	4b7b      	ldr	r3, [pc, #492]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a7a      	ldr	r2, [pc, #488]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 800438c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b78      	ldr	r3, [pc, #480]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a77      	ldr	r2, [pc, #476]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e01d      	b.n	80043dc <HAL_RCC_OscConfig+0xd4>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCC_OscConfig+0xbc>
 80043aa:	4b72      	ldr	r3, [pc, #456]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a71      	ldr	r2, [pc, #452]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	4b6f      	ldr	r3, [pc, #444]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a6e      	ldr	r2, [pc, #440]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e00b      	b.n	80043dc <HAL_RCC_OscConfig+0xd4>
 80043c4:	4b6b      	ldr	r3, [pc, #428]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a6a      	ldr	r2, [pc, #424]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b68      	ldr	r3, [pc, #416]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a67      	ldr	r2, [pc, #412]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d013      	beq.n	800440c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fe fc36 	bl	8002c54 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ec:	f7fe fc32 	bl	8002c54 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	; 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e200      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	4b5d      	ldr	r3, [pc, #372]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0xe4>
 800440a:	e014      	b.n	8004436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fe fc22 	bl	8002c54 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004414:	f7fe fc1e 	bl	8002c54 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e1ec      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004426:	4b53      	ldr	r3, [pc, #332]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x10c>
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d063      	beq.n	800450a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004442:	4b4c      	ldr	r3, [pc, #304]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800444e:	4b49      	ldr	r3, [pc, #292]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b08      	cmp	r3, #8
 8004458:	d11c      	bne.n	8004494 <HAL_RCC_OscConfig+0x18c>
 800445a:	4b46      	ldr	r3, [pc, #280]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d116      	bne.n	8004494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004466:	4b43      	ldr	r3, [pc, #268]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_RCC_OscConfig+0x176>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e1c0      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447e:	4b3d      	ldr	r3, [pc, #244]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4939      	ldr	r1, [pc, #228]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004492:	e03a      	b.n	800450a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800449c:	4b36      	ldr	r3, [pc, #216]	; (8004578 <HAL_RCC_OscConfig+0x270>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a2:	f7fe fbd7 	bl	8002c54 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044aa:	f7fe fbd3 	bl	8002c54 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e1a1      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044bc:	4b2d      	ldr	r3, [pc, #180]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c8:	4b2a      	ldr	r3, [pc, #168]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4927      	ldr	r1, [pc, #156]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]
 80044dc:	e015      	b.n	800450a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044de:	4b26      	ldr	r3, [pc, #152]	; (8004578 <HAL_RCC_OscConfig+0x270>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fe fbb6 	bl	8002c54 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ec:	f7fe fbb2 	bl	8002c54 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e180      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fe:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d03a      	beq.n	800458c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d019      	beq.n	8004552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451e:	4b17      	ldr	r3, [pc, #92]	; (800457c <HAL_RCC_OscConfig+0x274>)
 8004520:	2201      	movs	r2, #1
 8004522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004524:	f7fe fb96 	bl	8002c54 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452c:	f7fe fb92 	bl	8002c54 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e160      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453e:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800454a:	2001      	movs	r0, #1
 800454c:	f000 fb08 	bl	8004b60 <RCC_Delay>
 8004550:	e01c      	b.n	800458c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004552:	4b0a      	ldr	r3, [pc, #40]	; (800457c <HAL_RCC_OscConfig+0x274>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004558:	f7fe fb7c 	bl	8002c54 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455e:	e00f      	b.n	8004580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004560:	f7fe fb78 	bl	8002c54 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d908      	bls.n	8004580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e146      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
 8004578:	42420000 	.word	0x42420000
 800457c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004580:	4b92      	ldr	r3, [pc, #584]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e9      	bne.n	8004560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80a6 	beq.w	80046e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459e:	4b8b      	ldr	r3, [pc, #556]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10d      	bne.n	80045c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045aa:	4b88      	ldr	r3, [pc, #544]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	4a87      	ldr	r2, [pc, #540]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b4:	61d3      	str	r3, [r2, #28]
 80045b6:	4b85      	ldr	r3, [pc, #532]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c6:	4b82      	ldr	r3, [pc, #520]	; (80047d0 <HAL_RCC_OscConfig+0x4c8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d118      	bne.n	8004604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d2:	4b7f      	ldr	r3, [pc, #508]	; (80047d0 <HAL_RCC_OscConfig+0x4c8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7e      	ldr	r2, [pc, #504]	; (80047d0 <HAL_RCC_OscConfig+0x4c8>)
 80045d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045de:	f7fe fb39 	bl	8002c54 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e6:	f7fe fb35 	bl	8002c54 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b64      	cmp	r3, #100	; 0x64
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e103      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f8:	4b75      	ldr	r3, [pc, #468]	; (80047d0 <HAL_RCC_OscConfig+0x4c8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d106      	bne.n	800461a <HAL_RCC_OscConfig+0x312>
 800460c:	4b6f      	ldr	r3, [pc, #444]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	4a6e      	ldr	r2, [pc, #440]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6213      	str	r3, [r2, #32]
 8004618:	e02d      	b.n	8004676 <HAL_RCC_OscConfig+0x36e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10c      	bne.n	800463c <HAL_RCC_OscConfig+0x334>
 8004622:	4b6a      	ldr	r3, [pc, #424]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	4a69      	ldr	r2, [pc, #420]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	6213      	str	r3, [r2, #32]
 800462e:	4b67      	ldr	r3, [pc, #412]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	4a66      	ldr	r2, [pc, #408]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004634:	f023 0304 	bic.w	r3, r3, #4
 8004638:	6213      	str	r3, [r2, #32]
 800463a:	e01c      	b.n	8004676 <HAL_RCC_OscConfig+0x36e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b05      	cmp	r3, #5
 8004642:	d10c      	bne.n	800465e <HAL_RCC_OscConfig+0x356>
 8004644:	4b61      	ldr	r3, [pc, #388]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4a60      	ldr	r2, [pc, #384]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 800464a:	f043 0304 	orr.w	r3, r3, #4
 800464e:	6213      	str	r3, [r2, #32]
 8004650:	4b5e      	ldr	r3, [pc, #376]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	4a5d      	ldr	r2, [pc, #372]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6213      	str	r3, [r2, #32]
 800465c:	e00b      	b.n	8004676 <HAL_RCC_OscConfig+0x36e>
 800465e:	4b5b      	ldr	r3, [pc, #364]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	4a5a      	ldr	r2, [pc, #360]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	6213      	str	r3, [r2, #32]
 800466a:	4b58      	ldr	r3, [pc, #352]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	4a57      	ldr	r2, [pc, #348]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004670:	f023 0304 	bic.w	r3, r3, #4
 8004674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d015      	beq.n	80046aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467e:	f7fe fae9 	bl	8002c54 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004684:	e00a      	b.n	800469c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fe fae5 	bl	8002c54 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f241 3288 	movw	r2, #5000	; 0x1388
 8004694:	4293      	cmp	r3, r2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e0b1      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469c:	4b4b      	ldr	r3, [pc, #300]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0ee      	beq.n	8004686 <HAL_RCC_OscConfig+0x37e>
 80046a8:	e014      	b.n	80046d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046aa:	f7fe fad3 	bl	8002c54 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b0:	e00a      	b.n	80046c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b2:	f7fe facf 	bl	8002c54 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e09b      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c8:	4b40      	ldr	r3, [pc, #256]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1ee      	bne.n	80046b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d105      	bne.n	80046e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046da:	4b3c      	ldr	r3, [pc, #240]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4a3b      	ldr	r2, [pc, #236]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80046e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8087 	beq.w	80047fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046f0:	4b36      	ldr	r3, [pc, #216]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d061      	beq.n	80047c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d146      	bne.n	8004792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004704:	4b33      	ldr	r3, [pc, #204]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470a:	f7fe faa3 	bl	8002c54 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004712:	f7fe fa9f 	bl	8002c54 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e06d      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004724:	4b29      	ldr	r3, [pc, #164]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1f0      	bne.n	8004712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004738:	d108      	bne.n	800474c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	4921      	ldr	r1, [pc, #132]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800474c:	4b1f      	ldr	r3, [pc, #124]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a19      	ldr	r1, [r3, #32]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	430b      	orrs	r3, r1
 800475e:	491b      	ldr	r1, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004760:	4313      	orrs	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476a:	f7fe fa73 	bl	8002c54 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004772:	f7fe fa6f 	bl	8002c54 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e03d      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004784:	4b11      	ldr	r3, [pc, #68]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCC_OscConfig+0x46a>
 8004790:	e035      	b.n	80047fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fe fa5c 	bl	8002c54 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fe fa58 	bl	8002c54 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e026      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x498>
 80047be:	e01e      	b.n	80047fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d107      	bne.n	80047d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e019      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40007000 	.word	0x40007000
 80047d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_OscConfig+0x500>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d106      	bne.n	80047fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d001      	beq.n	80047fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40021000 	.word	0x40021000

0800480c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0d0      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004820:	4b6a      	ldr	r3, [pc, #424]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d910      	bls.n	8004850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b67      	ldr	r3, [pc, #412]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 0207 	bic.w	r2, r3, #7
 8004836:	4965      	ldr	r1, [pc, #404]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b63      	ldr	r3, [pc, #396]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0b8      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d020      	beq.n	800489e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004868:	4b59      	ldr	r3, [pc, #356]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4a58      	ldr	r2, [pc, #352]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 800486e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004872:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004880:	4b53      	ldr	r3, [pc, #332]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a52      	ldr	r2, [pc, #328]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800488a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488c:	4b50      	ldr	r3, [pc, #320]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	494d      	ldr	r1, [pc, #308]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 800489a:	4313      	orrs	r3, r2
 800489c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d040      	beq.n	800492c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d115      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e07f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ca:	4b41      	ldr	r3, [pc, #260]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e073      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048da:	4b3d      	ldr	r3, [pc, #244]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e06b      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ea:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f023 0203 	bic.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	4936      	ldr	r1, [pc, #216]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048fc:	f7fe f9aa 	bl	8002c54 <HAL_GetTick>
 8004900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	e00a      	b.n	800491a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004904:	f7fe f9a6 	bl	8002c54 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e053      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	4b2d      	ldr	r3, [pc, #180]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 020c 	and.w	r2, r3, #12
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	429a      	cmp	r2, r3
 800492a:	d1eb      	bne.n	8004904 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800492c:	4b27      	ldr	r3, [pc, #156]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d210      	bcs.n	800495c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493a:	4b24      	ldr	r3, [pc, #144]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 0207 	bic.w	r2, r3, #7
 8004942:	4922      	ldr	r1, [pc, #136]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e032      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004968:	4b19      	ldr	r3, [pc, #100]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4916      	ldr	r1, [pc, #88]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004976:	4313      	orrs	r3, r2
 8004978:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004986:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	490e      	ldr	r1, [pc, #56]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800499a:	f000 f821 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 800499e:	4602      	mov	r2, r0
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	490a      	ldr	r1, [pc, #40]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 80049ac:	5ccb      	ldrb	r3, [r1, r3]
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	4a09      	ldr	r2, [pc, #36]	; (80049d8 <HAL_RCC_ClockConfig+0x1cc>)
 80049b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_RCC_ClockConfig+0x1d0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fd f81a 	bl	80019f4 <HAL_InitTick>

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40022000 	.word	0x40022000
 80049d0:	40021000 	.word	0x40021000
 80049d4:	08009d68 	.word	0x08009d68
 80049d8:	200000a8 	.word	0x200000a8
 80049dc:	20000134 	.word	0x20000134

080049e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e0:	b490      	push	{r4, r7}
 80049e2:	b08a      	sub	sp, #40	; 0x28
 80049e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80049e6:	4b29      	ldr	r3, [pc, #164]	; (8004a8c <HAL_RCC_GetSysClockFreq+0xac>)
 80049e8:	1d3c      	adds	r4, r7, #4
 80049ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049f0:	f240 2301 	movw	r3, #513	; 0x201
 80049f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	2300      	movs	r3, #0
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a0a:	4b21      	ldr	r3, [pc, #132]	; (8004a90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d002      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0x40>
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d003      	beq.n	8004a26 <HAL_RCC_GetSysClockFreq+0x46>
 8004a1e:	e02b      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a20:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a22:	623b      	str	r3, [r7, #32]
      break;
 8004a24:	e02b      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	0c9b      	lsrs	r3, r3, #18
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	3328      	adds	r3, #40	; 0x28
 8004a30:	443b      	add	r3, r7
 8004a32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d012      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a42:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	0c5b      	lsrs	r3, r3, #17
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	3328      	adds	r3, #40	; 0x28
 8004a4e:	443b      	add	r3, r7
 8004a50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	4a0e      	ldr	r2, [pc, #56]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a5a:	fb03 f202 	mul.w	r2, r3, r2
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
 8004a66:	e004      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6c:	fb02 f303 	mul.w	r3, r2, r3
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	623b      	str	r3, [r7, #32]
      break;
 8004a76:	e002      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a7a:	623b      	str	r3, [r7, #32]
      break;
 8004a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3728      	adds	r7, #40	; 0x28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc90      	pop	{r4, r7}
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	08005794 	.word	0x08005794
 8004a90:	40021000 	.word	0x40021000
 8004a94:	007a1200 	.word	0x007a1200
 8004a98:	003d0900 	.word	0x003d0900

08004a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa0:	4b02      	ldr	r3, [pc, #8]	; (8004aac <HAL_RCC_GetHCLKFreq+0x10>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr
 8004aac:	200000a8 	.word	0x200000a8

08004ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ab4:	f7ff fff2 	bl	8004a9c <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4903      	ldr	r1, [pc, #12]	; (8004ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	08009d78 	.word	0x08009d78

08004ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004adc:	f7ff ffde 	bl	8004a9c <HAL_RCC_GetHCLKFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	0adb      	lsrs	r3, r3, #11
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	4903      	ldr	r1, [pc, #12]	; (8004afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40021000 	.word	0x40021000
 8004afc:	08009d78 	.word	0x08009d78

08004b00 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	220f      	movs	r2, #15
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b10:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <HAL_RCC_GetClockConfig+0x58>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 0203 	and.w	r2, r3, #3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_RCC_GetClockConfig+0x58>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_RCC_GetClockConfig+0x58>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b34:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <HAL_RCC_GetClockConfig+0x58>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	08db      	lsrs	r3, r3, #3
 8004b3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_RCC_GetClockConfig+0x5c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0207 	and.w	r2, r3, #7
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40022000 	.word	0x40022000

08004b60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <RCC_Delay+0x34>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <RCC_Delay+0x38>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	0a5b      	lsrs	r3, r3, #9
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b7c:	bf00      	nop
  }
  while (Delay --);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1e5a      	subs	r2, r3, #1
 8004b82:	60fa      	str	r2, [r7, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f9      	bne.n	8004b7c <RCC_Delay+0x1c>
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	200000a8 	.word	0x200000a8
 8004b98:	10624dd3 	.word	0x10624dd3

08004b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d07d      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bbc:	4b4f      	ldr	r3, [pc, #316]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10d      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc8:	4b4c      	ldr	r3, [pc, #304]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	4a4b      	ldr	r2, [pc, #300]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	61d3      	str	r3, [r2, #28]
 8004bd4:	4b49      	ldr	r3, [pc, #292]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be4:	4b46      	ldr	r3, [pc, #280]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d118      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bf0:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a42      	ldr	r2, [pc, #264]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfc:	f7fe f82a 	bl	8002c54 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c02:	e008      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c04:	f7fe f826 	bl	8002c54 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	; 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e06d      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c16:	4b3a      	ldr	r3, [pc, #232]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c22:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02e      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d027      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c40:	4b2e      	ldr	r3, [pc, #184]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c4a:	4b2e      	ldr	r3, [pc, #184]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c50:	4b2c      	ldr	r3, [pc, #176]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c56:	4a29      	ldr	r2, [pc, #164]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d014      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c66:	f7fd fff5 	bl	8002c54 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6c:	e00a      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f7fd fff1 	bl	8002c54 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e036      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c84:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ee      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c90:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4917      	ldr	r1, [pc, #92]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca8:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cc0:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	490b      	ldr	r1, [pc, #44]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d008      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cde:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	4904      	ldr	r1, [pc, #16]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	40007000 	.word	0x40007000
 8004d04:	42420440 	.word	0x42420440

08004d08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b08d      	sub	sp, #52	; 0x34
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d10:	4b58      	ldr	r3, [pc, #352]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004d12:	f107 040c 	add.w	r4, r7, #12
 8004d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d1c:	f240 2301 	movw	r3, #513	; 0x201
 8004d20:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
 8004d26:	2300      	movs	r3, #0
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	2300      	movs	r3, #0
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b10      	cmp	r3, #16
 8004d40:	f200 808e 	bhi.w	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d049      	beq.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d079      	beq.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004d50:	e086      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8004d52:	4b49      	ldr	r3, [pc, #292]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004d58:	4b47      	ldr	r3, [pc, #284]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d07f      	beq.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	0c9b      	lsrs	r3, r3, #18
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	3330      	adds	r3, #48	; 0x30
 8004d6e:	443b      	add	r3, r7
 8004d70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004d74:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d017      	beq.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d80:	4b3d      	ldr	r3, [pc, #244]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	0c5b      	lsrs	r3, r3, #17
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	3330      	adds	r3, #48	; 0x30
 8004d8c:	443b      	add	r3, r7
 8004d8e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004d9e:	4a37      	ldr	r2, [pc, #220]	; (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	fb02 f303 	mul.w	r3, r2, r3
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dae:	e004      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	4a33      	ldr	r2, [pc, #204]	; (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004db4:	fb02 f303 	mul.w	r3, r2, r3
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004dba:	4b2f      	ldr	r3, [pc, #188]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dc6:	d102      	bne.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004dcc:	e04a      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	4a2c      	ldr	r2, [pc, #176]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004ddc:	e042      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8004dde:	4b26      	ldr	r3, [pc, #152]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dee:	d108      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8004dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e00:	e01f      	b.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e0c:	d109      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004e0e:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8004e1a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e20:	e00f      	b.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2c:	d11c      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d016      	beq.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004e3a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e40:	e012      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004e42:	e011      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004e44:	f7ff fe48 	bl	8004ad8 <HAL_RCC_GetPCLK2Freq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	0b9b      	lsrs	r3, r3, #14
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	3301      	adds	r3, #1
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e5e:	e004      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004e60:	bf00      	nop
 8004e62:	e002      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004e64:	bf00      	nop
 8004e66:	e000      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004e68:	bf00      	nop
    }
  }
  return (frequency);
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3734      	adds	r7, #52	; 0x34
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd90      	pop	{r4, r7, pc}
 8004e74:	080057a4 	.word	0x080057a4
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	007a1200 	.word	0x007a1200
 8004e80:	003d0900 	.word	0x003d0900
 8004e84:	aaaaaaab 	.word	0xaaaaaaab

08004e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e041      	b.n	8004f1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc feca 	bl	8001c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f000 fa70 	bl	80053ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d001      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e03a      	b.n	8004fb6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <HAL_TIM_Base_Start_IT+0x98>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00e      	beq.n	8004f80 <HAL_TIM_Base_Start_IT+0x58>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6a:	d009      	beq.n	8004f80 <HAL_TIM_Base_Start_IT+0x58>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d004      	beq.n	8004f80 <HAL_TIM_Base_Start_IT+0x58>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a13      	ldr	r2, [pc, #76]	; (8004fc8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d111      	bne.n	8004fa4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b06      	cmp	r3, #6
 8004f90:	d010      	beq.n	8004fb4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa2:	e007      	b.n	8004fb4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr
 8004fc0:	40012c00 	.word	0x40012c00
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40000800 	.word	0x40000800

08004fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d122      	bne.n	8005028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d11b      	bne.n	8005028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0202 	mvn.w	r2, #2
 8004ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f9b1 	bl	8005376 <HAL_TIM_IC_CaptureCallback>
 8005014:	e005      	b.n	8005022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f9a4 	bl	8005364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f9b3 	bl	8005388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b04      	cmp	r3, #4
 8005034:	d122      	bne.n	800507c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b04      	cmp	r3, #4
 8005042:	d11b      	bne.n	800507c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0204 	mvn.w	r2, #4
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f987 	bl	8005376 <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f97a 	bl	8005364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f989 	bl	8005388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b08      	cmp	r3, #8
 8005088:	d122      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b08      	cmp	r3, #8
 8005096:	d11b      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0208 	mvn.w	r2, #8
 80050a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2204      	movs	r2, #4
 80050a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f95d 	bl	8005376 <HAL_TIM_IC_CaptureCallback>
 80050bc:	e005      	b.n	80050ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f950 	bl	8005364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f95f 	bl	8005388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	2b10      	cmp	r3, #16
 80050dc:	d122      	bne.n	8005124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0310 	and.w	r3, r3, #16
 80050e8:	2b10      	cmp	r3, #16
 80050ea:	d11b      	bne.n	8005124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0210 	mvn.w	r2, #16
 80050f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2208      	movs	r2, #8
 80050fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f933 	bl	8005376 <HAL_TIM_IC_CaptureCallback>
 8005110:	e005      	b.n	800511e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f926 	bl	8005364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f935 	bl	8005388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b01      	cmp	r3, #1
 8005130:	d10e      	bne.n	8005150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b01      	cmp	r3, #1
 800513e:	d107      	bne.n	8005150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0201 	mvn.w	r2, #1
 8005148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fc fb2e 	bl	80017ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515a:	2b80      	cmp	r3, #128	; 0x80
 800515c:	d10e      	bne.n	800517c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005168:	2b80      	cmp	r3, #128	; 0x80
 800516a:	d107      	bne.n	800517c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fa77 	bl	800566a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	d10e      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d107      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f8f9 	bl	800539a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d10e      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d107      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0220 	mvn.w	r2, #32
 80051cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fa42 	bl	8005658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_TIM_ConfigClockSource+0x18>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e0b3      	b.n	800535c <HAL_TIM_ConfigClockSource+0x180>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005212:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800521a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800522c:	d03e      	beq.n	80052ac <HAL_TIM_ConfigClockSource+0xd0>
 800522e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005232:	f200 8087 	bhi.w	8005344 <HAL_TIM_ConfigClockSource+0x168>
 8005236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523a:	f000 8085 	beq.w	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005242:	d87f      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x168>
 8005244:	2b70      	cmp	r3, #112	; 0x70
 8005246:	d01a      	beq.n	800527e <HAL_TIM_ConfigClockSource+0xa2>
 8005248:	2b70      	cmp	r3, #112	; 0x70
 800524a:	d87b      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x168>
 800524c:	2b60      	cmp	r3, #96	; 0x60
 800524e:	d050      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x116>
 8005250:	2b60      	cmp	r3, #96	; 0x60
 8005252:	d877      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x168>
 8005254:	2b50      	cmp	r3, #80	; 0x50
 8005256:	d03c      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0xf6>
 8005258:	2b50      	cmp	r3, #80	; 0x50
 800525a:	d873      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x168>
 800525c:	2b40      	cmp	r3, #64	; 0x40
 800525e:	d058      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x136>
 8005260:	2b40      	cmp	r3, #64	; 0x40
 8005262:	d86f      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x168>
 8005264:	2b30      	cmp	r3, #48	; 0x30
 8005266:	d064      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x156>
 8005268:	2b30      	cmp	r3, #48	; 0x30
 800526a:	d86b      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x168>
 800526c:	2b20      	cmp	r3, #32
 800526e:	d060      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x156>
 8005270:	2b20      	cmp	r3, #32
 8005272:	d867      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x168>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d05c      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x156>
 8005278:	2b10      	cmp	r3, #16
 800527a:	d05a      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800527c:	e062      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6899      	ldr	r1, [r3, #8]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f000 f966 	bl	800555e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	609a      	str	r2, [r3, #8]
      break;
 80052aa:	e04e      	b.n	800534a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	6899      	ldr	r1, [r3, #8]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f000 f94f 	bl	800555e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ce:	609a      	str	r2, [r3, #8]
      break;
 80052d0:	e03b      	b.n	800534a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6859      	ldr	r1, [r3, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	461a      	mov	r2, r3
 80052e0:	f000 f8c6 	bl	8005470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2150      	movs	r1, #80	; 0x50
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f91d 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 80052f0:	e02b      	b.n	800534a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	6859      	ldr	r1, [r3, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	461a      	mov	r2, r3
 8005300:	f000 f8e4 	bl	80054cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2160      	movs	r1, #96	; 0x60
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f90d 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8005310:	e01b      	b.n	800534a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6859      	ldr	r1, [r3, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	461a      	mov	r2, r3
 8005320:	f000 f8a6 	bl	8005470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2140      	movs	r1, #64	; 0x40
 800532a:	4618      	mov	r0, r3
 800532c:	f000 f8fd 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8005330:	e00b      	b.n	800534a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4619      	mov	r1, r3
 800533c:	4610      	mov	r0, r2
 800533e:	f000 f8f4 	bl	800552a <TIM_ITRx_SetConfig>
        break;
 8005342:	e002      	b.n	800534a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005344:	bf00      	nop
 8005346:	e000      	b.n	800534a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005348:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr

0800539a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a29      	ldr	r2, [pc, #164]	; (8005464 <TIM_Base_SetConfig+0xb8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00b      	beq.n	80053dc <TIM_Base_SetConfig+0x30>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ca:	d007      	beq.n	80053dc <TIM_Base_SetConfig+0x30>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a26      	ldr	r2, [pc, #152]	; (8005468 <TIM_Base_SetConfig+0xbc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <TIM_Base_SetConfig+0x30>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a25      	ldr	r2, [pc, #148]	; (800546c <TIM_Base_SetConfig+0xc0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d108      	bne.n	80053ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <TIM_Base_SetConfig+0xb8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00b      	beq.n	800540e <TIM_Base_SetConfig+0x62>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fc:	d007      	beq.n	800540e <TIM_Base_SetConfig+0x62>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a19      	ldr	r2, [pc, #100]	; (8005468 <TIM_Base_SetConfig+0xbc>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d003      	beq.n	800540e <TIM_Base_SetConfig+0x62>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a18      	ldr	r2, [pc, #96]	; (800546c <TIM_Base_SetConfig+0xc0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d108      	bne.n	8005420 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a07      	ldr	r2, [pc, #28]	; (8005464 <TIM_Base_SetConfig+0xb8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d103      	bne.n	8005454 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	615a      	str	r2, [r3, #20]
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr
 8005464:	40012c00 	.word	0x40012c00
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800

08005470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800549a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f023 030a 	bic.w	r3, r3, #10
 80054ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	f023 0210 	bic.w	r2, r3, #16
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	031b      	lsls	r3, r3, #12
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005508:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	621a      	str	r2, [r3, #32]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr

0800552a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	f043 0307 	orr.w	r3, r3, #7
 800554c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	609a      	str	r2, [r3, #8]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	bc80      	pop	{r7}
 800555c:	4770      	bx	lr

0800555e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800555e:	b480      	push	{r7}
 8005560:	b087      	sub	sp, #28
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005578:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	021a      	lsls	r2, r3, #8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	431a      	orrs	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	4313      	orrs	r3, r2
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	609a      	str	r2, [r3, #8]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr

0800559c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e046      	b.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a16      	ldr	r2, [pc, #88]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00e      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005600:	d009      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a12      	ldr	r2, [pc, #72]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d004      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a10      	ldr	r2, [pc, #64]	; (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d10c      	bne.n	8005630 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800561c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4313      	orrs	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800

08005658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr

0800566a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr

0800567c <__libc_init_array>:
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	2600      	movs	r6, #0
 8005680:	4d0c      	ldr	r5, [pc, #48]	; (80056b4 <__libc_init_array+0x38>)
 8005682:	4c0d      	ldr	r4, [pc, #52]	; (80056b8 <__libc_init_array+0x3c>)
 8005684:	1b64      	subs	r4, r4, r5
 8005686:	10a4      	asrs	r4, r4, #2
 8005688:	42a6      	cmp	r6, r4
 800568a:	d109      	bne.n	80056a0 <__libc_init_array+0x24>
 800568c:	f000 f830 	bl	80056f0 <_init>
 8005690:	2600      	movs	r6, #0
 8005692:	4d0a      	ldr	r5, [pc, #40]	; (80056bc <__libc_init_array+0x40>)
 8005694:	4c0a      	ldr	r4, [pc, #40]	; (80056c0 <__libc_init_array+0x44>)
 8005696:	1b64      	subs	r4, r4, r5
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	42a6      	cmp	r6, r4
 800569c:	d105      	bne.n	80056aa <__libc_init_array+0x2e>
 800569e:	bd70      	pop	{r4, r5, r6, pc}
 80056a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a4:	4798      	blx	r3
 80056a6:	3601      	adds	r6, #1
 80056a8:	e7ee      	b.n	8005688 <__libc_init_array+0xc>
 80056aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ae:	4798      	blx	r3
 80056b0:	3601      	adds	r6, #1
 80056b2:	e7f2      	b.n	800569a <__libc_init_array+0x1e>
 80056b4:	08009d90 	.word	0x08009d90
 80056b8:	08009d90 	.word	0x08009d90
 80056bc:	08009d90 	.word	0x08009d90
 80056c0:	08009d94 	.word	0x08009d94

080056c4 <memcpy>:
 80056c4:	440a      	add	r2, r1
 80056c6:	4291      	cmp	r1, r2
 80056c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056cc:	d100      	bne.n	80056d0 <memcpy+0xc>
 80056ce:	4770      	bx	lr
 80056d0:	b510      	push	{r4, lr}
 80056d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d6:	4291      	cmp	r1, r2
 80056d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056dc:	d1f9      	bne.n	80056d2 <memcpy+0xe>
 80056de:	bd10      	pop	{r4, pc}

080056e0 <memset>:
 80056e0:	4603      	mov	r3, r0
 80056e2:	4402      	add	r2, r0
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d100      	bne.n	80056ea <memset+0xa>
 80056e8:	4770      	bx	lr
 80056ea:	f803 1b01 	strb.w	r1, [r3], #1
 80056ee:	e7f9      	b.n	80056e4 <memset+0x4>

080056f0 <_init>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	bf00      	nop
 80056f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f6:	bc08      	pop	{r3}
 80056f8:	469e      	mov	lr, r3
 80056fa:	4770      	bx	lr

080056fc <_fini>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr
