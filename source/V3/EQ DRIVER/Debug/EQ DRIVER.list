
EQ DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800305c  0800305c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800305c  0800305c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800305c  0800305c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000060  080030c4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  080030c4  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9f6  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b2  00000000  00000000  0002ea7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00031038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00031f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018387  00000000  00000000  00032d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120a3  00000000  00000000  0004b0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f0bf  00000000  00000000  0005d1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec261  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eac  00000000  00000000  000ec2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003018 	.word	0x08003018

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003018 	.word	0x08003018

0800014c <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC2_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC2_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC2_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC2_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC2_Init+0x74>)
 800018a:	f000 fed1 	bl	8000f30 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fa60 	bl	8000658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000198:	2300      	movs	r3, #0
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC2_Init+0x74>)
 80001aa:	f000 ff99 	bl	80010e0 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fa50 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	40012800 	.word	0x40012800

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC2)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0-WKUP     ------> ADC2_IN0
    */
    GPIO_InitStruct.Pin = V_BATTERY_Pin;
 8000218:	2301      	movs	r3, #1
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_BATTERY_GPIO_Port, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f001 f974 	bl	8001514 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012800 	.word	0x40012800
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0310 	add.w	r3, r7, #16
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000254:	4b4e      	ldr	r3, [pc, #312]	; (8000390 <MX_GPIO_Init+0x150>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a4d      	ldr	r2, [pc, #308]	; (8000390 <MX_GPIO_Init+0x150>)
 800025a:	f043 0310 	orr.w	r3, r3, #16
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b4b      	ldr	r3, [pc, #300]	; (8000390 <MX_GPIO_Init+0x150>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0310 	and.w	r3, r3, #16
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800026c:	4b48      	ldr	r3, [pc, #288]	; (8000390 <MX_GPIO_Init+0x150>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a47      	ldr	r2, [pc, #284]	; (8000390 <MX_GPIO_Init+0x150>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b45      	ldr	r3, [pc, #276]	; (8000390 <MX_GPIO_Init+0x150>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0320 	and.w	r3, r3, #32
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000284:	4b42      	ldr	r3, [pc, #264]	; (8000390 <MX_GPIO_Init+0x150>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a41      	ldr	r2, [pc, #260]	; (8000390 <MX_GPIO_Init+0x150>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b3f      	ldr	r3, [pc, #252]	; (8000390 <MX_GPIO_Init+0x150>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0304 	and.w	r3, r3, #4
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029c:	4b3c      	ldr	r3, [pc, #240]	; (8000390 <MX_GPIO_Init+0x150>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a3b      	ldr	r2, [pc, #236]	; (8000390 <MX_GPIO_Init+0x150>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b39      	ldr	r3, [pc, #228]	; (8000390 <MX_GPIO_Init+0x150>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0308 	and.w	r3, r3, #8
 80002b0:	603b      	str	r3, [r7, #0]
 80002b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M1_STEP_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	21e0      	movs	r1, #224	; 0xe0
 80002b8:	4836      	ldr	r0, [pc, #216]	; (8000394 <MX_GPIO_Init+0x154>)
 80002ba:	f001 faaf 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_STEP_GPIO_Port, M2_STEP_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	2101      	movs	r1, #1
 80002c2:	4835      	ldr	r0, [pc, #212]	; (8000398 <MX_GPIO_Init+0x158>)
 80002c4:	f001 faaa 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80002c8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80002cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ce:	2303      	movs	r3, #3
 80002d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	4619      	mov	r1, r3
 80002d8:	4830      	ldr	r0, [pc, #192]	; (800039c <MX_GPIO_Init+0x15c>)
 80002da:	f001 f91b 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80002de:	f649 731e 	movw	r3, #40734	; 0x9f1e
 80002e2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e4:	2303      	movs	r3, #3
 80002e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e8:	f107 0310 	add.w	r3, r7, #16
 80002ec:	4619      	mov	r1, r3
 80002ee:	4829      	ldr	r0, [pc, #164]	; (8000394 <MX_GPIO_Init+0x154>)
 80002f0:	f001 f910 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M1_STEP_Pin|M2_DIR_Pin;
 80002f4:	23e0      	movs	r3, #224	; 0xe0
 80002f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2302      	movs	r3, #2
 8000302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	4619      	mov	r1, r3
 800030a:	4822      	ldr	r0, [pc, #136]	; (8000394 <MX_GPIO_Init+0x154>)
 800030c:	f001 f902 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_STEP_Pin;
 8000310:	2301      	movs	r3, #1
 8000312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	2301      	movs	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	2300      	movs	r3, #0
 800031a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031c:	2302      	movs	r3, #2
 800031e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_STEP_GPIO_Port, &GPIO_InitStruct);
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	4619      	mov	r1, r3
 8000326:	481c      	ldr	r0, [pc, #112]	; (8000398 <MX_GPIO_Init+0x158>)
 8000328:	f001 f8f4 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800032c:	f648 733e 	movw	r3, #36670	; 0x8f3e
 8000330:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000332:	2303      	movs	r3, #3
 8000334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	4816      	ldr	r0, [pc, #88]	; (8000398 <MX_GPIO_Init+0x158>)
 800033e:	f001 f8e9 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SELECT_Pin|ROTARY_TRIG_Pin;
 8000342:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_GPIO_Init+0x160>)
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034c:	2301      	movs	r3, #1
 800034e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	4810      	ldr	r0, [pc, #64]	; (8000398 <MX_GPIO_Init+0x158>)
 8000358:	f001 f8dc 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROTARY_CLKW_Pin;
 800035c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROTARY_CLKW_GPIO_Port, &GPIO_InitStruct);
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	4619      	mov	r1, r3
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <MX_GPIO_Init+0x158>)
 8000372:	f001 f8cf 	bl	8001514 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2100      	movs	r1, #0
 800037a:	2028      	movs	r0, #40	; 0x28
 800037c:	f001 f89f 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000380:	2028      	movs	r0, #40	; 0x28
 8000382:	f001 f8b8 	bl	80014f6 <HAL_NVIC_EnableIRQ>

}
 8000386:	bf00      	nop
 8000388:	3720      	adds	r7, #32
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	40010800 	.word	0x40010800
 8000398:	40010c00 	.word	0x40010c00
 800039c:	40011000 	.word	0x40011000
 80003a0:	10210000 	.word	0x10210000

080003a4 <digitalToggle>:
void digitalWrite(pin_t pin, bool_t value) {
  HAL_GPIO_WritePin(self.gpio[pin].GPIOx, self.gpio[pin].port, (GPIO_PinState) value);
  return;
}

void digitalToggle(pin_t pin)  {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(self.gpio[pin].GPIOx, self.gpio[pin].port);
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <digitalToggle+0x2c>)
 80003b2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	4905      	ldr	r1, [pc, #20]	; (80003d0 <digitalToggle+0x2c>)
 80003ba:	00db      	lsls	r3, r3, #3
 80003bc:	440b      	add	r3, r1
 80003be:	889b      	ldrh	r3, [r3, #4]
 80003c0:	4619      	mov	r1, r3
 80003c2:	4610      	mov	r0, r2
 80003c4:	f001 fa42 	bl	800184c <HAL_GPIO_TogglePin>
  return;
 80003c8:	bf00      	nop
}
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000000 	.word	0x20000000

080003d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <MX_I2C1_Init+0x50>)
 80003da:	4a13      	ldr	r2, [pc, #76]	; (8000428 <MX_I2C1_Init+0x54>)
 80003dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003de:	4b11      	ldr	r3, [pc, #68]	; (8000424 <MX_I2C1_Init+0x50>)
 80003e0:	4a12      	ldr	r2, [pc, #72]	; (800042c <MX_I2C1_Init+0x58>)
 80003e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <MX_I2C1_Init+0x50>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 120;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_I2C1_Init+0x50>)
 80003ec:	2278      	movs	r2, #120	; 0x78
 80003ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_I2C1_Init+0x50>)
 80003f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <MX_I2C1_Init+0x50>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_I2C1_Init+0x50>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000404:	4b07      	ldr	r3, [pc, #28]	; (8000424 <MX_I2C1_Init+0x50>)
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_I2C1_Init+0x50>)
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000410:	4804      	ldr	r0, [pc, #16]	; (8000424 <MX_I2C1_Init+0x50>)
 8000412:	f001 fa41 	bl	8001898 <HAL_I2C_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800041c:	f000 f91c 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200000ac 	.word	0x200000ac
 8000428:	40005400 	.word	0x40005400
 800042c:	000186a0 	.word	0x000186a0

08000430 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a15      	ldr	r2, [pc, #84]	; (80004a0 <HAL_I2C_MspInit+0x70>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d123      	bne.n	8000498 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000450:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <HAL_I2C_MspInit+0x74>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a13      	ldr	r2, [pc, #76]	; (80004a4 <HAL_I2C_MspInit+0x74>)
 8000456:	f043 0308 	orr.w	r3, r3, #8
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <HAL_I2C_MspInit+0x74>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0308 	and.w	r3, r3, #8
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000468:	23c0      	movs	r3, #192	; 0xc0
 800046a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800046c:	2312      	movs	r3, #18
 800046e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000470:	2303      	movs	r3, #3
 8000472:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	4619      	mov	r1, r3
 800047a:	480b      	ldr	r0, [pc, #44]	; (80004a8 <HAL_I2C_MspInit+0x78>)
 800047c:	f001 f84a 	bl	8001514 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <HAL_I2C_MspInit+0x74>)
 8000482:	69db      	ldr	r3, [r3, #28]
 8000484:	4a07      	ldr	r2, [pc, #28]	; (80004a4 <HAL_I2C_MspInit+0x74>)
 8000486:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800048a:	61d3      	str	r3, [r2, #28]
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <HAL_I2C_MspInit+0x74>)
 800048e:	69db      	ldr	r3, [r3, #28]
 8000490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000494:	60bb      	str	r3, [r7, #8]
 8000496:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000498:	bf00      	nop
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40005400 	.word	0x40005400
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010c00 	.word	0x40010c00

080004ac <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROTARY_TRIG_Pin)	{
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004bc:	d103      	bne.n	80004c6 <HAL_GPIO_EXTI_Callback+0x1a>
		set_flag(rotary_trigged);
 80004be:	2001      	movs	r0, #1
 80004c0:	f000 f9de 	bl	8000880 <set_flag>
	}
	else if (GPIO_Pin == SELECT_Pin)	{
		set_flag(selected);
	}
}
 80004c4:	e006      	b.n	80004d4 <HAL_GPIO_EXTI_Callback+0x28>
	else if (GPIO_Pin == SELECT_Pin)	{
 80004c6:	88fb      	ldrh	r3, [r7, #6]
 80004c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004cc:	d102      	bne.n	80004d4 <HAL_GPIO_EXTI_Callback+0x28>
		set_flag(selected);
 80004ce:	2000      	movs	r0, #0
 80004d0:	f000 f9d6 	bl	8000880 <set_flag>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fccf 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f84a 	bl	800057e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f7ff fea9 	bl	8000240 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ee:	f7ff ff71 	bl	80003d4 <MX_I2C1_Init>
  MX_ADC2_Init();
 80004f2:	f7ff fe2b 	bl	800014c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	const uint8_t DEBOUNCE_DELAY_MS = 10;
 80004f6:	230a      	movs	r3, #10
 80004f8:	70fb      	strb	r3, [r7, #3]
	uint32_t last_move_ticks = 0; //to track time passed in ms with HAL_GetTick()
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
	SH1106_Init();
 80004fe:	f000 fa41 	bl	8000984 <SH1106_Init>
	HAL_Delay(2500);
 8000502:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000506:	f000 fcef 	bl	8000ee8 <HAL_Delay>
	SH1106_setAllPixelsOn(1);
 800050a:	2001      	movs	r0, #1
 800050c:	f000 fa79 	bl	8000a02 <SH1106_setAllPixelsOn>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (get_flag(rotary_trigged))	{ //rotary encoder trigged
 8000510:	2001      	movs	r0, #1
 8000512:	f000 f9d5 	bl	80008c0 <get_flag>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d018      	beq.n	800054e <main+0x72>
			reset_flag(rotary_trigged);
 800051c:	2001      	movs	r0, #1
 800051e:	f000 f9bf 	bl	80008a0 <reset_flag>
			if ((HAL_GetTick() - last_move_ticks) >= DEBOUNCE_DELAY_MS)	{
 8000522:	f000 fcd7 	bl	8000ed4 <HAL_GetTick>
 8000526:	4602      	mov	r2, r0
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	1ad2      	subs	r2, r2, r3
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	429a      	cmp	r2, r3
 8000530:	d3ee      	bcc.n	8000510 <main+0x34>

				digitalToggle(OUT_RA_DIR);
 8000532:	2001      	movs	r0, #1
 8000534:	f7ff ff36 	bl	80003a4 <digitalToggle>
				SH1106_drawCircle(64, 32, 30);
 8000538:	221e      	movs	r2, #30
 800053a:	2120      	movs	r1, #32
 800053c:	2040      	movs	r0, #64	; 0x40
 800053e:	f000 fb0f 	bl	8000b60 <SH1106_drawCircle>
				SH1106_flush();
 8000542:	f000 fa71 	bl	8000a28 <SH1106_flush>
				last_move_ticks = HAL_GetTick();
 8000546:	f000 fcc5 	bl	8000ed4 <HAL_GetTick>
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	e7e0      	b.n	8000510 <main+0x34>
			}
		}
		
		else if (get_flag(selected))	{ //rotary encoder trigged
 800054e:	2000      	movs	r0, #0
 8000550:	f000 f9b6 	bl	80008c0 <get_flag>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0da      	beq.n	8000510 <main+0x34>
			reset_flag(selected);
 800055a:	2000      	movs	r0, #0
 800055c:	f000 f9a0 	bl	80008a0 <reset_flag>
			if ((HAL_GetTick() - last_move_ticks) >= DEBOUNCE_DELAY_MS)	{
 8000560:	f000 fcb8 	bl	8000ed4 <HAL_GetTick>
 8000564:	4602      	mov	r2, r0
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	1ad2      	subs	r2, r2, r3
 800056a:	78fb      	ldrb	r3, [r7, #3]
 800056c:	429a      	cmp	r2, r3
 800056e:	d3cf      	bcc.n	8000510 <main+0x34>

				digitalToggle(OUT_RA_STEP);
 8000570:	2002      	movs	r0, #2
 8000572:	f7ff ff17 	bl	80003a4 <digitalToggle>
				last_move_ticks = HAL_GetTick();
 8000576:	f000 fcad 	bl	8000ed4 <HAL_GetTick>
 800057a:	6078      	str	r0, [r7, #4]
		if (get_flag(rotary_trigged))	{ //rotary encoder trigged
 800057c:	e7c8      	b.n	8000510 <main+0x34>

0800057e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b094      	sub	sp, #80	; 0x50
 8000582:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000584:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000588:	2228      	movs	r2, #40	; 0x28
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f002 fd3b 	bl	8003008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ae:	2301      	movs	r3, #1
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fda9 	bl	800212c <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005e0:	f000 f83a 	bl	8000658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f002 f815 	bl	8002630 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800060c:	f000 f824 	bl	8000658 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000610:	2302      	movs	r3, #2
 8000612:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000614:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000618:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4618      	mov	r0, r3
 800061e:	f002 f9cf 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000628:	f000 f816 	bl	8000658 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d101      	bne.n	800064a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000646:	f000 fc33 	bl	8000eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40012c00 	.word	0x40012c00

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000660:	e7fe      	b.n	8000660 <Error_Handler+0x8>
	...

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <HAL_MspInit+0x6c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <HAL_MspInit+0x6c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <HAL_MspInit+0x6c>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <HAL_MspInit+0x6c>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <HAL_MspInit+0x6c>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	61d3      	str	r3, [r2, #28]
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <HAL_MspInit+0x6c>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2005      	movs	r0, #5
 80006a0:	f000 ff0d 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80006a4:	2005      	movs	r0, #5
 80006a6:	f000 ff26 	bl	80014f6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <HAL_MspInit+0x70>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <HAL_MspInit+0x70>)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010000 	.word	0x40010000

080006d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80006e4:	2300      	movs	r3, #0
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006ee:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <HAL_InitTick+0xd0>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	4a2d      	ldr	r2, [pc, #180]	; (80007a8 <HAL_InitTick+0xd0>)
 80006f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006f8:	6193      	str	r3, [r2, #24]
 80006fa:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <HAL_InitTick+0xd0>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000706:	f107 020c 	add.w	r2, r7, #12
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4611      	mov	r1, r2
 8000710:	4618      	mov	r0, r3
 8000712:	f002 f907 	bl	8002924 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000716:	f002 f8f1 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 800071a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071e:	4a23      	ldr	r2, [pc, #140]	; (80007ac <HAL_InitTick+0xd4>)
 8000720:	fba2 2303 	umull	r2, r3, r2, r3
 8000724:	0c9b      	lsrs	r3, r3, #18
 8000726:	3b01      	subs	r3, #1
 8000728:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <HAL_InitTick+0xd8>)
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <HAL_InitTick+0xdc>)
 800072e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <HAL_InitTick+0xd8>)
 8000732:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000736:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000738:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <HAL_InitTick+0xd8>)
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <HAL_InitTick+0xd8>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <HAL_InitTick+0xd8>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <HAL_InitTick+0xd8>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000750:	4817      	ldr	r0, [pc, #92]	; (80007b0 <HAL_InitTick+0xd8>)
 8000752:	f002 f9eb 	bl	8002b2c <HAL_TIM_Base_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800075c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000760:	2b00      	cmp	r3, #0
 8000762:	d11b      	bne.n	800079c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000764:	4812      	ldr	r0, [pc, #72]	; (80007b0 <HAL_InitTick+0xd8>)
 8000766:	f002 fa39 	bl	8002bdc <HAL_TIM_Base_Start_IT>
 800076a:	4603      	mov	r3, r0
 800076c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000774:	2b00      	cmp	r3, #0
 8000776:	d111      	bne.n	800079c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000778:	2019      	movs	r0, #25
 800077a:	f000 febc 	bl	80014f6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b0f      	cmp	r3, #15
 8000782:	d808      	bhi.n	8000796 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000784:	2200      	movs	r2, #0
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	2019      	movs	r0, #25
 800078a:	f000 fe98 	bl	80014be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <HAL_InitTick+0xe0>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	e002      	b.n	800079c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800079c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3730      	adds	r7, #48	; 0x30
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	431bde83 	.word	0x431bde83
 80007b0:	20000100 	.word	0x20000100
 80007b4:	40012c00 	.word	0x40012c00
 80007b8:	20000058 	.word	0x20000058

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
	...

08000818 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <TIM1_UP_IRQHandler+0x10>)
 800081e:	f002 fa2f 	bl	8002c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000100 	.word	0x20000100

0800082c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (EXTI->PR & SELECT_Pin) {
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <EXTI15_10_IRQHandler+0x44>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000838:	2b00      	cmp	r3, #0
 800083a:	d008      	beq.n	800084e <EXTI15_10_IRQHandler+0x22>
		/* Clear bit */
		EXTI->PR = SELECT_Pin;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <EXTI15_10_IRQHandler+0x44>)
 800083e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000842:	615a      	str	r2, [r3, #20]
		/* Call global function */
		HAL_GPIO_EXTI_IRQHandler(SELECT_Pin);
 8000844:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000848:	f001 f819 	bl	800187e <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800084c:	e00d      	b.n	800086a <EXTI15_10_IRQHandler+0x3e>
	else if (EXTI->PR & ROTARY_TRIG_Pin) {
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <EXTI15_10_IRQHandler+0x44>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d007      	beq.n	800086a <EXTI15_10_IRQHandler+0x3e>
		EXTI->PR = ROTARY_TRIG_Pin;
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <EXTI15_10_IRQHandler+0x44>)
 800085c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000860:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_IRQHandler(ROTARY_TRIG_Pin);
 8000862:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000866:	f001 f80a 	bl	800187e <HAL_GPIO_EXTI_IRQHandler>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40010400 	.word	0x40010400

08000874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <set_flag>:
#include "variables.h"

void set_flag(bool_var_t bool_var) {
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
	boolVariables[bool_var] = 1;
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4a03      	ldr	r2, [pc, #12]	; (800089c <set_flag+0x1c>)
 800088e:	2101      	movs	r1, #1
 8000890:	54d1      	strb	r1, [r2, r3]
	return;
 8000892:	bf00      	nop
}
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	20000148 	.word	0x20000148

080008a0 <reset_flag>:

void reset_flag(bool_var_t bool_var) {
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
	boolVariables[bool_var] = 0;
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4a03      	ldr	r2, [pc, #12]	; (80008bc <reset_flag+0x1c>)
 80008ae:	2100      	movs	r1, #0
 80008b0:	54d1      	strb	r1, [r2, r3]
	return;
 80008b2:	bf00      	nop
}
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000148 	.word	0x20000148

080008c0 <get_flag>:

bool_t get_flag(bool_var_t bool_var) {
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	return boolVariables[bool_var];
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	4a03      	ldr	r2, [pc, #12]	; (80008dc <get_flag+0x1c>)
 80008ce:	5cd3      	ldrb	r3, [r2, r3]
 80008d0:	b2db      	uxtb	r3, r3
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	20000148 	.word	0x20000148

080008e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008e2:	490d      	ldr	r1, [pc, #52]	; (8000918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008f8:	4c0a      	ldr	r4, [pc, #40]	; (8000924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000906:	f7ff ffb5 	bl	8000874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090a:	f002 fb59 	bl	8002fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090e:	f7ff fde5 	bl	80004dc <main>
  bx lr
 8000912:	4770      	bx	lr
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800091c:	08003064 	.word	0x08003064
  ldr r2, =_sbss
 8000920:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000924:	20000550 	.word	0x20000550

08000928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC1_2_IRQHandler>
	...

0800092c <SH1106_cmd>:
		{ 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

// Send single byte command to display
// input:
//   cmd - display command
static void SH1106_cmd(uint8_t cmd) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af02      	add	r7, sp, #8
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
	// Send command to display
	uint8_t command[2] = {0x00, cmd};
 8000936:	2300      	movs	r3, #0
 8000938:	733b      	strb	r3, [r7, #12]
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, command, 2, 10);
 800093e:	f107 020c 	add.w	r2, r7, #12
 8000942:	230a      	movs	r3, #10
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2302      	movs	r3, #2
 8000948:	2178      	movs	r1, #120	; 0x78
 800094a:	4803      	ldr	r0, [pc, #12]	; (8000958 <SH1106_cmd+0x2c>)
 800094c:	f001 f8e8 	bl	8001b20 <HAL_I2C_Master_Transmit>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200000ac 	.word	0x200000ac

0800095c <SH1106_cmd_double>:

// Send double byte command to display
// input:
//   cmd1 - first byte of double-byte command
//   cmd2 - second byte of double-byte command
static void SH1106_cmd_double(uint8_t cmd1, uint8_t cmd2) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	460a      	mov	r2, r1
 8000966:	71fb      	strb	r3, [r7, #7]
 8000968:	4613      	mov	r3, r2
 800096a:	71bb      	strb	r3, [r7, #6]
	// Send double byte command to display
	SH1106_cmd(cmd1);
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ffdc 	bl	800092c <SH1106_cmd>
	SH1106_cmd(cmd2);
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ffd8 	bl	800092c <SH1106_cmd>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <SH1106_Init>:

// Initialize SDA peripheral and SH1106 display
// note: SDA peripheral must be initialized before
void SH1106_Init(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	// Initial display configuration
	HAL_Delay(100);
 8000988:	2064      	movs	r0, #100	; 0x64
 800098a:	f000 faad 	bl	8000ee8 <HAL_Delay>

	// display off
	SH1106_cmd(0xAE);
 800098e:	20ae      	movs	r0, #174	; 0xae
 8000990:	f7ff ffcc 	bl	800092c <SH1106_cmd>
	// bits[3:0] defines the divide ratio of the display clocks (bits[3:0] + 1)
	// bits[7:4] set the oscillator frequency (Fosc), frequency increases with the value of these bits
	// 0xF0 value gives maximum frequency (maximum Fosc without divider)
	// 0x0F value gives minimum frequency (minimum Fosc divided by 16)
	// The higher display frequency decreases image flickering but increases current consumption and vice versa
	SH1106_cmd_double(SH1106_CMD_CLOCKDIV, 0xF0);
 8000994:	21f0      	movs	r1, #240	; 0xf0
 8000996:	20d5      	movs	r0, #213	; 0xd5
 8000998:	f7ff ffe0 	bl	800095c <SH1106_cmd_double>

	// set multiplex ratio (visible lines)
	SH1106_cmd_double(SH1106_CMD_setMUX, 0x3F); // 64MUX
 800099c:	213f      	movs	r1, #63	; 0x3f
 800099e:	20a8      	movs	r0, #168	; 0xa8
 80009a0:	f7ff ffdc 	bl	800095c <SH1106_cmd_double>

	// set display offset (offset of first line from the top of display)
	SH1106_cmd_double(SH1106_CMD_setOFFS, 0x00); // Offset: 0
 80009a4:	2100      	movs	r1, #0
 80009a6:	20d3      	movs	r0, #211	; 0xd3
 80009a8:	f7ff ffd8 	bl	800095c <SH1106_cmd_double>

	// set display start line (first line displayed)
	SH1106_cmd(SH1106_CMD_STARTLINE | 0x00); // Start line: 0
 80009ac:	2040      	movs	r0, #64	; 0x40
 80009ae:	f7ff ffbd 	bl	800092c <SH1106_cmd>

	// set charge pump
	SH1106_cmd_double(0xAD, 0x8A);
 80009b2:	218a      	movs	r1, #138	; 0x8a
 80009b4:	20ad      	movs	r0, #173	; 0xad
 80009b6:	f7ff ffd1 	bl	800095c <SH1106_cmd_double>

	// set segment re-map (x coordinate)
	SH1106_cmd(SH1106_CMD_SEG_NORM);
 80009ba:	20a0      	movs	r0, #160	; 0xa0
 80009bc:	f7ff ffb6 	bl	800092c <SH1106_cmd>

	// set COM output scan direction (y coordinate)
	SH1106_cmd(SH1106_CMD_COM_NORM);
 80009c0:	20c0      	movs	r0, #192	; 0xc0
 80009c2:	f7ff ffb3 	bl	800092c <SH1106_cmd>
	// set COM pins hardware configuration
	// bit[4]: reset - sequential COM pin configuration
	//         set   - alternative COM pin configuration (reset value)
	// bit[5]: reset - disable COM left/right remap (reset value)
	//         set   - enable COM left/right remap
	SH1106_cmd_double(SH1106_CMD_COM_HW, 0x12);
 80009c6:	2112      	movs	r1, #18
 80009c8:	20da      	movs	r0, #218	; 0xda
 80009ca:	f7ff ffc7 	bl	800095c <SH1106_cmd_double>

	// set contrast control
	SH1106_cmd_double(SH1106_CMD_CONTRAST, 0xFF); // Contrast: max level
 80009ce:	21ff      	movs	r1, #255	; 0xff
 80009d0:	2081      	movs	r0, #129	; 0x81
 80009d2:	f7ff ffc3 	bl	800095c <SH1106_cmd_double>

	// set pre-charge period
	SH1106_cmd_double(0xD9, 0x1F);
 80009d6:	211f      	movs	r1, #31
 80009d8:	20d9      	movs	r0, #217	; 0xd9
 80009da:	f7ff ffbf 	bl	800095c <SH1106_cmd_double>

	// set VCOMH deselect
	SH1106_cmd_double(0xDB, 0x40);
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	20db      	movs	r0, #219	; 0xdb
 80009e2:	f7ff ffbb 	bl	800095c <SH1106_cmd_double>

	// set VPP
	SH1106_cmd(0x33);
 80009e6:	2033      	movs	r0, #51	; 0x33
 80009e8:	f7ff ffa0 	bl	800092c <SH1106_cmd>

	// Disable display inversion
	//SH1106_cmd(SH1106_CMD_INV_ON); // Normal display mode

	HAL_Delay(100);
 80009ec:	2064      	movs	r0, #100	; 0x64
 80009ee:	f000 fa7b 	bl	8000ee8 <HAL_Delay>

	// Display ON
	SH1106_cmd(SH1106_CMD_DISP_ON); // Display enabled
 80009f2:	20af      	movs	r0, #175	; 0xaf
 80009f4:	f7ff ff9a 	bl	800092c <SH1106_cmd>

	HAL_Delay(100);
 80009f8:	2064      	movs	r0, #100	; 0x64
 80009fa:	f000 fa75 	bl	8000ee8 <HAL_Delay>

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <SH1106_setAllPixelsOn>:
// set entire LCD pixels on or off
// input:
//   eon_state - new pixels state (one of SH1106_ENTIRE_PIXELS_XXX values)
// note: SH1106_ENTIRE_PIXELS_ON means what all pixels on display will be on
//       without regard of display memory contents
void SH1106_setAllPixelsOn(uint8_t eon_state) {
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	71fb      	strb	r3, [r7, #7]
	SH1106_cmd(eon_state ? SH1106_CMD_EDON : SH1106_CMD_EDOFF);
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SH1106_setAllPixelsOn+0x14>
 8000a12:	23a5      	movs	r3, #165	; 0xa5
 8000a14:	e000      	b.n	8000a18 <SH1106_setAllPixelsOn+0x16>
 8000a16:	23a4      	movs	r3, #164	; 0xa4
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff87 	bl	800092c <SH1106_cmd>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <SH1106_flush>:
	scr_orientation = orientation;
}

// Send vRAM buffer into display

void SH1106_flush(void) {
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af02      	add	r7, sp, #8

	const uint32_t bits_h = SCR_H >> 3;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	60fb      	str	r3, [r7, #12]

	uint8_t ram_pointer[] = {
 8000a32:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <SH1106_flush+0x70>)
 8000a34:	463b      	mov	r3, r7
 8000a36:	6812      	ldr	r2, [r2, #0]
 8000a38:	4611      	mov	r1, r2
 8000a3a:	8019      	strh	r1, [r3, #0]
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	0c12      	lsrs	r2, r2, #16
 8000a40:	701a      	strb	r2, [r3, #0]
	SH1106_CMD_COL_LOW | 0x02,
	SH1106_CMD_COL_HIGH, 0 };

	uint8_t *page_addr = &ram_pointer[2];
 8000a42:	463b      	mov	r3, r7
 8000a44:	3302      	adds	r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]

	for (register uint32_t page = 0; page < bits_h; ++page) {
 8000a48:	2400      	movs	r4, #0
 8000a4a:	e01c      	b.n	8000a86 <SH1106_flush+0x5e>
		(*page_addr) = SH1106_CMD_PAGE_ADDR | page;
 8000a4c:	b2e3      	uxtb	r3, r4
 8000a4e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1,
 8000a58:	463a      	mov	r2, r7
 8000a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2303      	movs	r3, #3
 8000a62:	2178      	movs	r1, #120	; 0x78
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <SH1106_flush+0x74>)
 8000a66:	f001 f85b 	bl	8001b20 <HAL_I2C_Master_Transmit>
				(uint8_t*) ram_pointer, sizeof(ram_pointer), 1000);

		uint8_t *vram = &vRAM[page * SCR_W ];
 8000a6a:	01e3      	lsls	r3, r4, #7
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	; (8000aa0 <SH1106_flush+0x78>)
 8000a6e:	4413      	add	r3, r2
 8000a70:	607b      	str	r3, [r7, #4]

		HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, vram, SCR_W,
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	2178      	movs	r1, #120	; 0x78
 8000a7e:	4807      	ldr	r0, [pc, #28]	; (8000a9c <SH1106_flush+0x74>)
 8000a80:	f001 f84e 	bl	8001b20 <HAL_I2C_Master_Transmit>
	for (register uint32_t page = 0; page < bits_h; ++page) {
 8000a84:	3401      	adds	r4, #1
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	429c      	cmp	r4, r3
 8000a8a:	d3df      	bcc.n	8000a4c <SH1106_flush+0x24>
				1000);
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd90      	pop	{r4, r7, pc}
 8000a96:	bf00      	nop
 8000a98:	08003030 	.word	0x08003030
 8000a9c:	200000ac 	.word	0x200000ac
 8000aa0:	2000014c 	.word	0x2000014c

08000aa4 <SH1106_pixel>:
//   Mode - pixel mode (one of SH1106_PXXX values)
#if (SH1106_OPT_PIXEL)
__attribute__((always_inline)) void SH1106_pixel(uint8_t x, uint8_t y,
		uint8_t Mode) {
#else
void SH1106_pixel(uint8_t x, uint8_t y, uint8_t Mode) {
 8000aa4:	b4b0      	push	{r4, r5, r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	71bb      	strb	r3, [r7, #6]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	717b      	strb	r3, [r7, #5]
	register uint32_t bpos;

	// Offset of pixel in the vRAM array must be computed by formula ((y >> 3) * SCR_W) + x
	// Since screen is 128 pixel width the formula can be simplified to ((y >> 3) << 7) + x
	// For 90 degree rotation x and y must be swapped
	if (scr_orientation == SH1106_ORIENT_CW
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <SH1106_pixel+0xb4>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d003      	beq.n	8000ac6 <SH1106_pixel+0x22>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <SH1106_pixel+0xb4>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d10a      	bne.n	8000adc <SH1106_pixel+0x38>
		offset = ((x >> 3) << 7) + y;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	01da      	lsls	r2, r3, #7
 8000ace:	79bb      	ldrb	r3, [r7, #6]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 0507 	and.w	r5, r3, #7
 8000ada:	e009      	b.n	8000af0 <SH1106_pixel+0x4c>
	} else {
		offset = ((y >> 3) << 7) + x;
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	01da      	lsls	r2, r3, #7
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8000aea:	79bb      	ldrb	r3, [r7, #6]
 8000aec:	f003 0507 	and.w	r5, r3, #7
	}

	// Return if offset went out outside of vRAM
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8000af0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8000af4:	d82b      	bhi.n	8000b4e <SH1106_pixel+0xaa>
		default:
			*(uint32_t *)(SRAM_BB_BASE + (((uint32_t)((void *)(&vRAM[offset])) - SRAM_BASE) << 5) + (bpos << 2))  = 1;
			break;
	}
#else // (SH1106_USE_BITBAND)
	switch (Mode) {
 8000af6:	797b      	ldrb	r3, [r7, #5]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d002      	beq.n	8000b02 <SH1106_pixel+0x5e>
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d00e      	beq.n	8000b1e <SH1106_pixel+0x7a>
 8000b00:	e019      	b.n	8000b36 <SH1106_pixel+0x92>
	case SH1106_PRES:
		vRAM[offset] &= ~(1 << bpos);
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <SH1106_pixel+0xb8>)
 8000b04:	5d1b      	ldrb	r3, [r3, r4]
 8000b06:	b25a      	sxtb	r2, r3
 8000b08:	2301      	movs	r3, #1
 8000b0a:	40ab      	lsls	r3, r5
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	4013      	ands	r3, r2
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <SH1106_pixel+0xb8>)
 8000b1a:	551a      	strb	r2, [r3, r4]
		break;
 8000b1c:	e018      	b.n	8000b50 <SH1106_pixel+0xac>
	case SH1106_PINV:
		vRAM[offset] ^= (1 << bpos);
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <SH1106_pixel+0xb8>)
 8000b20:	5d1b      	ldrb	r3, [r3, r4]
 8000b22:	b25a      	sxtb	r2, r3
 8000b24:	2301      	movs	r3, #1
 8000b26:	40ab      	lsls	r3, r5
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	4053      	eors	r3, r2
 8000b2c:	b25b      	sxtb	r3, r3
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <SH1106_pixel+0xb8>)
 8000b32:	551a      	strb	r2, [r3, r4]
		break;
 8000b34:	e00c      	b.n	8000b50 <SH1106_pixel+0xac>
	default:
		vRAM[offset] |= (1 << bpos);
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <SH1106_pixel+0xb8>)
 8000b38:	5d1b      	ldrb	r3, [r3, r4]
 8000b3a:	b25a      	sxtb	r2, r3
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	40ab      	lsls	r3, r5
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	4313      	orrs	r3, r2
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SH1106_pixel+0xb8>)
 8000b4a:	551a      	strb	r2, [r3, r4]
		break;
 8000b4c:	e000      	b.n	8000b50 <SH1106_pixel+0xac>
		return;
 8000b4e:	bf00      	nop
	}
#endif // SH1106_USE_BITBAND
}
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bcb0      	pop	{r4, r5, r7}
 8000b56:	4770      	bx	lr
 8000b58:	2000014b 	.word	0x2000014b
 8000b5c:	2000014c 	.word	0x2000014c

08000b60 <SH1106_drawCircle>:

// Draw circle
// input:
//   x_,x_ - circle center coordinates
//   radius - circle radius
void SH1106_drawCircle(int16_t x_, int16_t y_, uint8_t radius) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	70fb      	strb	r3, [r7, #3]
	int16_t err = 1 - radius;
 8000b72:	78fb      	ldrb	r3, [r7, #3]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	f1c3 0301 	rsb	r3, r3, #1
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	82fb      	strh	r3, [r7, #22]
	int16_t dx = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	82bb      	strh	r3, [r7, #20]
	int16_t dy = -2 * radius;
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	461a      	mov	r2, r3
 8000b88:	03d2      	lsls	r2, r2, #15
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	823b      	strh	r3, [r7, #16]
	int16_t y = radius;
 8000b96:	78fb      	ldrb	r3, [r7, #3]
 8000b98:	81fb      	strh	r3, [r7, #14]
	// Screen width and height for less calculations
	int16_t sh = scr_height - 1;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <SH1106_drawCircle+0x50>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	81bb      	strh	r3, [r7, #12]
	int16_t sw = scr_width - 1;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <SH1106_drawCircle+0x54>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	817b      	strh	r3, [r7, #10]

	while (x < y) {
 8000bae:	e10f      	b.n	8000dd0 <SH1106_drawCircle+0x270>
 8000bb0:	20000056 	.word	0x20000056
 8000bb4:	20000054 	.word	0x20000054
		if (err >= 0) {
 8000bb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0e      	blt.n	8000bde <SH1106_drawCircle+0x7e>
			dy += 2;
 8000bc0:	8a7b      	ldrh	r3, [r7, #18]
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	827b      	strh	r3, [r7, #18]
			err += dy;
 8000bc8:	8afa      	ldrh	r2, [r7, #22]
 8000bca:	8a7b      	ldrh	r3, [r7, #18]
 8000bcc:	4413      	add	r3, r2
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	82fb      	strh	r3, [r7, #22]
			y--;
 8000bd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	81fb      	strh	r3, [r7, #14]
		}
		dx += 2;
 8000bde:	8abb      	ldrh	r3, [r7, #20]
 8000be0:	3302      	adds	r3, #2
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	82bb      	strh	r3, [r7, #20]
		err += dx + 1;
 8000be6:	8aba      	ldrh	r2, [r7, #20]
 8000be8:	8afb      	ldrh	r3, [r7, #22]
 8000bea:	4413      	add	r3, r2
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	82fb      	strh	r3, [r7, #22]
		x++;
 8000bf4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	823b      	strh	r3, [r7, #16]

		// Draw eight pixels of each octant
		if (x_ + x < sw) {
 8000c00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c04:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c08:	441a      	add	r2, r3
 8000c0a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	da31      	bge.n	8000c76 <SH1106_drawCircle+0x116>
			if (y_ + y < sh)
 8000c12:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1a:	441a      	add	r2, r3
 8000c1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	da10      	bge.n	8000c46 <SH1106_drawCircle+0xe6>
				SH1106_pixel(x_ + x, y_ + y, SH1106_PixelMode);
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	8a3b      	ldrh	r3, [r7, #16]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b2d8      	uxtb	r0, r3
 8000c30:	88bb      	ldrh	r3, [r7, #4]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	89fb      	ldrh	r3, [r7, #14]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4413      	add	r3, r2
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	4a90      	ldr	r2, [pc, #576]	; (8000e80 <SH1106_drawCircle+0x320>)
 8000c3e:	7812      	ldrb	r2, [r2, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f7ff ff2f 	bl	8000aa4 <SH1106_pixel>
			if (y_ - y > -1)
 8000c46:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db10      	blt.n	8000c76 <SH1106_drawCircle+0x116>
				SH1106_pixel(x_ + x, y_ - y, SH1106_PixelMode);
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	8a3b      	ldrh	r3, [r7, #16]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	b2d8      	uxtb	r0, r3
 8000c60:	88bb      	ldrh	r3, [r7, #4]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4a84      	ldr	r2, [pc, #528]	; (8000e80 <SH1106_drawCircle+0x320>)
 8000c6e:	7812      	ldrb	r2, [r2, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f7ff ff17 	bl	8000aa4 <SH1106_pixel>
		}
		if (x_ - x > -1) {
 8000c76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c7a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db31      	blt.n	8000ce8 <SH1106_drawCircle+0x188>
			if (y_ + y < sh)
 8000c84:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c8c:	441a      	add	r2, r3
 8000c8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	da10      	bge.n	8000cb8 <SH1106_drawCircle+0x158>
				SH1106_pixel(x_ - x, y_ + y, SH1106_PixelMode);
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	8a3b      	ldrh	r3, [r7, #16]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	b2d8      	uxtb	r0, r3
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	89fb      	ldrh	r3, [r7, #14]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	4413      	add	r3, r2
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4a74      	ldr	r2, [pc, #464]	; (8000e80 <SH1106_drawCircle+0x320>)
 8000cb0:	7812      	ldrb	r2, [r2, #0]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f7ff fef6 	bl	8000aa4 <SH1106_pixel>
			if (y_ - y > -1)
 8000cb8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000cbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db10      	blt.n	8000ce8 <SH1106_drawCircle+0x188>
				SH1106_pixel(x_ - x, y_ - y, SH1106_PixelMode);
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	8a3b      	ldrh	r3, [r7, #16]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	b2d8      	uxtb	r0, r3
 8000cd2:	88bb      	ldrh	r3, [r7, #4]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	89fb      	ldrh	r3, [r7, #14]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	4a68      	ldr	r2, [pc, #416]	; (8000e80 <SH1106_drawCircle+0x320>)
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f7ff fede 	bl	8000aa4 <SH1106_pixel>
		}
		if (x_ + y < sw) {
 8000ce8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000cec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cf0:	441a      	add	r2, r3
 8000cf2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	da31      	bge.n	8000d5e <SH1106_drawCircle+0x1fe>
			if (y_ + x < sh)
 8000cfa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000cfe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d02:	441a      	add	r2, r3
 8000d04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	da10      	bge.n	8000d2e <SH1106_drawCircle+0x1ce>
				SH1106_pixel(x_ + y, y_ + x, SH1106_PixelMode);
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	4413      	add	r3, r2
 8000d16:	b2d8      	uxtb	r0, r3
 8000d18:	88bb      	ldrh	r3, [r7, #4]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	8a3b      	ldrh	r3, [r7, #16]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4413      	add	r3, r2
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	4a56      	ldr	r2, [pc, #344]	; (8000e80 <SH1106_drawCircle+0x320>)
 8000d26:	7812      	ldrb	r2, [r2, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f7ff febb 	bl	8000aa4 <SH1106_pixel>
			if (y_ - x > -1)
 8000d2e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d32:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db10      	blt.n	8000d5e <SH1106_drawCircle+0x1fe>
				SH1106_pixel(x_ + y, y_ - x, SH1106_PixelMode);
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	89fb      	ldrh	r3, [r7, #14]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	b2d8      	uxtb	r0, r3
 8000d48:	88bb      	ldrh	r3, [r7, #4]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	8a3b      	ldrh	r3, [r7, #16]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4a4a      	ldr	r2, [pc, #296]	; (8000e80 <SH1106_drawCircle+0x320>)
 8000d56:	7812      	ldrb	r2, [r2, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f7ff fea3 	bl	8000aa4 <SH1106_pixel>
		}
		if (x_ - y > -1) {
 8000d5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db31      	blt.n	8000dd0 <SH1106_drawCircle+0x270>
			if (y_ + x < sh)
 8000d6c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d70:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d74:	441a      	add	r2, r3
 8000d76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	da10      	bge.n	8000da0 <SH1106_drawCircle+0x240>
				SH1106_pixel(x_ - y, y_ + x, SH1106_PixelMode);
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	89fb      	ldrh	r3, [r7, #14]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	b2d8      	uxtb	r0, r3
 8000d8a:	88bb      	ldrh	r3, [r7, #4]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	8a3b      	ldrh	r3, [r7, #16]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4413      	add	r3, r2
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	4a3a      	ldr	r2, [pc, #232]	; (8000e80 <SH1106_drawCircle+0x320>)
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f7ff fe82 	bl	8000aa4 <SH1106_pixel>
			if (y_ - x > -1)
 8000da0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000da4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db10      	blt.n	8000dd0 <SH1106_drawCircle+0x270>
				SH1106_pixel(x_ - y, y_ - x, SH1106_PixelMode);
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	b2d8      	uxtb	r0, r3
 8000dba:	88bb      	ldrh	r3, [r7, #4]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	8a3b      	ldrh	r3, [r7, #16]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4a2e      	ldr	r2, [pc, #184]	; (8000e80 <SH1106_drawCircle+0x320>)
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f7ff fe6a 	bl	8000aa4 <SH1106_pixel>
	while (x < y) {
 8000dd0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000dd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	f6ff aeed 	blt.w	8000bb8 <SH1106_drawCircle+0x58>
		}
	}

	// Vertical and horizontal points
	if (x_ + radius < sw)
 8000dde:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000de2:	78fb      	ldrb	r3, [r7, #3]
 8000de4:	441a      	add	r2, r3
 8000de6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	da0b      	bge.n	8000e06 <SH1106_drawCircle+0x2a6>
		SH1106_pixel(x_ + radius, y_, SH1106_PixelMode);
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	4413      	add	r3, r2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	88ba      	ldrh	r2, [r7, #4]
 8000dfa:	b2d1      	uxtb	r1, r2
 8000dfc:	4a20      	ldr	r2, [pc, #128]	; (8000e80 <SH1106_drawCircle+0x320>)
 8000dfe:	7812      	ldrb	r2, [r2, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fe4f 	bl	8000aa4 <SH1106_pixel>
	if (x_ - radius > -1)
 8000e06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db0b      	blt.n	8000e2a <SH1106_drawCircle+0x2ca>
		SH1106_pixel(x_ - radius, y_, SH1106_PixelMode);
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	78fb      	ldrb	r3, [r7, #3]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	88ba      	ldrh	r2, [r7, #4]
 8000e1e:	b2d1      	uxtb	r1, r2
 8000e20:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <SH1106_drawCircle+0x320>)
 8000e22:	7812      	ldrb	r2, [r2, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fe3d 	bl	8000aa4 <SH1106_pixel>
	if (y_ + radius < sh)
 8000e2a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	441a      	add	r2, r3
 8000e32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	da0b      	bge.n	8000e52 <SH1106_drawCircle+0x2f2>
		SH1106_pixel(x_, y_ + radius, SH1106_PixelMode);
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	b2d8      	uxtb	r0, r3
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	78fb      	ldrb	r3, [r7, #3]
 8000e44:	4413      	add	r3, r2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <SH1106_drawCircle+0x320>)
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f7ff fe29 	bl	8000aa4 <SH1106_pixel>
	if (y_ - radius > -1)
 8000e52:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e56:	78fb      	ldrb	r3, [r7, #3]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	db0b      	blt.n	8000e76 <SH1106_drawCircle+0x316>
		SH1106_pixel(x_, y_ - radius, SH1106_PixelMode);
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	b2d8      	uxtb	r0, r3
 8000e62:	88bb      	ldrh	r3, [r7, #4]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	78fb      	ldrb	r3, [r7, #3]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <SH1106_drawCircle+0x320>)
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff fe17 	bl	8000aa4 <SH1106_pixel>
}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000014a 	.word	0x2000014a

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x28>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 fb07 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f7ff fc1c 	bl	80006d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fbe0 	bl	8000664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_IncTick+0x1c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	2000005c 	.word	0x2000005c
 8000ed0:	2000054c 	.word	0x2000054c

08000ed4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <HAL_GetTick+0x10>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	2000054c 	.word	0x2000054c

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff fff0 	bl	8000ed4 <HAL_GetTick>
 8000ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_Delay+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f0e:	bf00      	nop
 8000f10:	f7ff ffe0 	bl	8000ed4 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000005c 	.word	0x2000005c

08000f30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e0be      	b.n	80010d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d109      	bne.n	8000f74 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff f92a 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 f9ab 	bl	80012d0 <ADC_ConversionStop_Disable>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f040 8099 	bne.w	80010be <HAL_ADC_Init+0x18e>
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f040 8095 	bne.w	80010be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f9c:	f023 0302 	bic.w	r3, r3, #2
 8000fa0:	f043 0202 	orr.w	r2, r3, #2
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fb0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7b1b      	ldrb	r3, [r3, #12]
 8000fb6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fb8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fc8:	d003      	beq.n	8000fd2 <HAL_ADC_Init+0xa2>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d102      	bne.n	8000fd8 <HAL_ADC_Init+0xa8>
 8000fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd6:	e000      	b.n	8000fda <HAL_ADC_Init+0xaa>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7d1b      	ldrb	r3, [r3, #20]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d119      	bne.n	800101c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7b1b      	ldrb	r3, [r3, #12]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d109      	bne.n	8001004 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	035a      	lsls	r2, r3, #13
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	e00b      	b.n	800101c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	f043 0220 	orr.w	r2, r3, #32
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001014:	f043 0201 	orr.w	r2, r3, #1
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	430a      	orrs	r2, r1
 800102e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <HAL_ADC_Init+0x1a8>)
 8001038:	4013      	ands	r3, r2
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6812      	ldr	r2, [r2, #0]
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	430b      	orrs	r3, r1
 8001042:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800104c:	d003      	beq.n	8001056 <HAL_ADC_Init+0x126>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d104      	bne.n	8001060 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	3b01      	subs	r3, #1
 800105c:	051b      	lsls	r3, r3, #20
 800105e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001066:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	430a      	orrs	r2, r1
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_ADC_Init+0x1ac>)
 800107c:	4013      	ands	r3, r2
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	429a      	cmp	r2, r3
 8001082:	d10b      	bne.n	800109c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108e:	f023 0303 	bic.w	r3, r3, #3
 8001092:	f043 0201 	orr.w	r2, r3, #1
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800109a:	e018      	b.n	80010ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	f023 0312 	bic.w	r3, r3, #18
 80010a4:	f043 0210 	orr.w	r2, r3, #16
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b0:	f043 0201 	orr.w	r2, r3, #1
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010bc:	e007      	b.n	80010ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c2:	f043 0210 	orr.w	r2, r3, #16
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	ffe1f7fd 	.word	0xffe1f7fd
 80010dc:	ff1f0efe 	.word	0xff1f0efe

080010e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <HAL_ADC_ConfigChannel+0x20>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e0dc      	b.n	80012ba <HAL_ADC_ConfigChannel+0x1da>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b06      	cmp	r3, #6
 800110e:	d81c      	bhi.n	800114a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	3b05      	subs	r3, #5
 8001122:	221f      	movs	r2, #31
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	4019      	ands	r1, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	3b05      	subs	r3, #5
 800113c:	fa00 f203 	lsl.w	r2, r0, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
 8001148:	e03c      	b.n	80011c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b0c      	cmp	r3, #12
 8001150:	d81c      	bhi.n	800118c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	3b23      	subs	r3, #35	; 0x23
 8001164:	221f      	movs	r2, #31
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	4019      	ands	r1, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	3b23      	subs	r3, #35	; 0x23
 800117e:	fa00 f203 	lsl.w	r2, r0, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	631a      	str	r2, [r3, #48]	; 0x30
 800118a:	e01b      	b.n	80011c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	3b41      	subs	r3, #65	; 0x41
 800119e:	221f      	movs	r2, #31
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4019      	ands	r1, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	3b41      	subs	r3, #65	; 0x41
 80011b8:	fa00 f203 	lsl.w	r2, r0, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b09      	cmp	r3, #9
 80011ca:	d91c      	bls.n	8001206 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68d9      	ldr	r1, [r3, #12]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	3b1e      	subs	r3, #30
 80011de:	2207      	movs	r2, #7
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4019      	ands	r1, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6898      	ldr	r0, [r3, #8]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	3b1e      	subs	r3, #30
 80011f8:	fa00 f203 	lsl.w	r2, r0, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	e019      	b.n	800123a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6919      	ldr	r1, [r3, #16]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	2207      	movs	r2, #7
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	4019      	ands	r1, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	6898      	ldr	r0, [r3, #8]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	fa00 f203 	lsl.w	r2, r0, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b10      	cmp	r3, #16
 8001240:	d003      	beq.n	800124a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001246:	2b11      	cmp	r3, #17
 8001248:	d132      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d125      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d126      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001270:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b10      	cmp	r3, #16
 8001278:	d11a      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <HAL_ADC_ConfigChannel+0x1ec>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0c9a      	lsrs	r2, r3, #18
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001290:	e002      	b.n	8001298 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	3b01      	subs	r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f9      	bne.n	8001292 <HAL_ADC_ConfigChannel+0x1b2>
 800129e:	e007      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	f043 0220 	orr.w	r2, r3, #32
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	40012400 	.word	0x40012400
 80012c8:	20000050 	.word	0x20000050
 80012cc:	431bde83 	.word	0x431bde83

080012d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d12e      	bne.n	8001348 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0201 	bic.w	r2, r2, #1
 80012f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012fa:	f7ff fdeb 	bl	8000ed4 <HAL_GetTick>
 80012fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001300:	e01b      	b.n	800133a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001302:	f7ff fde7 	bl	8000ed4 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d914      	bls.n	800133a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b01      	cmp	r3, #1
 800131c:	d10d      	bne.n	800133a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	f043 0210 	orr.w	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e007      	b.n	800134a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b01      	cmp	r3, #1
 8001346:	d0dc      	beq.n	8001302 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4906      	ldr	r1, [pc, #24]	; (80013ec <__NVIC_EnableIRQ+0x34>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	; (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff4f 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff64 	bl	800139c <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ffb2 	bl	8001444 <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff81 	bl	80013f0 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff57 	bl	80013b8 <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b08b      	sub	sp, #44	; 0x2c
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	e169      	b.n	80017fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001528:	2201      	movs	r2, #1
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 8158 	bne.w	80017f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4a9a      	ldr	r2, [pc, #616]	; (80017b4 <HAL_GPIO_Init+0x2a0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d05e      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001550:	4a98      	ldr	r2, [pc, #608]	; (80017b4 <HAL_GPIO_Init+0x2a0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d875      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001556:	4a98      	ldr	r2, [pc, #608]	; (80017b8 <HAL_GPIO_Init+0x2a4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d058      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 800155c:	4a96      	ldr	r2, [pc, #600]	; (80017b8 <HAL_GPIO_Init+0x2a4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d86f      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001562:	4a96      	ldr	r2, [pc, #600]	; (80017bc <HAL_GPIO_Init+0x2a8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d052      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001568:	4a94      	ldr	r2, [pc, #592]	; (80017bc <HAL_GPIO_Init+0x2a8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d869      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800156e:	4a94      	ldr	r2, [pc, #592]	; (80017c0 <HAL_GPIO_Init+0x2ac>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d04c      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001574:	4a92      	ldr	r2, [pc, #584]	; (80017c0 <HAL_GPIO_Init+0x2ac>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d863      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800157a:	4a92      	ldr	r2, [pc, #584]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d046      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001580:	4a90      	ldr	r2, [pc, #576]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d85d      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001586:	2b12      	cmp	r3, #18
 8001588:	d82a      	bhi.n	80015e0 <HAL_GPIO_Init+0xcc>
 800158a:	2b12      	cmp	r3, #18
 800158c:	d859      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800158e:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <HAL_GPIO_Init+0x80>)
 8001590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001594:	0800160f 	.word	0x0800160f
 8001598:	080015e9 	.word	0x080015e9
 800159c:	080015fb 	.word	0x080015fb
 80015a0:	0800163d 	.word	0x0800163d
 80015a4:	08001643 	.word	0x08001643
 80015a8:	08001643 	.word	0x08001643
 80015ac:	08001643 	.word	0x08001643
 80015b0:	08001643 	.word	0x08001643
 80015b4:	08001643 	.word	0x08001643
 80015b8:	08001643 	.word	0x08001643
 80015bc:	08001643 	.word	0x08001643
 80015c0:	08001643 	.word	0x08001643
 80015c4:	08001643 	.word	0x08001643
 80015c8:	08001643 	.word	0x08001643
 80015cc:	08001643 	.word	0x08001643
 80015d0:	08001643 	.word	0x08001643
 80015d4:	08001643 	.word	0x08001643
 80015d8:	080015f1 	.word	0x080015f1
 80015dc:	08001605 	.word	0x08001605
 80015e0:	4a79      	ldr	r2, [pc, #484]	; (80017c8 <HAL_GPIO_Init+0x2b4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015e6:	e02c      	b.n	8001642 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	623b      	str	r3, [r7, #32]
          break;
 80015ee:	e029      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	3304      	adds	r3, #4
 80015f6:	623b      	str	r3, [r7, #32]
          break;
 80015f8:	e024      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	3308      	adds	r3, #8
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e01f      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	330c      	adds	r3, #12
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e01a      	b.n	8001644 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001616:	2304      	movs	r3, #4
 8001618:	623b      	str	r3, [r7, #32]
          break;
 800161a:	e013      	b.n	8001644 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	611a      	str	r2, [r3, #16]
          break;
 800162e:	e009      	b.n	8001644 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001630:	2308      	movs	r3, #8
 8001632:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	615a      	str	r2, [r3, #20]
          break;
 800163a:	e003      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	e000      	b.n	8001644 <HAL_GPIO_Init+0x130>
          break;
 8001642:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2bff      	cmp	r3, #255	; 0xff
 8001648:	d801      	bhi.n	800164e <HAL_GPIO_Init+0x13a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	e001      	b.n	8001652 <HAL_GPIO_Init+0x13e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3304      	adds	r3, #4
 8001652:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2bff      	cmp	r3, #255	; 0xff
 8001658:	d802      	bhi.n	8001660 <HAL_GPIO_Init+0x14c>
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	e002      	b.n	8001666 <HAL_GPIO_Init+0x152>
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	3b08      	subs	r3, #8
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	210f      	movs	r1, #15
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	401a      	ands	r2, r3
 8001678:	6a39      	ldr	r1, [r7, #32]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	431a      	orrs	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80b1 	beq.w	80017f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001694:	4b4d      	ldr	r3, [pc, #308]	; (80017cc <HAL_GPIO_Init+0x2b8>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <HAL_GPIO_Init+0x2b8>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6193      	str	r3, [r2, #24]
 80016a0:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <HAL_GPIO_Init+0x2b8>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016ac:	4a48      	ldr	r2, [pc, #288]	; (80017d0 <HAL_GPIO_Init+0x2bc>)
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	220f      	movs	r2, #15
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a40      	ldr	r2, [pc, #256]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d013      	beq.n	8001700 <HAL_GPIO_Init+0x1ec>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a3f      	ldr	r2, [pc, #252]	; (80017d8 <HAL_GPIO_Init+0x2c4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00d      	beq.n	80016fc <HAL_GPIO_Init+0x1e8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a3e      	ldr	r2, [pc, #248]	; (80017dc <HAL_GPIO_Init+0x2c8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d007      	beq.n	80016f8 <HAL_GPIO_Init+0x1e4>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a3d      	ldr	r2, [pc, #244]	; (80017e0 <HAL_GPIO_Init+0x2cc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_GPIO_Init+0x1e0>
 80016f0:	2303      	movs	r3, #3
 80016f2:	e006      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 80016f4:	2304      	movs	r3, #4
 80016f6:	e004      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 8001700:	2300      	movs	r3, #0
 8001702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001704:	f002 0203 	and.w	r2, r2, #3
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	4093      	lsls	r3, r2
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001712:	492f      	ldr	r1, [pc, #188]	; (80017d0 <HAL_GPIO_Init+0x2bc>)
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800172c:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	492c      	ldr	r1, [pc, #176]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	600b      	str	r3, [r1, #0]
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	43db      	mvns	r3, r3
 8001742:	4928      	ldr	r1, [pc, #160]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001744:	4013      	ands	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001754:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4922      	ldr	r1, [pc, #136]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	43db      	mvns	r3, r3
 800176a:	491e      	ldr	r1, [pc, #120]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 800176c:	4013      	ands	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	4918      	ldr	r1, [pc, #96]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	608b      	str	r3, [r1, #8]
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	43db      	mvns	r3, r3
 8001792:	4914      	ldr	r1, [pc, #80]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001794:	4013      	ands	r3, r2
 8001796:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d021      	beq.n	80017e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	490e      	ldr	r1, [pc, #56]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60cb      	str	r3, [r1, #12]
 80017b0:	e021      	b.n	80017f6 <HAL_GPIO_Init+0x2e2>
 80017b2:	bf00      	nop
 80017b4:	10320000 	.word	0x10320000
 80017b8:	10310000 	.word	0x10310000
 80017bc:	10220000 	.word	0x10220000
 80017c0:	10210000 	.word	0x10210000
 80017c4:	10120000 	.word	0x10120000
 80017c8:	10110000 	.word	0x10110000
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40010800 	.word	0x40010800
 80017d8:	40010c00 	.word	0x40010c00
 80017dc:	40011000 	.word	0x40011000
 80017e0:	40011400 	.word	0x40011400
 80017e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_GPIO_Init+0x304>)
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	4909      	ldr	r1, [pc, #36]	; (8001818 <HAL_GPIO_Init+0x304>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	3301      	adds	r3, #1
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	fa22 f303 	lsr.w	r3, r2, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	f47f ae8e 	bne.w	8001528 <HAL_GPIO_Init+0x14>
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	372c      	adds	r7, #44	; 0x2c
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40010400 	.word	0x40010400

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	611a      	str	r2, [r3, #16]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4013      	ands	r3, r2
 8001864:	041a      	lsls	r2, r3, #16
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43d9      	mvns	r1, r3
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	400b      	ands	r3, r1
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	611a      	str	r2, [r3, #16]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe0e 	bl	80004ac <HAL_GPIO_EXTI_Callback>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e12b      	b.n	8001b02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7fe fdb6 	bl	8000430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2224      	movs	r2, #36	; 0x24
 80018c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018fc:	f000 ffea 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8001900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a81      	ldr	r2, [pc, #516]	; (8001b0c <HAL_I2C_Init+0x274>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d807      	bhi.n	800191c <HAL_I2C_Init+0x84>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a80      	ldr	r2, [pc, #512]	; (8001b10 <HAL_I2C_Init+0x278>)
 8001910:	4293      	cmp	r3, r2
 8001912:	bf94      	ite	ls
 8001914:	2301      	movls	r3, #1
 8001916:	2300      	movhi	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	e006      	b.n	800192a <HAL_I2C_Init+0x92>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4a7d      	ldr	r2, [pc, #500]	; (8001b14 <HAL_I2C_Init+0x27c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	bf94      	ite	ls
 8001924:	2301      	movls	r3, #1
 8001926:	2300      	movhi	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0e7      	b.n	8001b02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4a78      	ldr	r2, [pc, #480]	; (8001b18 <HAL_I2C_Init+0x280>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0c9b      	lsrs	r3, r3, #18
 800193c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a6a      	ldr	r2, [pc, #424]	; (8001b0c <HAL_I2C_Init+0x274>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d802      	bhi.n	800196c <HAL_I2C_Init+0xd4>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3301      	adds	r3, #1
 800196a:	e009      	b.n	8001980 <HAL_I2C_Init+0xe8>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	4a69      	ldr	r2, [pc, #420]	; (8001b1c <HAL_I2C_Init+0x284>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	3301      	adds	r3, #1
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	430b      	orrs	r3, r1
 8001986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001992:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	495c      	ldr	r1, [pc, #368]	; (8001b0c <HAL_I2C_Init+0x274>)
 800199c:	428b      	cmp	r3, r1
 800199e:	d819      	bhi.n	80019d4 <HAL_I2C_Init+0x13c>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1e59      	subs	r1, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ae:	1c59      	adds	r1, r3, #1
 80019b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019b4:	400b      	ands	r3, r1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <HAL_I2C_Init+0x138>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1e59      	subs	r1, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c8:	3301      	adds	r3, #1
 80019ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ce:	e051      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 80019d0:	2304      	movs	r3, #4
 80019d2:	e04f      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d111      	bne.n	8001a00 <HAL_I2C_Init+0x168>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1e58      	subs	r0, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	440b      	add	r3, r1
 80019ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e012      	b.n	8001a26 <HAL_I2C_Init+0x18e>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1e58      	subs	r0, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	0099      	lsls	r1, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Init+0x196>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e022      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10e      	bne.n	8001a54 <HAL_I2C_Init+0x1bc>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1e58      	subs	r0, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	440b      	add	r3, r1
 8001a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a52:	e00f      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e58      	subs	r0, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	0099      	lsls	r1, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	6809      	ldr	r1, [r1, #0]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69da      	ldr	r2, [r3, #28]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001aa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6911      	ldr	r1, [r2, #16]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68d2      	ldr	r2, [r2, #12]
 8001aae:	4311      	orrs	r1, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2220      	movs	r2, #32
 8001aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	000186a0 	.word	0x000186a0
 8001b10:	001e847f 	.word	0x001e847f
 8001b14:	003d08ff 	.word	0x003d08ff
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	10624dd3 	.word	0x10624dd3

08001b20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	817b      	strh	r3, [r7, #10]
 8001b30:	4613      	mov	r3, r2
 8001b32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff f9ce 	bl	8000ed4 <HAL_GetTick>
 8001b38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	f040 80e0 	bne.w	8001d08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2319      	movs	r3, #25
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4970      	ldr	r1, [pc, #448]	; (8001d14 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f964 	bl	8001e20 <I2C_WaitOnFlagUntilTimeout>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e0d3      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_I2C_Master_Transmit+0x50>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e0cc      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ea>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d007      	beq.n	8001b96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2221      	movs	r2, #33	; 0x21
 8001baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	893a      	ldrh	r2, [r7, #8]
 8001bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4a50      	ldr	r2, [pc, #320]	; (8001d18 <HAL_I2C_Master_Transmit+0x1f8>)
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bd8:	8979      	ldrh	r1, [r7, #10]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	6a3a      	ldr	r2, [r7, #32]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f89c 	bl	8001d1c <I2C_MasterRequestWrite>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e08d      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c04:	e066      	b.n	8001cd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	6a39      	ldr	r1, [r7, #32]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f9de 	bl	8001fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00d      	beq.n	8001c32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d107      	bne.n	8001c2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e06b      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_I2C_Master_Transmit+0x188>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d017      	beq.n	8001ca8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	781a      	ldrb	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	6a39      	ldr	r1, [r7, #32]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f9ce 	bl	800204e <I2C_WaitOnBTFFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d107      	bne.n	8001cd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e01a      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d194      	bne.n	8001c06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e000      	b.n	8001d0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d08:	2302      	movs	r3, #2
  }
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	00100002 	.word	0x00100002
 8001d18:	ffff0000 	.word	0xffff0000

08001d1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d006      	beq.n	8001d46 <I2C_MasterRequestWrite+0x2a>
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d003      	beq.n	8001d46 <I2C_MasterRequestWrite+0x2a>
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d44:	d108      	bne.n	8001d58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e00b      	b.n	8001d70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	2b12      	cmp	r3, #18
 8001d5e:	d107      	bne.n	8001d70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 f84f 	bl	8001e20 <I2C_WaitOnFlagUntilTimeout>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00d      	beq.n	8001da4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d96:	d103      	bne.n	8001da0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e035      	b.n	8001e10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dac:	d108      	bne.n	8001dc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dae:	897b      	ldrh	r3, [r7, #10]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	e01b      	b.n	8001df8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001dc0:	897b      	ldrh	r3, [r7, #10]
 8001dc2:	11db      	asrs	r3, r3, #7
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	f003 0306 	and.w	r3, r3, #6
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f063 030f 	orn	r3, r3, #15
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	490e      	ldr	r1, [pc, #56]	; (8001e18 <I2C_MasterRequestWrite+0xfc>)
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f875 	bl	8001ece <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e010      	b.n	8001e10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dee:	897b      	ldrh	r3, [r7, #10]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4907      	ldr	r1, [pc, #28]	; (8001e1c <I2C_MasterRequestWrite+0x100>)
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f865 	bl	8001ece <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	00010008 	.word	0x00010008
 8001e1c:	00010002 	.word	0x00010002

08001e20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e30:	e025      	b.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d021      	beq.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e3a:	f7ff f84b 	bl	8000ed4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d302      	bcc.n	8001e50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d116      	bne.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f043 0220 	orr.w	r2, r3, #32
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e023      	b.n	8001ec6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10d      	bne.n	8001ea4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4013      	ands	r3, r2
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf0c      	ite	eq
 8001e9a:	2301      	moveq	r3, #1
 8001e9c:	2300      	movne	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	e00c      	b.n	8001ebe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf0c      	ite	eq
 8001eb6:	2301      	moveq	r3, #1
 8001eb8:	2300      	movne	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d0b6      	beq.n	8001e32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001edc:	e051      	b.n	8001f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eec:	d123      	bne.n	8001f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f043 0204 	orr.w	r2, r3, #4
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e046      	b.n	8001fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d021      	beq.n	8001f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3e:	f7fe ffc9 	bl	8000ed4 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d302      	bcc.n	8001f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d116      	bne.n	8001f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f043 0220 	orr.w	r2, r3, #32
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e020      	b.n	8001fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10c      	bne.n	8001fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4013      	ands	r3, r2
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	e00b      	b.n	8001fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	43da      	mvns	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d18d      	bne.n	8001ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fd8:	e02d      	b.n	8002036 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f878 	bl	80020d0 <I2C_IsAcknowledgeFailed>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e02d      	b.n	8002046 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d021      	beq.n	8002036 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff2:	f7fe ff6f 	bl	8000ed4 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d302      	bcc.n	8002008 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d116      	bne.n	8002036 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f043 0220 	orr.w	r2, r3, #32
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e007      	b.n	8002046 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002040:	2b80      	cmp	r3, #128	; 0x80
 8002042:	d1ca      	bne.n	8001fda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800205a:	e02d      	b.n	80020b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f837 	bl	80020d0 <I2C_IsAcknowledgeFailed>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e02d      	b.n	80020c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002072:	d021      	beq.n	80020b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002074:	f7fe ff2e 	bl	8000ed4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	429a      	cmp	r2, r3
 8002082:	d302      	bcc.n	800208a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d116      	bne.n	80020b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e007      	b.n	80020c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d1ca      	bne.n	800205c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e6:	d11b      	bne.n	8002120 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f043 0204 	orr.w	r2, r3, #4
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e272      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8087 	beq.w	800225a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800214c:	4b92      	ldr	r3, [pc, #584]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	d00c      	beq.n	8002172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002158:	4b8f      	ldr	r3, [pc, #572]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d112      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
 8002164:	4b8c      	ldr	r3, [pc, #560]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d10b      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002172:	4b89      	ldr	r3, [pc, #548]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06c      	beq.n	8002258 <HAL_RCC_OscConfig+0x12c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d168      	bne.n	8002258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e24c      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x76>
 8002194:	4b80      	ldr	r3, [pc, #512]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a7f      	ldr	r2, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e02e      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x98>
 80021aa:	4b7b      	ldr	r3, [pc, #492]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7a      	ldr	r2, [pc, #488]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b78      	ldr	r3, [pc, #480]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a77      	ldr	r2, [pc, #476]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0xbc>
 80021ce:	4b72      	ldr	r3, [pc, #456]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a71      	ldr	r2, [pc, #452]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6e      	ldr	r2, [pc, #440]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021e8:	4b6b      	ldr	r3, [pc, #428]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6a      	ldr	r2, [pc, #424]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a67      	ldr	r2, [pc, #412]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe fe64 	bl	8000ed4 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7fe fe60 	bl	8000ed4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e200      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xe4>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fe50 	bl	8000ed4 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7fe fe4c 	bl	8000ed4 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1ec      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x10c>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002266:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002272:	4b49      	ldr	r3, [pc, #292]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
 800227e:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1c0      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4939      	ldr	r1, [pc, #228]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_RCC_OscConfig+0x270>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7fe fe05 	bl	8000ed4 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ce:	f7fe fe01 	bl	8000ed4 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1a1      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4927      	ldr	r1, [pc, #156]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b26      	ldr	r3, [pc, #152]	; (800239c <HAL_RCC_OscConfig+0x270>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe fde4 	bl	8000ed4 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002310:	f7fe fde0 	bl	8000ed4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e180      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d03a      	beq.n	80023b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d019      	beq.n	8002376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7fe fdc4 	bl	8000ed4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7fe fdc0 	bl	8000ed4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e160      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800236e:	2001      	movs	r0, #1
 8002370:	f000 fb08 	bl	8002984 <RCC_Delay>
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7fe fdaa 	bl	8000ed4 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002382:	e00f      	b.n	80023a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002384:	f7fe fda6 	bl	8000ed4 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d908      	bls.n	80023a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e146      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	42420000 	.word	0x42420000
 80023a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	4b92      	ldr	r3, [pc, #584]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e9      	bne.n	8002384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a6 	beq.w	800250a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b8b      	ldr	r3, [pc, #556]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10d      	bne.n	80023ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b88      	ldr	r3, [pc, #544]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a87      	ldr	r2, [pc, #540]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b85      	ldr	r3, [pc, #532]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b82      	ldr	r3, [pc, #520]	; (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d118      	bne.n	8002428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b7f      	ldr	r3, [pc, #508]	; (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7e      	ldr	r2, [pc, #504]	; (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7fe fd67 	bl	8000ed4 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240a:	f7fe fd63 	bl	8000ed4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	; 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e103      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4b75      	ldr	r3, [pc, #468]	; (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x312>
 8002430:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a6e      	ldr	r2, [pc, #440]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	e02d      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x334>
 8002446:	4b6a      	ldr	r3, [pc, #424]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a69      	ldr	r2, [pc, #420]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a66      	ldr	r2, [pc, #408]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	e01c      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x356>
 8002468:	4b61      	ldr	r3, [pc, #388]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a60      	ldr	r2, [pc, #384]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	4b5e      	ldr	r3, [pc, #376]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a5d      	ldr	r2, [pc, #372]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002482:	4b5b      	ldr	r3, [pc, #364]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a5a      	ldr	r2, [pc, #360]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6213      	str	r3, [r2, #32]
 800248e:	4b58      	ldr	r3, [pc, #352]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a57      	ldr	r2, [pc, #348]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d015      	beq.n	80024ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7fe fd17 	bl	8000ed4 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7fe fd13 	bl	8000ed4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0b1      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	4b4b      	ldr	r3, [pc, #300]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ee      	beq.n	80024aa <HAL_RCC_OscConfig+0x37e>
 80024cc:	e014      	b.n	80024f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7fe fd01 	bl	8000ed4 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fcfd 	bl	8000ed4 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e09b      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ee      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b3c      	ldr	r3, [pc, #240]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a3b      	ldr	r2, [pc, #236]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8087 	beq.w	8002622 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002514:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d061      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d146      	bne.n	80025b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe fcd1 	bl	8000ed4 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe fccd 	bl	8000ed4 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e06d      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002548:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255c:	d108      	bne.n	8002570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4921      	ldr	r1, [pc, #132]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002570:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a19      	ldr	r1, [r3, #32]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	430b      	orrs	r3, r1
 8002582:	491b      	ldr	r1, [pc, #108]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe fca1 	bl	8000ed4 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe fc9d 	bl	8000ed4 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e03d      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x46a>
 80025b4:	e035      	b.n	8002622 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fc8a 	bl	8000ed4 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe fc86 	bl	8000ed4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e026      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x498>
 80025e2:	e01e      	b.n	8002622 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e019      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40007000 	.word	0x40007000
 80025f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_OscConfig+0x500>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	429a      	cmp	r2, r3
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000

08002630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0d0      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d910      	bls.n	8002674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b67      	ldr	r3, [pc, #412]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 0207 	bic.w	r2, r3, #7
 800265a:	4965      	ldr	r1, [pc, #404]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b63      	ldr	r3, [pc, #396]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0b8      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800268c:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a58      	ldr	r2, [pc, #352]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a4:	4b53      	ldr	r3, [pc, #332]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a52      	ldr	r2, [pc, #328]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b0:	4b50      	ldr	r3, [pc, #320]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	494d      	ldr	r1, [pc, #308]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d040      	beq.n	8002750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d115      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e07f      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e073      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fe:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06b      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4936      	ldr	r1, [pc, #216]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002720:	f7fe fbd8 	bl	8000ed4 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7fe fbd4 	bl	8000ed4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e053      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 020c 	and.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	429a      	cmp	r2, r3
 800274e:	d1eb      	bne.n	8002728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d210      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 0207 	bic.w	r2, r3, #7
 8002766:	4922      	ldr	r1, [pc, #136]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e032      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4916      	ldr	r1, [pc, #88]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	490e      	ldr	r1, [pc, #56]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027be:	f000 f821 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 80027c2:	4602      	mov	r2, r0
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	490a      	ldr	r1, [pc, #40]	; (80027f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	5ccb      	ldrb	r3, [r1, r3]
 80027d2:	fa22 f303 	lsr.w	r3, r2, r3
 80027d6:	4a09      	ldr	r2, [pc, #36]	; (80027fc <HAL_RCC_ClockConfig+0x1cc>)
 80027d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCC_ClockConfig+0x1d0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd ff7a 	bl	80006d8 <HAL_InitTick>

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40022000 	.word	0x40022000
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08003044 	.word	0x08003044
 80027fc:	20000050 	.word	0x20000050
 8002800:	20000058 	.word	0x20000058

08002804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002804:	b490      	push	{r4, r7}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800280a:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800280c:	1d3c      	adds	r4, r7, #4
 800280e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002814:	f240 2301 	movw	r3, #513	; 0x201
 8002818:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800282e:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d002      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x40>
 800283e:	2b08      	cmp	r3, #8
 8002840:	d003      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x46>
 8002842:	e02b      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002846:	623b      	str	r3, [r7, #32]
      break;
 8002848:	e02b      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	0c9b      	lsrs	r3, r3, #18
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3328      	adds	r3, #40	; 0x28
 8002854:	443b      	add	r3, r7
 8002856:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800285a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d012      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	0c5b      	lsrs	r3, r3, #17
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	3328      	adds	r3, #40	; 0x28
 8002872:	443b      	add	r3, r7
 8002874:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002878:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800287e:	fb03 f202 	mul.w	r2, r3, r2
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
 800288a:	e004      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002890:	fb02 f303 	mul.w	r3, r2, r3
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	623b      	str	r3, [r7, #32]
      break;
 800289a:	e002      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800289e:	623b      	str	r3, [r7, #32]
      break;
 80028a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a2:	6a3b      	ldr	r3, [r7, #32]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc90      	pop	{r4, r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	08003034 	.word	0x08003034
 80028b4:	40021000 	.word	0x40021000
 80028b8:	007a1200 	.word	0x007a1200
 80028bc:	003d0900 	.word	0x003d0900

080028c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c4:	4b02      	ldr	r3, [pc, #8]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	20000050 	.word	0x20000050

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028d8:	f7ff fff2 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08003054 	.word	0x08003054

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002900:	f7ff ffde 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	0adb      	lsrs	r3, r3, #11
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	08003054 	.word	0x08003054

08002924 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	220f      	movs	r2, #15
 8002932:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_RCC_GetClockConfig+0x58>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0203 	and.w	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_RCC_GetClockConfig+0x58>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_GetClockConfig+0x58>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_RCC_GetClockConfig+0x58>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_RCC_GetClockConfig+0x5c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0207 	and.w	r2, r3, #7
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	40021000 	.word	0x40021000
 8002980:	40022000 	.word	0x40022000

08002984 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <RCC_Delay+0x34>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <RCC_Delay+0x38>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0a5b      	lsrs	r3, r3, #9
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029a0:	bf00      	nop
  }
  while (Delay --);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1e5a      	subs	r2, r3, #1
 80029a6:	60fa      	str	r2, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f9      	bne.n	80029a0 <RCC_Delay+0x1c>
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	20000050 	.word	0x20000050
 80029bc:	10624dd3 	.word	0x10624dd3

080029c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d07d      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029dc:	2300      	movs	r3, #0
 80029de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e0:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10d      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ec:	4b4c      	ldr	r3, [pc, #304]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4a4b      	ldr	r2, [pc, #300]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f6:	61d3      	str	r3, [r2, #28]
 80029f8:	4b49      	ldr	r3, [pc, #292]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a04:	2301      	movs	r3, #1
 8002a06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	4b46      	ldr	r3, [pc, #280]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d118      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a14:	4b43      	ldr	r3, [pc, #268]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a42      	ldr	r2, [pc, #264]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a20:	f7fe fa58 	bl	8000ed4 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a26:	e008      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a28:	f7fe fa54 	bl	8000ed4 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e06d      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a46:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d02e      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d027      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a64:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a6e:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a74:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a7a:	4a29      	ldr	r2, [pc, #164]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d014      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fa23 	bl	8000ed4 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7fe fa1f 	bl	8000ed4 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e036      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ee      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4917      	ldr	r1, [pc, #92]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	490b      	ldr	r1, [pc, #44]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	4904      	ldr	r1, [pc, #16]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40007000 	.word	0x40007000
 8002b28:	42420440 	.word	0x42420440

08002b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e041      	b.n	8002bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f839 	bl	8002bca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f000 f9b4 	bl	8002ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d001      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e03a      	b.n	8002c6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <HAL_TIM_Base_Start_IT+0x98>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00e      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x58>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1e:	d009      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x58>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x58>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <HAL_TIM_Base_Start_IT+0xa0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d111      	bne.n	8002c58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d010      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c56:	e007      	b.n	8002c68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40000800 	.word	0x40000800

08002c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d122      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d11b      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0202 	mvn.w	r2, #2
 8002cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f8ed 	bl	8002ea2 <HAL_TIM_IC_CaptureCallback>
 8002cc8:	e005      	b.n	8002cd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f8e0 	bl	8002e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f8ef 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d122      	bne.n	8002d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d11b      	bne.n	8002d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0204 	mvn.w	r2, #4
 8002d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f8c3 	bl	8002ea2 <HAL_TIM_IC_CaptureCallback>
 8002d1c:	e005      	b.n	8002d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f8b6 	bl	8002e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f8c5 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d122      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d11b      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0208 	mvn.w	r2, #8
 8002d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2204      	movs	r2, #4
 8002d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f899 	bl	8002ea2 <HAL_TIM_IC_CaptureCallback>
 8002d70:	e005      	b.n	8002d7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f88c 	bl	8002e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f89b 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d122      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d11b      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0210 	mvn.w	r2, #16
 8002da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2208      	movs	r2, #8
 8002dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f86f 	bl	8002ea2 <HAL_TIM_IC_CaptureCallback>
 8002dc4:	e005      	b.n	8002dd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f862 	bl	8002e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f871 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d10e      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d107      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0201 	mvn.w	r2, #1
 8002dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fd fc18 	bl	8000634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0e:	2b80      	cmp	r3, #128	; 0x80
 8002e10:	d10e      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1c:	2b80      	cmp	r3, #128	; 0x80
 8002e1e:	d107      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f8bf 	bl	8002fae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b40      	cmp	r3, #64	; 0x40
 8002e3c:	d10e      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e48:	2b40      	cmp	r3, #64	; 0x40
 8002e4a:	d107      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f835 	bl	8002ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d10e      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d107      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0220 	mvn.w	r2, #32
 8002e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f88a 	bl	8002f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a29      	ldr	r2, [pc, #164]	; (8002f90 <TIM_Base_SetConfig+0xb8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00b      	beq.n	8002f08 <TIM_Base_SetConfig+0x30>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef6:	d007      	beq.n	8002f08 <TIM_Base_SetConfig+0x30>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a26      	ldr	r2, [pc, #152]	; (8002f94 <TIM_Base_SetConfig+0xbc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d003      	beq.n	8002f08 <TIM_Base_SetConfig+0x30>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <TIM_Base_SetConfig+0xc0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d108      	bne.n	8002f1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <TIM_Base_SetConfig+0xb8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00b      	beq.n	8002f3a <TIM_Base_SetConfig+0x62>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f28:	d007      	beq.n	8002f3a <TIM_Base_SetConfig+0x62>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <TIM_Base_SetConfig+0xbc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_Base_SetConfig+0x62>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <TIM_Base_SetConfig+0xc0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d108      	bne.n	8002f4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a07      	ldr	r2, [pc, #28]	; (8002f90 <TIM_Base_SetConfig+0xb8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d103      	bne.n	8002f80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	615a      	str	r2, [r3, #20]
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000800 	.word	0x40000800

08002f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <__libc_init_array>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	4d0c      	ldr	r5, [pc, #48]	; (8002ff8 <__libc_init_array+0x38>)
 8002fc6:	4c0d      	ldr	r4, [pc, #52]	; (8002ffc <__libc_init_array+0x3c>)
 8002fc8:	1b64      	subs	r4, r4, r5
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	42a6      	cmp	r6, r4
 8002fce:	d109      	bne.n	8002fe4 <__libc_init_array+0x24>
 8002fd0:	f000 f822 	bl	8003018 <_init>
 8002fd4:	2600      	movs	r6, #0
 8002fd6:	4d0a      	ldr	r5, [pc, #40]	; (8003000 <__libc_init_array+0x40>)
 8002fd8:	4c0a      	ldr	r4, [pc, #40]	; (8003004 <__libc_init_array+0x44>)
 8002fda:	1b64      	subs	r4, r4, r5
 8002fdc:	10a4      	asrs	r4, r4, #2
 8002fde:	42a6      	cmp	r6, r4
 8002fe0:	d105      	bne.n	8002fee <__libc_init_array+0x2e>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe8:	4798      	blx	r3
 8002fea:	3601      	adds	r6, #1
 8002fec:	e7ee      	b.n	8002fcc <__libc_init_array+0xc>
 8002fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff2:	4798      	blx	r3
 8002ff4:	3601      	adds	r6, #1
 8002ff6:	e7f2      	b.n	8002fde <__libc_init_array+0x1e>
 8002ff8:	0800305c 	.word	0x0800305c
 8002ffc:	0800305c 	.word	0x0800305c
 8003000:	0800305c 	.word	0x0800305c
 8003004:	08003060 	.word	0x08003060

08003008 <memset>:
 8003008:	4603      	mov	r3, r0
 800300a:	4402      	add	r2, r0
 800300c:	4293      	cmp	r3, r2
 800300e:	d100      	bne.n	8003012 <memset+0xa>
 8003010:	4770      	bx	lr
 8003012:	f803 1b01 	strb.w	r1, [r3], #1
 8003016:	e7f9      	b.n	800300c <memset+0x4>

08003018 <_init>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	bf00      	nop
 800301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301e:	bc08      	pop	{r3}
 8003020:	469e      	mov	lr, r3
 8003022:	4770      	bx	lr

08003024 <_fini>:
 8003024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003026:	bf00      	nop
 8003028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302a:	bc08      	pop	{r3}
 800302c:	469e      	mov	lr, r3
 800302e:	4770      	bx	lr
