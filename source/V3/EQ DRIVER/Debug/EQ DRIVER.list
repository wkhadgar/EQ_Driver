
EQ DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003cc0  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008584  08008584  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08008584  08008584  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008584  08008584  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800858c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  200000d0  0800865c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  0800865c  00020690  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001023e  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293d  00000000  00000000  00030337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00032c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00033c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184db  00000000  00000000  00034a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132ca  00000000  00000000  0004cf43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f472  00000000  00000000  0006020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef67f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004034  00000000  00000000  000ef6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	080048ac 	.word	0x080048ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	080048ac 	.word	0x080048ac

0800014c <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC2_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC2_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC2_Init+0x74>)
 800016a:	2201      	movs	r2, #1
 800016c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC2_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC2_Init+0x74>)
 800018a:	f001 fe9b 	bl	8001ec4 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fb38 	bl	8000808 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000198:	2300      	movs	r3, #0
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC2_Init+0x74>)
 80001aa:	f002 f923 	bl	80023f4 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fb28 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	200000ec 	.word	0x200000ec
 80001c4:	40012800 	.word	0x40012800

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC2)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0-WKUP     ------> ADC2_IN0
    */
    GPIO_InitStruct.Pin = V_BATTERY_Pin;
 8000218:	2301      	movs	r3, #1
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_BATTERY_GPIO_Port, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f002 fb58 	bl	80028dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012800 	.word	0x40012800
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <voltage_read>:
/*
 * @brief: reads the analog input on battery vcc and returns the voltage based on the given vref x 100
 * @param VREFH_x100: the given reference voltage max to convert the raw adc reading into, times 100 for float avoiding.
 * @retval: converted adc reading into the voltage reference frame, only scaled by 10 times.
 */
uint16_t voltage_read(uint16_t VREFH_x10)	{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	80fb      	strh	r3, [r7, #6]
	uint32_t v = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
	HAL_ADC_PollForConversion(&hadc2, 100);
 800024e:	2164      	movs	r1, #100	; 0x64
 8000250:	4813      	ldr	r0, [pc, #76]	; (80002a0 <voltage_read+0x60>)
 8000252:	f001 ffbd 	bl	80021d0 <HAL_ADC_PollForConversion>
	for (uint8_t samples = 0; samples < 64; samples++)	{
 8000256:	2300      	movs	r3, #0
 8000258:	72fb      	strb	r3, [r7, #11]
 800025a:	e009      	b.n	8000270 <voltage_read+0x30>
		v += HAL_ADC_GetValue(&hadc2);
 800025c:	4810      	ldr	r0, [pc, #64]	; (80002a0 <voltage_read+0x60>)
 800025e:	f002 f8bd 	bl	80023dc <HAL_ADC_GetValue>
 8000262:	4602      	mov	r2, r0
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	4413      	add	r3, r2
 8000268:	60fb      	str	r3, [r7, #12]
	for (uint8_t samples = 0; samples < 64; samples++)	{
 800026a:	7afb      	ldrb	r3, [r7, #11]
 800026c:	3301      	adds	r3, #1
 800026e:	72fb      	strb	r3, [r7, #11]
 8000270:	7afb      	ldrb	r3, [r7, #11]
 8000272:	2b3f      	cmp	r3, #63	; 0x3f
 8000274:	d9f2      	bls.n	800025c <voltage_read+0x1c>
	}
	v >>= 6; // v / 64
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	099b      	lsrs	r3, r3, #6
 800027a:	60fb      	str	r3, [r7, #12]
	v = (v*VREFH_x10)/4025; //correlates analog read to voltage value
 800027c:	88fb      	ldrh	r3, [r7, #6]
 800027e:	68fa      	ldr	r2, [r7, #12]
 8000280:	fb03 f202 	mul.w	r2, r3, r2
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <voltage_read+0x64>)
 8000286:	fba3 1302 	umull	r1, r3, r3, r2
 800028a:	1ad2      	subs	r2, r2, r3
 800028c:	0852      	lsrs	r2, r2, #1
 800028e:	4413      	add	r3, r2
 8000290:	0adb      	lsrs	r3, r3, #11
 8000292:	60fb      	str	r3, [r7, #12]
	return v;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	b29b      	uxth	r3, r3
}
 8000298:	4618      	mov	r0, r3
 800029a:	3710      	adds	r7, #16
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	200000ec 	.word	0x200000ec
 80002a4:	048409ed 	.word	0x048409ed

080002a8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b088      	sub	sp, #32
 80002ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ae:	f107 0310 	add.w	r3, r7, #16
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002bc:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <MX_GPIO_Init+0x150>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a4d      	ldr	r2, [pc, #308]	; (80003f8 <MX_GPIO_Init+0x150>)
 80002c2:	f043 0310 	orr.w	r3, r3, #16
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b4b      	ldr	r3, [pc, #300]	; (80003f8 <MX_GPIO_Init+0x150>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0310 	and.w	r3, r3, #16
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d4:	4b48      	ldr	r3, [pc, #288]	; (80003f8 <MX_GPIO_Init+0x150>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a47      	ldr	r2, [pc, #284]	; (80003f8 <MX_GPIO_Init+0x150>)
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b45      	ldr	r3, [pc, #276]	; (80003f8 <MX_GPIO_Init+0x150>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0320 	and.w	r3, r3, #32
 80002e8:	60bb      	str	r3, [r7, #8]
 80002ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ec:	4b42      	ldr	r3, [pc, #264]	; (80003f8 <MX_GPIO_Init+0x150>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a41      	ldr	r2, [pc, #260]	; (80003f8 <MX_GPIO_Init+0x150>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b3f      	ldr	r3, [pc, #252]	; (80003f8 <MX_GPIO_Init+0x150>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0304 	and.w	r3, r3, #4
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	4b3c      	ldr	r3, [pc, #240]	; (80003f8 <MX_GPIO_Init+0x150>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a3b      	ldr	r2, [pc, #236]	; (80003f8 <MX_GPIO_Init+0x150>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b39      	ldr	r3, [pc, #228]	; (80003f8 <MX_GPIO_Init+0x150>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0308 	and.w	r3, r3, #8
 8000318:	603b      	str	r3, [r7, #0]
 800031a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M1_STEP_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	21e0      	movs	r1, #224	; 0xe0
 8000320:	4836      	ldr	r0, [pc, #216]	; (80003fc <MX_GPIO_Init+0x154>)
 8000322:	f002 fc5f 	bl	8002be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_STEP_GPIO_Port, M2_STEP_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2101      	movs	r1, #1
 800032a:	4835      	ldr	r0, [pc, #212]	; (8000400 <MX_GPIO_Init+0x158>)
 800032c:	f002 fc5a 	bl	8002be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000330:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000336:	2303      	movs	r3, #3
 8000338:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	4619      	mov	r1, r3
 8000340:	4830      	ldr	r0, [pc, #192]	; (8000404 <MX_GPIO_Init+0x15c>)
 8000342:	f002 facb 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000346:	f649 731e 	movw	r3, #40734	; 0x9f1e
 800034a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800034c:	2303      	movs	r3, #3
 800034e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	4829      	ldr	r0, [pc, #164]	; (80003fc <MX_GPIO_Init+0x154>)
 8000358:	f002 fac0 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M1_STEP_Pin|M2_DIR_Pin;
 800035c:	23e0      	movs	r3, #224	; 0xe0
 800035e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000360:	2301      	movs	r3, #1
 8000362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000364:	2300      	movs	r3, #0
 8000366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000368:	2302      	movs	r3, #2
 800036a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800036c:	f107 0310 	add.w	r3, r7, #16
 8000370:	4619      	mov	r1, r3
 8000372:	4822      	ldr	r0, [pc, #136]	; (80003fc <MX_GPIO_Init+0x154>)
 8000374:	f002 fab2 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_STEP_Pin;
 8000378:	2301      	movs	r3, #1
 800037a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037c:	2301      	movs	r3, #1
 800037e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000380:	2300      	movs	r3, #0
 8000382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000384:	2302      	movs	r3, #2
 8000386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_STEP_GPIO_Port, &GPIO_InitStruct);
 8000388:	f107 0310 	add.w	r3, r7, #16
 800038c:	4619      	mov	r1, r3
 800038e:	481c      	ldr	r0, [pc, #112]	; (8000400 <MX_GPIO_Init+0x158>)
 8000390:	f002 faa4 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000394:	f648 733e 	movw	r3, #36670	; 0x8f3e
 8000398:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800039a:	2303      	movs	r3, #3
 800039c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	4816      	ldr	r0, [pc, #88]	; (8000400 <MX_GPIO_Init+0x158>)
 80003a6:	f002 fa99 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SELECT_Pin|ROTARY_TRIG_Pin;
 80003aa:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80003ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <MX_GPIO_Init+0x160>)
 80003b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003b4:	2301      	movs	r3, #1
 80003b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	4810      	ldr	r0, [pc, #64]	; (8000400 <MX_GPIO_Init+0x158>)
 80003c0:	f002 fa8c 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROTARY_CLKW_Pin;
 80003c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003ce:	2301      	movs	r3, #1
 80003d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROTARY_CLKW_GPIO_Port, &GPIO_InitStruct);
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4619      	mov	r1, r3
 80003d8:	4809      	ldr	r0, [pc, #36]	; (8000400 <MX_GPIO_Init+0x158>)
 80003da:	f002 fa7f 	bl	80028dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2100      	movs	r1, #0
 80003e2:	2028      	movs	r0, #40	; 0x28
 80003e4:	f002 fa4f 	bl	8002886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003e8:	2028      	movs	r0, #40	; 0x28
 80003ea:	f002 fa68 	bl	80028be <HAL_NVIC_EnableIRQ>

}
 80003ee:	bf00      	nop
 80003f0:	3720      	adds	r7, #32
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010800 	.word	0x40010800
 8000400:	40010c00 	.word	0x40010c00
 8000404:	40011000 	.word	0x40011000
 8000408:	10210000 	.word	0x10210000

0800040c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_I2C1_Init+0x50>)
 8000412:	4a13      	ldr	r2, [pc, #76]	; (8000460 <MX_I2C1_Init+0x54>)
 8000414:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_I2C1_Init+0x50>)
 8000418:	4a12      	ldr	r2, [pc, #72]	; (8000464 <MX_I2C1_Init+0x58>)
 800041a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_I2C1_Init+0x50>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 120;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_I2C1_Init+0x50>)
 8000424:	2278      	movs	r2, #120	; 0x78
 8000426:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_I2C1_Init+0x50>)
 800042a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800042e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <MX_I2C1_Init+0x50>)
 8000432:	2200      	movs	r2, #0
 8000434:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_I2C1_Init+0x50>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043c:	4b07      	ldr	r3, [pc, #28]	; (800045c <MX_I2C1_Init+0x50>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_I2C1_Init+0x50>)
 8000444:	2280      	movs	r2, #128	; 0x80
 8000446:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000448:	4804      	ldr	r0, [pc, #16]	; (800045c <MX_I2C1_Init+0x50>)
 800044a:	f002 fbf1 	bl	8002c30 <HAL_I2C_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000454:	f000 f9d8 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	2000011c 	.word	0x2000011c
 8000460:	40005400 	.word	0x40005400
 8000464:	00061a80 	.word	0x00061a80

08000468 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a15      	ldr	r2, [pc, #84]	; (80004d8 <HAL_I2C_MspInit+0x70>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d123      	bne.n	80004d0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <HAL_I2C_MspInit+0x74>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a13      	ldr	r2, [pc, #76]	; (80004dc <HAL_I2C_MspInit+0x74>)
 800048e:	f043 0308 	orr.w	r3, r3, #8
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <HAL_I2C_MspInit+0x74>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0308 	and.w	r3, r3, #8
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80004a0:	23c0      	movs	r3, #192	; 0xc0
 80004a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004a4:	2312      	movs	r3, #18
 80004a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a8:	2303      	movs	r3, #3
 80004aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	480b      	ldr	r0, [pc, #44]	; (80004e0 <HAL_I2C_MspInit+0x78>)
 80004b4:	f002 fa12 	bl	80028dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <HAL_I2C_MspInit+0x74>)
 80004ba:	69db      	ldr	r3, [r3, #28]
 80004bc:	4a07      	ldr	r2, [pc, #28]	; (80004dc <HAL_I2C_MspInit+0x74>)
 80004be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004c2:	61d3      	str	r3, [r2, #28]
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <HAL_I2C_MspInit+0x74>)
 80004c6:	69db      	ldr	r3, [r3, #28]
 80004c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004d0:	bf00      	nop
 80004d2:	3720      	adds	r7, #32
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40005400 	.word	0x40005400
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010c00 	.word	0x40010c00

080004e4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ROTARY_TRIG_Pin) {
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004f4:	d10c      	bne.n	8000510 <HAL_GPIO_EXTI_Callback+0x2c>
    set_flag(rotary_triggered);
 80004f6:	2001      	movs	r0, #1
 80004f8:	f000 fb16 	bl	8000b28 <set_flag>
    if (ROTARY_CLKW_GPIO_Port->IDR & ROTARY_CLKW_Pin)	{
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <HAL_GPIO_EXTI_Callback+0x44>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000504:	2b00      	cmp	r3, #0
 8000506:	d00a      	beq.n	800051e <HAL_GPIO_EXTI_Callback+0x3a>
    	set_flag(ccw);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fb0d 	bl	8000b28 <set_flag>
    }
  } else if (GPIO_Pin == SELECT_Pin) {
    set_flag(selected);
  }
}
 800050e:	e006      	b.n	800051e <HAL_GPIO_EXTI_Callback+0x3a>
  } else if (GPIO_Pin == SELECT_Pin) {
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000516:	d102      	bne.n	800051e <HAL_GPIO_EXTI_Callback+0x3a>
    set_flag(selected);
 8000518:	2000      	movs	r0, #0
 800051a:	f000 fb05 	bl	8000b28 <set_flag>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40010c00 	.word	0x40010c00

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f001 fc71 	bl	8001e18 <HAL_Init>
      brilho_tela,
      tempo_tela,
      save_configs,
      MENU_SIZE //must be the last value
  };
  const char* menu_str[] = {
 8000536:	4b6e      	ldr	r3, [pc, #440]	; (80006f0 <main+0x1c4>)
 8000538:	f107 0414 	add.w	r4, r7, #20
 800053c:	461d      	mov	r5, r3
 800053e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000542:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000546:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      "Modo manual",
      "Contraste",
      "Luz da tela",
      "Salvar configs"
  };
  uint16_t menu_op_value[MENU_SIZE] = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
  const uint8_t SCREEN_ROWS = 5;
 8000556:	2305      	movs	r3, #5
 8000558:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

  uint32_t lock_value;

  uint32_t last_move_ticks = 0; // to track time passed in ms with HAL_GetTick()
 800055c:	2300      	movs	r3, #0
 800055e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t ra_last_tick = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	647b      	str	r3, [r7, #68]	; 0x44

  uint8_t actual_menu_top_row = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint8_t arrow_row = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  uint8_t current_selection;
  uint8_t battery_charge;

  bool_t wake_flag     = False;
 8000570:	2300      	movs	r3, #0
 8000572:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  bool_t select_pressed = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  bool_t sleeping = False;
 800057c:	2300      	movs	r3, #0
 800057e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  bool_t on_menu = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  bool_t low_battery_flag = False;
 8000588:	2300      	movs	r3, #0
 800058a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  bool_t toggle_horse = False;
 800058e:	2300      	movs	r3, #0
 8000590:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  uint8_t frame = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  uint16_t rot_val = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	877b      	strh	r3, [r7, #58]	; 0x3a


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f8ad 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f7ff fe81 	bl	80002a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a6:	f7ff ff31 	bl	800040c <MX_I2C1_Init>
  MX_ADC2_Init();
 80005aa:	f7ff fdcf 	bl	800014c <MX_ADC2_Init>
  MX_TIM2_Init();
 80005ae:	f000 fa49 	bl	8000a44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc2);
 80005b2:	4850      	ldr	r0, [pc, #320]	; (80006f4 <main+0x1c8>)
 80005b4:	f001 fd5e 	bl	8002074 <HAL_ADC_Start>
  SH1106_cleanInit();
 80005b8:	f000 fc2a 	bl	8000e10 <SH1106_cleanInit>

  uint16_t data_readed = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	873b      	strh	r3, [r7, #56]	; 0x38
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    rot_val = incremented_var(rot_value, 0);
 80005c0:	2100      	movs	r1, #0
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fae0 	bl	8000b88 <incremented_var>
 80005c8:	4603      	mov	r3, r0
 80005ca:	877b      	strh	r3, [r7, #58]	; 0x3a
    battery_charge = get_bat_percentage();
 80005cc:	f000 f8f1 	bl	80007b2 <get_bat_percentage>
 80005d0:	4603      	mov	r3, r0
 80005d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (toggle_horse) {
 80005d6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d01b      	beq.n	8000616 <main+0xea>
      if (frame > 14)	frame = 0;
 80005de:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80005e2:	2b0e      	cmp	r3, #14
 80005e4:	d902      	bls.n	80005ec <main+0xc0>
 80005e6:	2300      	movs	r3, #0
 80005e8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      SH1106_drawBitmapFullscreen(horse_running[frame++]);
 80005ec:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80005f0:	1c5a      	adds	r2, r3, #1
 80005f2:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b3f      	ldr	r3, [pc, #252]	; (80006f8 <main+0x1cc>)
 80005fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fbf6 	bl	8001df0 <SH1106_drawBitmapFullscreen>
      SH1106_drawBattery(battery_charge, 105, 2);
 8000604:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000608:	2202      	movs	r2, #2
 800060a:	2169      	movs	r1, #105	; 0x69
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fba1 	bl	8001d54 <SH1106_drawBattery>
      SH1106_flush();
 8000612:	f000 fbc9 	bl	8000da8 <SH1106_flush>
    }
    SH1106_clear();
 8000616:	f000 fba5 	bl	8000d64 <SH1106_clear>

    SH1106_drawBattery(battery_charge, 105, 2);
 800061a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800061e:	2202      	movs	r2, #2
 8000620:	2169      	movs	r1, #105	; 0x69
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fb96 	bl	8001d54 <SH1106_drawBattery>

    if (get_flag(rotary_triggered)) { // rotary encoder triggered
 8000628:	2001      	movs	r0, #1
 800062a:	f000 fa9d 	bl	8000b68 <get_flag>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d02d      	beq.n	8000690 <main+0x164>
      reset_flag(rotary_triggered);
 8000634:	2001      	movs	r0, #1
 8000636:	f000 fa87 	bl	8000b48 <reset_flag>
      if ((TICKS_NOW - last_move_ticks) >= ROT_DEBOUNCE_DELAY_MS) {
 800063a:	f001 fc15 	bl	8001e68 <HAL_GetTick>
 800063e:	4602      	mov	r2, r0
 8000640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	2b09      	cmp	r3, #9
 8000646:	d946      	bls.n	80006d6 <main+0x1aa>

        set_flag(update_display);
 8000648:	2003      	movs	r0, #3
 800064a:	f000 fa6d 	bl	8000b28 <set_flag>
        // digitalToggle(OUT_RA_DIR);

        if (get_flag(ccw)) {
 800064e:	2002      	movs	r0, #2
 8000650:	f000 fa8a 	bl	8000b68 <get_flag>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d00b      	beq.n	8000672 <main+0x146>
          reset_flag(ccw);
 800065a:	2002      	movs	r0, #2
 800065c:	f000 fa74 	bl	8000b48 <reset_flag>

          if (rot_val > 0) {
 8000660:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000662:	2b00      	cmp	r3, #0
 8000664:	d009      	beq.n	800067a <main+0x14e>
            incremented_var(rot_value, -1);
 8000666:	f04f 31ff 	mov.w	r1, #4294967295
 800066a:	2000      	movs	r0, #0
 800066c:	f000 fa8c 	bl	8000b88 <incremented_var>
 8000670:	e003      	b.n	800067a <main+0x14e>
          }
        } else { // clockwise rotation
          incremented_var(rot_value, 1);
 8000672:	2101      	movs	r1, #1
 8000674:	2000      	movs	r0, #0
 8000676:	f000 fa87 	bl	8000b88 <incremented_var>
        }
        SH1106_drawCircle(63, 31, rot_val);
 800067a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800067c:	b2db      	uxtb	r3, r3
 800067e:	461a      	mov	r2, r3
 8000680:	211f      	movs	r1, #31
 8000682:	203f      	movs	r0, #63	; 0x3f
 8000684:	f000 fddc 	bl	8001240 <SH1106_drawCircle>

        last_move_ticks = TICKS_NOW;
 8000688:	f001 fbee 	bl	8001e68 <HAL_GetTick>
 800068c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800068e:	e022      	b.n	80006d6 <main+0x1aa>
      }
    }

    else if (get_flag(selected)) { // rotary encoder trigged
 8000690:	2000      	movs	r0, #0
 8000692:	f000 fa69 	bl	8000b68 <get_flag>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d01c      	beq.n	80006d6 <main+0x1aa>
      reset_flag(selected);
 800069c:	2000      	movs	r0, #0
 800069e:	f000 fa53 	bl	8000b48 <reset_flag>
      if ((TICKS_NOW - last_move_ticks) >= PUSH_DEBOUNCE_DELAY_MS) {
 80006a2:	f001 fbe1 	bl	8001e68 <HAL_GetTick>
 80006a6:	4602      	mov	r2, r0
 80006a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80006b0:	d311      	bcc.n	80006d6 <main+0x1aa>

        SH1106_setContrast(255);
 80006b2:	20ff      	movs	r0, #255	; 0xff
 80006b4:	f000 fb34 	bl	8000d20 <SH1106_setContrast>
        set_flag(update_display);
 80006b8:	2003      	movs	r0, #3
 80006ba:	f000 fa35 	bl	8000b28 <set_flag>
        toggle_horse = !toggle_horse;
 80006be:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	bf0c      	ite	eq
 80006c6:	2301      	moveq	r3, #1
 80006c8:	2300      	movne	r3, #0
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

        //DRx->DR1 &= ~0b1010;

        last_move_ticks = TICKS_NOW;
 80006d0:	f001 fbca 	bl	8001e68 <HAL_GetTick>
 80006d4:	64f8      	str	r0, [r7, #76]	; 0x4c
      }
    }

    if (get_flag(update_display)) {
 80006d6:	2003      	movs	r0, #3
 80006d8:	f000 fa46 	bl	8000b68 <get_flag>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f43f af6e 	beq.w	80005c0 <main+0x94>
      reset_flag(update_display);
 80006e4:	2003      	movs	r0, #3
 80006e6:	f000 fa2f 	bl	8000b48 <reset_flag>
      SH1106_flush();
 80006ea:	f000 fb5d 	bl	8000da8 <SH1106_flush>
    rot_val = incremented_var(rot_value, 0);
 80006ee:	e767      	b.n	80005c0 <main+0x94>
 80006f0:	0800491c 	.word	0x0800491c
 80006f4:	200000ec 	.word	0x200000ec
 80006f8:	20000000 	.word	0x20000000

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000706:	2228      	movs	r2, #40	; 0x28
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f004 f8c6 	bl	800489c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072c:	2301      	movs	r3, #1
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	2301      	movs	r3, #1
 800073c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000748:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000752:	4618      	mov	r0, r3
 8000754:	f002 feb6 	bl	80034c4 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800075e:	f000 f853 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000772:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f003 f922 	bl	80039c8 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800078a:	f000 f83d 	bl	8000808 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800078e:	2302      	movs	r3, #2
 8000790:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000796:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fadc 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007a6:	f000 f82f 	bl	8000808 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	; 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <get_bat_percentage>:

/* USER CODE BEGIN 4 */
uint8_t get_bat_percentage(void)	{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
	uint16_t readed_voltage = voltage_read(5*10); //5v * 10 of reference on board
 80007b8:	2032      	movs	r0, #50	; 0x32
 80007ba:	f7ff fd41 	bl	8000240 <voltage_read>
 80007be:	4603      	mov	r3, r0
 80007c0:	80fb      	strh	r3, [r7, #6]
	uint8_t percent = ((readed_voltage >= V_BAT_MIN ? readed_voltage : V_BAT_MIN) - V_BAT_MIN) * (100/(V_BAT_MAX - V_BAT_MIN));	// converting [bat_min, bat_max] to [0, 100]
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	2b20      	cmp	r3, #32
 80007c6:	bf38      	it	cc
 80007c8:	2320      	movcc	r3, #32
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	3b20      	subs	r3, #32
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	461a      	mov	r2, r3
 80007d2:	0092      	lsls	r2, r2, #2
 80007d4:	4413      	add	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	717b      	strb	r3, [r7, #5]
	return percent;
 80007da:	797b      	ldrb	r3, [r7, #5]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d101      	bne.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007f6:	f001 fb25 	bl	8001e44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40012c00 	.word	0x40012c00

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <HAL_MspInit+0x6c>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <HAL_MspInit+0x6c>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <HAL_MspInit+0x6c>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <HAL_MspInit+0x6c>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <HAL_MspInit+0x6c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	61d3      	str	r3, [r2, #28]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_MspInit+0x6c>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2005      	movs	r0, #5
 8000850:	f002 f819 	bl	8002886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000854:	2005      	movs	r0, #5
 8000856:	f002 f832 	bl	80028be <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_MspInit+0x70>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_MspInit+0x70>)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000
 8000884:	40010000 	.word	0x40010000

08000888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	; 0x30
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000898:	2300      	movs	r3, #0
 800089a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <HAL_InitTick+0xd0>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a2d      	ldr	r2, [pc, #180]	; (8000958 <HAL_InitTick+0xd0>)
 80008a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <HAL_InitTick+0xd0>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b6:	f107 020c 	add.w	r2, r7, #12
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f003 f9fb 	bl	8003cbc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008c6:	f003 f9e5 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 80008ca:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ce:	4a23      	ldr	r2, [pc, #140]	; (800095c <HAL_InitTick+0xd4>)
 80008d0:	fba2 2303 	umull	r2, r3, r2, r3
 80008d4:	0c9b      	lsrs	r3, r3, #18
 80008d6:	3b01      	subs	r3, #1
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <HAL_InitTick+0xd8>)
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <HAL_InitTick+0xdc>)
 80008de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <HAL_InitTick+0xd8>)
 80008e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <HAL_InitTick+0xd8>)
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_InitTick+0xd8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <HAL_InitTick+0xd8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_InitTick+0xd8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000900:	4817      	ldr	r0, [pc, #92]	; (8000960 <HAL_InitTick+0xd8>)
 8000902:	f003 fb9f 	bl	8004044 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800090c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11b      	bne.n	800094c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000914:	4812      	ldr	r0, [pc, #72]	; (8000960 <HAL_InitTick+0xd8>)
 8000916:	f003 fbe5 	bl	80040e4 <HAL_TIM_Base_Start_IT>
 800091a:	4603      	mov	r3, r0
 800091c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000924:	2b00      	cmp	r3, #0
 8000926:	d111      	bne.n	800094c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000928:	2019      	movs	r0, #25
 800092a:	f001 ffc8 	bl	80028be <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d808      	bhi.n	8000946 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	2019      	movs	r0, #25
 800093a:	f001 ffa4 	bl	8002886 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_InitTick+0xe0>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e002      	b.n	800094c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800094c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000950:	4618      	mov	r0, r3
 8000952:	3730      	adds	r7, #48	; 0x30
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	431bde83 	.word	0x431bde83
 8000960:	20000170 	.word	0x20000170
 8000964:	40012c00 	.word	0x40012c00
 8000968:	200000c8 	.word	0x200000c8

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr

08000996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr

080009ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr

080009ba <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
	...

080009c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <TIM1_UP_IRQHandler+0x10>)
 80009ce:	f003 fbdb 	bl	8004188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000170 	.word	0x20000170

080009dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <TIM2_IRQHandler+0x10>)
 80009e2:	f003 fbd1 	bl	8004188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200001b8 	.word	0x200001b8

080009f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (EXTI->PR & SELECT_Pin) {
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <EXTI15_10_IRQHandler+0x44>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d008      	beq.n	8000a12 <EXTI15_10_IRQHandler+0x22>
		/* Clear bit */
		EXTI->PR = SELECT_Pin;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <EXTI15_10_IRQHandler+0x44>)
 8000a02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a06:	615a      	str	r2, [r3, #20]
		/* Call global function */
		HAL_GPIO_EXTI_IRQHandler(SELECT_Pin);
 8000a08:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a0c:	f002 f902 	bl	8002c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 0 */

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a10:	e00d      	b.n	8000a2e <EXTI15_10_IRQHandler+0x3e>
	else if (EXTI->PR & ROTARY_TRIG_Pin) {
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <EXTI15_10_IRQHandler+0x44>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d007      	beq.n	8000a2e <EXTI15_10_IRQHandler+0x3e>
		EXTI->PR = ROTARY_TRIG_Pin;
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <EXTI15_10_IRQHandler+0x44>)
 8000a20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a24:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_IRQHandler(ROTARY_TRIG_Pin);
 8000a26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a2a:	f002 f8f3 	bl	8002c14 <HAL_GPIO_EXTI_IRQHandler>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40010400 	.word	0x40010400

08000a38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 -1;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a6a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000a6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000 -1;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a78:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000a7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a8a:	4814      	ldr	r0, [pc, #80]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a8c:	f003 fada 	bl	8004044 <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a96:	f7ff feb7 	bl	8000808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_TIM2_Init+0x98>)
 8000aa8:	f003 fc76 	bl	8004398 <HAL_TIM_ConfigClockSource>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ab2:	f7ff fea9 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <MX_TIM2_Init+0x98>)
 8000ac4:	f003 fe48 	bl	8004758 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ace:	f7ff fe9b 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200001b8 	.word	0x200001b8

08000ae0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af0:	d113      	bne.n	8000b1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_TIM_Base_MspInit+0x44>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <HAL_TIM_Base_MspInit+0x44>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_TIM_Base_MspInit+0x44>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	201c      	movs	r0, #28
 8000b10:	f001 feb9 	bl	8002886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b14:	201c      	movs	r0, #28
 8000b16:	f001 fed2 	bl	80028be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000

08000b28 <set_flag>:
#include "variables.h"

void set_flag(bool_var_t bool_var) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	boolVariables[bool_var] = 1;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <set_flag+0x1c>)
 8000b36:	2101      	movs	r1, #1
 8000b38:	54d1      	strb	r1, [r2, r3]
	return;
 8000b3a:	bf00      	nop
}
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	20000200 	.word	0x20000200

08000b48 <reset_flag>:

void reset_flag(bool_var_t bool_var) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	boolVariables[bool_var] = 0;
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	4a03      	ldr	r2, [pc, #12]	; (8000b64 <reset_flag+0x1c>)
 8000b56:	2100      	movs	r1, #0
 8000b58:	54d1      	strb	r1, [r2, r3]
	return;
 8000b5a:	bf00      	nop
}
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	20000200 	.word	0x20000200

08000b68 <get_flag>:

bool_t get_flag(bool_var_t bool_var) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	return boolVariables[bool_var];
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4a03      	ldr	r2, [pc, #12]	; (8000b84 <get_flag+0x1c>)
 8000b76:	5cd3      	ldrb	r3, [r2, r3]
 8000b78:	b2db      	uxtb	r3, r3
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	20000200 	.word	0x20000200

08000b88 <incremented_var>:

int incremented_var(int_var_t int_var, int8_t increment) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	460a      	mov	r2, r1
 8000b92:	71fb      	strb	r3, [r7, #7]
 8000b94:	4613      	mov	r3, r2
 8000b96:	71bb      	strb	r3, [r7, #6]
	return (intVariables[int_var] += increment);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <incremented_var+0x30>)
 8000b9c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000ba0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ba4:	79fa      	ldrb	r2, [r7, #7]
 8000ba6:	440b      	add	r3, r1
 8000ba8:	4903      	ldr	r1, [pc, #12]	; (8000bb8 <incremented_var+0x30>)
 8000baa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	20000204 	.word	0x20000204

08000bbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bbe:	490d      	ldr	r1, [pc, #52]	; (8000bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	; (8000c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000be2:	f7ff ff29 	bl	8000a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f003 fe27 	bl	8004838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bea:	f7ff fc9f 	bl	800052c <main>
  bx lr
 8000bee:	4770      	bx	lr
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8000bf8:	0800858c 	.word	0x0800858c
  ldr r2, =_sbss
 8000bfc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8000c00:	20000690 	.word	0x20000690

08000c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_2_IRQHandler>
	...

08000c08 <SH1106_cmd>:
		{ 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

// Send single byte command to display
// input:
//   cmd - display command
static void SH1106_cmd(uint8_t cmd) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	// Send command to display
	uint8_t command[] = {0x00, cmd};
 8000c12:	2300      	movs	r3, #0
 8000c14:	733b      	strb	r3, [r7, #12]
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, command,
 8000c1a:	f107 020c 	add.w	r2, r7, #12
 8000c1e:	230a      	movs	r3, #10
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2302      	movs	r3, #2
 8000c24:	2178      	movs	r1, #120	; 0x78
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <SH1106_cmd+0x2c>)
 8000c28:	f002 f946 	bl	8002eb8 <HAL_I2C_Master_Transmit>
			sizeof(command), 10);
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000011c 	.word	0x2000011c

08000c38 <SH1106_data>:

// Send double byte command to display
// input:
//   data - page buffer data with 0x40 blocks
//   num_bytes - number of bytes to display in the page
static void SH1106_data(uint8_t* data, uint8_t num_bytes) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
	// Send double byte command to display
	HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, data,
 8000c44:	78fb      	ldrb	r3, [r7, #3]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	220a      	movs	r2, #10
 8000c4a:	9200      	str	r2, [sp, #0]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	2178      	movs	r1, #120	; 0x78
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <SH1106_data+0x28>)
 8000c52:	f002 f931 	bl	8002eb8 <HAL_I2C_Master_Transmit>
			num_bytes, 10);
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000011c 	.word	0x2000011c

08000c64 <SH1106_Init>:

// Initialize SDA peripheral and SH1106 display
// note: SDA peripheral must be initialized before
void SH1106_Init(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	// Initial display configuration
	HAL_Delay(100);
 8000c68:	2064      	movs	r0, #100	; 0x64
 8000c6a:	f001 f907 	bl	8001e7c <HAL_Delay>

	SH1106_cmd(SH1106_CMD_DISP_OFF);
 8000c6e:	20ae      	movs	r0, #174	; 0xae
 8000c70:	f7ff ffca 	bl	8000c08 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_COL_LOW);
 8000c74:	2002      	movs	r0, #2
 8000c76:	f7ff ffc7 	bl	8000c08 <SH1106_cmd>
	SH1106_cmd(SH1106_CMD_COL_HIGH);
 8000c7a:	2010      	movs	r0, #16
 8000c7c:	f7ff ffc4 	bl	8000c08 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_STARTLINE);
 8000c80:	2040      	movs	r0, #64	; 0x40
 8000c82:	f7ff ffc1 	bl	8000c08 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_PAGE_ADDR);
 8000c86:	20b0      	movs	r0, #176	; 0xb0
 8000c88:	f7ff ffbe 	bl	8000c08 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_CONTRAST);
 8000c8c:	2081      	movs	r0, #129	; 0x81
 8000c8e:	f7ff ffbb 	bl	8000c08 <SH1106_cmd>
	SH1106_cmd(0x00); // 0x00...0xff
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff ffb8 	bl	8000c08 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SEG_NORM + 1);
 8000c98:	20a1      	movs	r0, #161	; 0xa1
 8000c9a:	f7ff ffb5 	bl	8000c08 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_EDOFF); // Display follows RAM content
 8000c9e:	20a4      	movs	r0, #164	; 0xa4
 8000ca0:	f7ff ffb2 	bl	8000c08 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_INV_OFF); // Normal display mode
 8000ca4:	20a6      	movs	r0, #166	; 0xa6
 8000ca6:	f7ff ffaf 	bl	8000c08 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SETMUX);
 8000caa:	20a8      	movs	r0, #168	; 0xa8
 8000cac:	f7ff ffac 	bl	8000c08 <SH1106_cmd>
	SH1106_cmd(0x3F); // 63 -> 64mux
 8000cb0:	203f      	movs	r0, #63	; 0x3f
 8000cb2:	f7ff ffa9 	bl	8000c08 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_DC_DC_SET);
 8000cb6:	20ad      	movs	r0, #173	; 0xad
 8000cb8:	f7ff ffa6 	bl	8000c08 <SH1106_cmd>
	SH1106_cmd(0x8B); // on
 8000cbc:	208b      	movs	r0, #139	; 0x8b
 8000cbe:	f7ff ffa3 	bl	8000c08 <SH1106_cmd>
	SH1106_cmd(0x32); // 8v
 8000cc2:	2032      	movs	r0, #50	; 0x32
 8000cc4:	f7ff ffa0 	bl	8000c08 <SH1106_cmd>


	SH1106_cmd(SH1106_CMD_COM_INV);
 8000cc8:	20c8      	movs	r0, #200	; 0xc8
 8000cca:	f7ff ff9d 	bl	8000c08 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SETOFFS);
 8000cce:	20d3      	movs	r0, #211	; 0xd3
 8000cd0:	f7ff ff9a 	bl	8000c08 <SH1106_cmd>
	SH1106_cmd(0x00); // 0px
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff ff97 	bl	8000c08 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_CLOCKDIV);
 8000cda:	20d5      	movs	r0, #213	; 0xd5
 8000cdc:	f7ff ff94 	bl	8000c08 <SH1106_cmd>
	SH1106_cmd(0xF0); // ~100Hz
 8000ce0:	20f0      	movs	r0, #240	; 0xf0
 8000ce2:	f7ff ff91 	bl	8000c08 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SET_CHARGE);
 8000ce6:	20d9      	movs	r0, #217	; 0xd9
 8000ce8:	f7ff ff8e 	bl	8000c08 <SH1106_cmd>
	SH1106_cmd(0x2A); //4MSb are discharge ticks and 4LSb are pre charge ticks
 8000cec:	202a      	movs	r0, #42	; 0x2a
 8000cee:	f7ff ff8b 	bl	8000c08 <SH1106_cmd>
	// Set COM pins hardware configuration
	// bit[4]: reset - sequential COM pin configuration
	//         set   - alternative COM pin configuration (reset value)
	// bit[5]: reset - disable COM left/right remap (reset value)
	//         set   - enable COM left/right remap
	SH1106_cmd(SH1106_CMD_COM_HW);
 8000cf2:	20da      	movs	r0, #218	; 0xda
 8000cf4:	f7ff ff88 	bl	8000c08 <SH1106_cmd>
	SH1106_cmd(0x12);
 8000cf8:	2012      	movs	r0, #18
 8000cfa:	f7ff ff85 	bl	8000c08 <SH1106_cmd>

	SH1106_cmd(0xDB);
 8000cfe:	20db      	movs	r0, #219	; 0xdb
 8000d00:	f7ff ff82 	bl	8000c08 <SH1106_cmd>
	SH1106_cmd(0x40);
 8000d04:	2040      	movs	r0, #64	; 0x40
 8000d06:	f7ff ff7f 	bl	8000c08 <SH1106_cmd>

	HAL_Delay(100);
 8000d0a:	2064      	movs	r0, #100	; 0x64
 8000d0c:	f001 f8b6 	bl	8001e7c <HAL_Delay>

	SH1106_cmd(SH1106_CMD_DISP_ON); // Display enabled
 8000d10:	20af      	movs	r0, #175	; 0xaf
 8000d12:	f7ff ff79 	bl	8000c08 <SH1106_cmd>

	HAL_Delay(100);
 8000d16:	2064      	movs	r0, #100	; 0x64
 8000d18:	f001 f8b0 	bl	8001e7c <HAL_Delay>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <SH1106_setContrast>:

// set display contrast
// input:
//   contrast - new contrast value (0x00..0xff)
void SH1106_setContrast(uint8_t contrast) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	SH1106_cmd(SH1106_CMD_CONTRAST);
 8000d2a:	2081      	movs	r0, #129	; 0x81
 8000d2c:	f7ff ff6c 	bl	8000c08 <SH1106_cmd>
	SH1106_cmd(contrast);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff68 	bl	8000c08 <SH1106_cmd>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <SH1106_setAllPixelsOn>:
// set entire LCD pixels on or off
// input:
//   eon_state - new pixels state (one of SH1106_ENTIRE_PIXELS_XXX values)
// note: SH1106_ENTIRE_PIXELS_ON means what all pixels on display will be on
//       without regard of display memory contents
void SH1106_setAllPixelsOn(uint8_t eon_state) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	SH1106_cmd(eon_state ? SH1106_CMD_EDON : SH1106_CMD_EDOFF);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SH1106_setAllPixelsOn+0x14>
 8000d50:	23a5      	movs	r3, #165	; 0xa5
 8000d52:	e000      	b.n	8000d56 <SH1106_setAllPixelsOn+0x16>
 8000d54:	23a4      	movs	r3, #164	; 0xa4
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff56 	bl	8000c08 <SH1106_cmd>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <SH1106_clear>:
	// Store orientation
	scr_orientation = orientation;
}

// clear vRAM buffer
void SH1106_clear(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	uint8_t page;
	static uint8_t null_buff[SCR_W] = {0x00};
	for (page = 0; page < 8; page++)	{
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	71fb      	strb	r3, [r7, #7]
 8000d6e:	e00e      	b.n	8000d8e <SH1106_clear+0x2a>
		memcpy(vRAM + (page << 7), null_buff, SCR_W);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	01db      	lsls	r3, r3, #7
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <SH1106_clear+0x3c>)
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <SH1106_clear+0x40>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	4611      	mov	r1, r2
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	461a      	mov	r2, r3
 8000d84:	f003 fd7c 	bl	8004880 <memcpy>
	for (page = 0; page < 8; page++)	{
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	71fb      	strb	r3, [r7, #7]
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b07      	cmp	r3, #7
 8000d92:	d9ed      	bls.n	8000d70 <SH1106_clear+0xc>
	}
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000020c 	.word	0x2000020c
 8000da4:	2000060c 	.word	0x2000060c

08000da8 <SH1106_flush>:

// Send vRAM buffer into display
void SH1106_flush(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
	uint8_t page;
	static uint8_t screen_buffer[SCR_W + 1] = {0x40};
	for (page = 0; page < 8; page++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	e01e      	b.n	8000df2 <SH1106_flush+0x4a>

		uint8_t* page_content = vRAM + (page << 7);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	01db      	lsls	r3, r3, #7
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <SH1106_flush+0x5c>)
 8000dbc:	4413      	add	r3, r2
 8000dbe:	603b      	str	r3, [r7, #0]
		memcpy(screen_buffer + 1, page_content, SCR_W);
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <SH1106_flush+0x60>)
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	6839      	ldr	r1, [r7, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 fd5a 	bl	8004880 <memcpy>

		SH1106_cmd(SH1106_CMD_PAGE_ADDR + page);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	3b50      	subs	r3, #80	; 0x50
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff18 	bl	8000c08 <SH1106_cmd>
		SH1106_cmd(SH1106_CMD_COL_LOW);
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f7ff ff15 	bl	8000c08 <SH1106_cmd>
		SH1106_cmd(SH1106_CMD_COL_HIGH);
 8000dde:	2010      	movs	r0, #16
 8000de0:	f7ff ff12 	bl	8000c08 <SH1106_cmd>

		SH1106_data(screen_buffer, sizeof(screen_buffer));
 8000de4:	2181      	movs	r1, #129	; 0x81
 8000de6:	4809      	ldr	r0, [pc, #36]	; (8000e0c <SH1106_flush+0x64>)
 8000de8:	f7ff ff26 	bl	8000c38 <SH1106_data>
	for (page = 0; page < 8; page++) {
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	3301      	adds	r3, #1
 8000df0:	71fb      	strb	r3, [r7, #7]
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	2b07      	cmp	r3, #7
 8000df6:	d9dd      	bls.n	8000db4 <SH1106_flush+0xc>
	}
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000020c 	.word	0x2000020c
 8000e08:	20000045 	.word	0x20000045
 8000e0c:	20000044 	.word	0x20000044

08000e10 <SH1106_cleanInit>:
		memcpy(vRAM + (page << 7), fill_buff, SCR_W);
	}
}

//init routine grouped in one function
void SH1106_cleanInit(void)	{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	SH1106_Init();
 8000e14:	f7ff ff26 	bl	8000c64 <SH1106_Init>
	SH1106_setAllPixelsOn(0);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff ff91 	bl	8000d40 <SH1106_setAllPixelsOn>
	SH1106_clear();
 8000e1e:	f7ff ffa1 	bl	8000d64 <SH1106_clear>
	SH1106_flush();
 8000e22:	f7ff ffc1 	bl	8000da8 <SH1106_flush>
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <SH1106_drawHLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   x - horizontal coordinate of line start
//   y - vertical coordinate
//   w - line width
static void SH1106_drawHLineInt(uint8_t x, uint8_t y, uint8_t w) {
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	460b      	mov	r3, r1
 8000e38:	71bb      	strb	r3, [r7, #6]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	717b      	strb	r3, [r7, #5]
	uint8_t *ptr;
	uint8_t mask;

	// Pointer to the first byte of line in video buffer
	// This is optimized formula, original is "((y >> 3) * SCR_W) + x"
	ptr = &vRAM[((y >> 3) << 7)] + x;
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	08db      	lsrs	r3, r3, #3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	01db      	lsls	r3, r3, #7
 8000e46:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <SH1106_drawHLineInt+0xa8>)
 8000e48:	441a      	add	r2, r3
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]

	// Mask bit for pixel in byte
	mask = 1 << (y & 0x07);
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	2201      	movs	r2, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	72fb      	strb	r3, [r7, #11]

	// Draw line
	switch (SH1106_PixelMode) {
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <SH1106_drawHLineInt+0xac>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d002      	beq.n	8000e6c <SH1106_drawHLineInt+0x40>
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d01a      	beq.n	8000ea0 <SH1106_drawHLineInt+0x74>
 8000e6a:	e01f      	b.n	8000eac <SH1106_drawHLineInt+0x80>
	case SH1106_PRES:
		mask = ~mask;
 8000e6c:	7afb      	ldrb	r3, [r7, #11]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	72fb      	strb	r3, [r7, #11]
		while (w--)
 8000e72:	e007      	b.n	8000e84 <SH1106_drawHLineInt+0x58>
			*ptr++ &= mask;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60fa      	str	r2, [r7, #12]
 8000e7a:	7819      	ldrb	r1, [r3, #0]
 8000e7c:	7afa      	ldrb	r2, [r7, #11]
 8000e7e:	400a      	ands	r2, r1
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	701a      	strb	r2, [r3, #0]
		while (w--)
 8000e84:	797b      	ldrb	r3, [r7, #5]
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	717a      	strb	r2, [r7, #5]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f2      	bne.n	8000e74 <SH1106_drawHLineInt+0x48>
		break;
 8000e8e:	e01c      	b.n	8000eca <SH1106_drawHLineInt+0x9e>
	case SH1106_PINV:
		while (w--)
			*ptr++ ^= mask;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60fa      	str	r2, [r7, #12]
 8000e96:	7819      	ldrb	r1, [r3, #0]
 8000e98:	7afa      	ldrb	r2, [r7, #11]
 8000e9a:	404a      	eors	r2, r1
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	701a      	strb	r2, [r3, #0]
		while (w--)
 8000ea0:	797b      	ldrb	r3, [r7, #5]
 8000ea2:	1e5a      	subs	r2, r3, #1
 8000ea4:	717a      	strb	r2, [r7, #5]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1f2      	bne.n	8000e90 <SH1106_drawHLineInt+0x64>
		break;
 8000eaa:	e00e      	b.n	8000eca <SH1106_drawHLineInt+0x9e>
	default:
		while (w--)
 8000eac:	e007      	b.n	8000ebe <SH1106_drawHLineInt+0x92>
			*ptr++ |= mask;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	60fa      	str	r2, [r7, #12]
 8000eb4:	7819      	ldrb	r1, [r3, #0]
 8000eb6:	7afa      	ldrb	r2, [r7, #11]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	701a      	strb	r2, [r3, #0]
		while (w--)
 8000ebe:	797b      	ldrb	r3, [r7, #5]
 8000ec0:	1e5a      	subs	r2, r3, #1
 8000ec2:	717a      	strb	r2, [r7, #5]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f2      	bne.n	8000eae <SH1106_drawHLineInt+0x82>
		break;
 8000ec8:	bf00      	nop
	}
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	2000020c 	.word	0x2000020c
 8000ed8:	20000208 	.word	0x20000208

08000edc <SH1106_drawVLineInt>:
// Optimized draw vertical line (without regard of screen rotation)
// input:
//   x - horizontal coordinate
//   y - vertical coordinate
//   h - line length
static void SH1106_drawVLineInt(uint8_t x, uint8_t y, uint8_t h) {
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	71bb      	strb	r3, [r7, #6]
 8000eea:	4613      	mov	r3, r2
 8000eec:	717b      	strb	r3, [r7, #5]
	uint8_t mask;
	uint8_t modulo;

	// Pointer to the first byte of line in video buffer
	// This is optimized formula, original is "((y >> 3) * SCR_W) + x"
	ptr = &vRAM[((y >> 3) << 7)] + x;
 8000eee:	79bb      	ldrb	r3, [r7, #6]
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	01db      	lsls	r3, r3, #7
 8000ef6:	4a5f      	ldr	r2, [pc, #380]	; (8001074 <SH1106_drawVLineInt+0x198>)
 8000ef8:	441a      	add	r2, r3
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4413      	add	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]

	// First partial byte?
	modulo = (y & 0x07);
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	72bb      	strb	r3, [r7, #10]
	if (modulo) {
 8000f08:	7abb      	ldrb	r3, [r7, #10]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d046      	beq.n	8000f9c <SH1106_drawVLineInt+0xc0>
		// Get bit mask for first partial byte from lookup table
		modulo = 8 - modulo;
 8000f0e:	7abb      	ldrb	r3, [r7, #10]
 8000f10:	f1c3 0308 	rsb	r3, r3, #8
 8000f14:	72bb      	strb	r3, [r7, #10]
		mask = LUT_FB[modulo];
 8000f16:	7abb      	ldrb	r3, [r7, #10]
 8000f18:	4a57      	ldr	r2, [pc, #348]	; (8001078 <SH1106_drawVLineInt+0x19c>)
 8000f1a:	5cd3      	ldrb	r3, [r2, r3]
 8000f1c:	72fb      	strb	r3, [r7, #11]

		// Trim mask if line is will not go out from a current byte
		if (modulo > h)
 8000f1e:	7aba      	ldrb	r2, [r7, #10]
 8000f20:	797b      	ldrb	r3, [r7, #5]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d90b      	bls.n	8000f3e <SH1106_drawVLineInt+0x62>
			mask &= (0xFF >> (modulo - h));
 8000f26:	7aba      	ldrb	r2, [r7, #10]
 8000f28:	797b      	ldrb	r3, [r7, #5]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	22ff      	movs	r2, #255	; 0xff
 8000f2e:	fa42 f303 	asr.w	r3, r2, r3
 8000f32:	b25a      	sxtb	r2, r3
 8000f34:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	72fb      	strb	r3, [r7, #11]

		// Modify bits in first byte of line
		switch (SH1106_PixelMode) {
 8000f3e:	4b4f      	ldr	r3, [pc, #316]	; (800107c <SH1106_drawVLineInt+0x1a0>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d002      	beq.n	8000f4c <SH1106_drawVLineInt+0x70>
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d00d      	beq.n	8000f66 <SH1106_drawVLineInt+0x8a>
 8000f4a:	e014      	b.n	8000f76 <SH1106_drawVLineInt+0x9a>
		case SH1106_PRES:
			*ptr &= ~mask;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b25a      	sxtb	r2, r3
 8000f52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	701a      	strb	r2, [r3, #0]
			break;
 8000f64:	e00f      	b.n	8000f86 <SH1106_drawVLineInt+0xaa>
		case SH1106_PINV:
			*ptr ^= mask;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	7afb      	ldrb	r3, [r7, #11]
 8000f6c:	4053      	eors	r3, r2
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	701a      	strb	r2, [r3, #0]
			break;
 8000f74:	e007      	b.n	8000f86 <SH1106_drawVLineInt+0xaa>
		default:
			*ptr |= mask;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	7afb      	ldrb	r3, [r7, #11]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	701a      	strb	r2, [r3, #0]
			break;
 8000f84:	bf00      	nop
		}

		// Return if line is over
		if (modulo > h)
 8000f86:	7aba      	ldrb	r2, [r7, #10]
 8000f88:	797b      	ldrb	r3, [r7, #5]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d86d      	bhi.n	800106a <SH1106_drawVLineInt+0x18e>
			return;

		// Shift pointer to the next byte in line and decrease line height counter
		ptr += SCR_W;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3380      	adds	r3, #128	; 0x80
 8000f92:	60fb      	str	r3, [r7, #12]
		h -= modulo;
 8000f94:	797a      	ldrb	r2, [r7, #5]
 8000f96:	7abb      	ldrb	r3, [r7, #10]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	717b      	strb	r3, [r7, #5]
	}

	// Fill solid bytes
	if (h > 7) {
 8000f9c:	797b      	ldrb	r3, [r7, #5]
 8000f9e:	2b07      	cmp	r3, #7
 8000fa0:	d933      	bls.n	800100a <SH1106_drawVLineInt+0x12e>
		// Separate cycle for each case of pixel mode (to improve performance)
		switch (SH1106_PixelMode) {
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <SH1106_drawVLineInt+0x1a0>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d003      	beq.n	8000fb2 <SH1106_drawVLineInt+0xd6>
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d00f      	beq.n	8000fce <SH1106_drawVLineInt+0xf2>
 8000fae:	e01f      	b.n	8000ff0 <SH1106_drawVLineInt+0x114>
		case SH1106_PRES:
 8000fb0:	bf00      	nop
			do {
				*ptr = 0x00;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
				ptr += SCR_W;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3380      	adds	r3, #128	; 0x80
 8000fbc:	60fb      	str	r3, [r7, #12]
				h -= 8;
 8000fbe:	797b      	ldrb	r3, [r7, #5]
 8000fc0:	3b08      	subs	r3, #8
 8000fc2:	717b      	strb	r3, [r7, #5]
			} while (h > 7);
 8000fc4:	797b      	ldrb	r3, [r7, #5]
 8000fc6:	2b07      	cmp	r3, #7
 8000fc8:	d8f2      	bhi.n	8000fb0 <SH1106_drawVLineInt+0xd4>
			break;
 8000fca:	e01f      	b.n	800100c <SH1106_drawVLineInt+0x130>
		case SH1106_PINV:
 8000fcc:	bf00      	nop
			do {
				*ptr = ~(*ptr);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	701a      	strb	r2, [r3, #0]
				ptr += SCR_W;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3380      	adds	r3, #128	; 0x80
 8000fde:	60fb      	str	r3, [r7, #12]
				h -= 8;
 8000fe0:	797b      	ldrb	r3, [r7, #5]
 8000fe2:	3b08      	subs	r3, #8
 8000fe4:	717b      	strb	r3, [r7, #5]
			} while (h > 7);
 8000fe6:	797b      	ldrb	r3, [r7, #5]
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	d8ef      	bhi.n	8000fcc <SH1106_drawVLineInt+0xf0>
			break;
 8000fec:	e00e      	b.n	800100c <SH1106_drawVLineInt+0x130>
		default:
 8000fee:	bf00      	nop
			do {
				*ptr = 0xFF;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	22ff      	movs	r2, #255	; 0xff
 8000ff4:	701a      	strb	r2, [r3, #0]
				ptr += SCR_W;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3380      	adds	r3, #128	; 0x80
 8000ffa:	60fb      	str	r3, [r7, #12]
				h -= 8;
 8000ffc:	797b      	ldrb	r3, [r7, #5]
 8000ffe:	3b08      	subs	r3, #8
 8001000:	717b      	strb	r3, [r7, #5]
			} while (h > 7);
 8001002:	797b      	ldrb	r3, [r7, #5]
 8001004:	2b07      	cmp	r3, #7
 8001006:	d8f2      	bhi.n	8000fee <SH1106_drawVLineInt+0x112>
			break;
 8001008:	e000      	b.n	800100c <SH1106_drawVLineInt+0x130>
		}
	}
 800100a:	bf00      	nop

	// Last partial byte?
	if (h) {
 800100c:	797b      	ldrb	r3, [r7, #5]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d02c      	beq.n	800106c <SH1106_drawVLineInt+0x190>
		// Get bit mask for last partial byte from lookup table
		modulo = (h & 0x07);
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	72bb      	strb	r3, [r7, #10]
		mask = LUT_LB[modulo];
 800101a:	7abb      	ldrb	r3, [r7, #10]
 800101c:	4a18      	ldr	r2, [pc, #96]	; (8001080 <SH1106_drawVLineInt+0x1a4>)
 800101e:	5cd3      	ldrb	r3, [r2, r3]
 8001020:	72fb      	strb	r3, [r7, #11]

		// Modify bits in last byte of line
		switch (SH1106_PixelMode) {
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <SH1106_drawVLineInt+0x1a0>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d002      	beq.n	8001030 <SH1106_drawVLineInt+0x154>
 800102a:	2b02      	cmp	r3, #2
 800102c:	d00d      	beq.n	800104a <SH1106_drawVLineInt+0x16e>
 800102e:	e014      	b.n	800105a <SH1106_drawVLineInt+0x17e>
		case SH1106_PRES:
			*ptr &= ~mask;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b25a      	sxtb	r2, r3
 8001036:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800103a:	43db      	mvns	r3, r3
 800103c:	b25b      	sxtb	r3, r3
 800103e:	4013      	ands	r3, r2
 8001040:	b25b      	sxtb	r3, r3
 8001042:	b2da      	uxtb	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	701a      	strb	r2, [r3, #0]
			break;
 8001048:	e010      	b.n	800106c <SH1106_drawVLineInt+0x190>
		case SH1106_PINV:
			*ptr ^= mask;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	7afb      	ldrb	r3, [r7, #11]
 8001050:	4053      	eors	r3, r2
 8001052:	b2da      	uxtb	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	701a      	strb	r2, [r3, #0]
			break;
 8001058:	e008      	b.n	800106c <SH1106_drawVLineInt+0x190>
		default:
			*ptr |= mask;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	4313      	orrs	r3, r2
 8001062:	b2da      	uxtb	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	701a      	strb	r2, [r3, #0]
			break;
 8001068:	e000      	b.n	800106c <SH1106_drawVLineInt+0x190>
			return;
 800106a:	bf00      	nop
		}
	}
}
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	2000020c 	.word	0x2000020c
 8001078:	08008574 	.word	0x08008574
 800107c:	20000208 	.word	0x20000208
 8001080:	0800857c 	.word	0x0800857c

08001084 <SH1106_drawHLine>:

// Draw horizontal line
// input:
//   x1, x2 - left and right horizontal coordinates
//   y - vertical coordinate
void SH1106_drawHLine(uint8_t x1, uint8_t x2, uint8_t y) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	460b      	mov	r3, r1
 8001090:	71bb      	strb	r3, [r7, #6]
 8001092:	4613      	mov	r3, r2
 8001094:	717b      	strb	r3, [r7, #5]
	uint8_t x, w;

	if (x1 > x2) {
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	429a      	cmp	r2, r3
 800109c:	d906      	bls.n	80010ac <SH1106_drawHLine+0x28>
		x = x2;
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	73fb      	strb	r3, [r7, #15]
		w = x1 - x2;
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	73bb      	strb	r3, [r7, #14]
 80010aa:	e005      	b.n	80010b8 <SH1106_drawHLine+0x34>
	} else {
		x = x1;
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	73fb      	strb	r3, [r7, #15]
		w = x2 - x1;
 80010b0:	79ba      	ldrb	r2, [r7, #6]
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	73bb      	strb	r3, [r7, #14]
	}
	w++;
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	3301      	adds	r3, #1
 80010bc:	73bb      	strb	r3, [r7, #14]

	if (scr_orientation == SH1106_ORIENT_CW
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <SH1106_drawHLine+0x70>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d003      	beq.n	80010ce <SH1106_drawHLine+0x4a>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <SH1106_drawHLine+0x70>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d106      	bne.n	80010dc <SH1106_drawHLine+0x58>
		SH1106_drawVLineInt(y, x, w);
 80010ce:	7bba      	ldrb	r2, [r7, #14]
 80010d0:	7bf9      	ldrb	r1, [r7, #15]
 80010d2:	797b      	ldrb	r3, [r7, #5]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff01 	bl	8000edc <SH1106_drawVLineInt>
 80010da:	e006      	b.n	80010ea <SH1106_drawHLine+0x66>
	} else {
		SH1106_drawHLineInt(x, y, w);
 80010dc:	7bba      	ldrb	r2, [r7, #14]
 80010de:	7979      	ldrb	r1, [r7, #5]
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fea2 	bl	8000e2c <SH1106_drawHLineInt>
	}
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000209 	.word	0x20000209

080010f8 <SH1106_drawVLine>:

// Draw vertical line
// input:
//   x - horizontal coordinate
//   y1,y2 - top and bottom vertical coordinates (y1 must be less than y2)
void SH1106_drawVLine(uint8_t x, uint8_t y1, uint8_t y2) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
 8001102:	460b      	mov	r3, r1
 8001104:	71bb      	strb	r3, [r7, #6]
 8001106:	4613      	mov	r3, r2
 8001108:	717b      	strb	r3, [r7, #5]
	uint8_t y, h;

	if (y1 > y2) {
 800110a:	79ba      	ldrb	r2, [r7, #6]
 800110c:	797b      	ldrb	r3, [r7, #5]
 800110e:	429a      	cmp	r2, r3
 8001110:	d906      	bls.n	8001120 <SH1106_drawVLine+0x28>
		y = y2;
 8001112:	797b      	ldrb	r3, [r7, #5]
 8001114:	73fb      	strb	r3, [r7, #15]
		h = y1 - y2;
 8001116:	79ba      	ldrb	r2, [r7, #6]
 8001118:	797b      	ldrb	r3, [r7, #5]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	73bb      	strb	r3, [r7, #14]
 800111e:	e005      	b.n	800112c <SH1106_drawVLine+0x34>
	} else {
		y = y1;
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	73fb      	strb	r3, [r7, #15]
		h = y2 - y1;
 8001124:	797a      	ldrb	r2, [r7, #5]
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	73bb      	strb	r3, [r7, #14]
	}
	h++;
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	3301      	adds	r3, #1
 8001130:	73bb      	strb	r3, [r7, #14]

	if (scr_orientation == SH1106_ORIENT_CW
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <SH1106_drawVLine+0x70>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d003      	beq.n	8001142 <SH1106_drawVLine+0x4a>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <SH1106_drawVLine+0x70>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d106      	bne.n	8001150 <SH1106_drawVLine+0x58>
		SH1106_drawHLineInt(y, x, h);
 8001142:	7bba      	ldrb	r2, [r7, #14]
 8001144:	79f9      	ldrb	r1, [r7, #7]
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fe6f 	bl	8000e2c <SH1106_drawHLineInt>
 800114e:	e006      	b.n	800115e <SH1106_drawVLine+0x66>
	} else {
		SH1106_drawVLineInt(x, y, h);
 8001150:	7bba      	ldrb	r2, [r7, #14]
 8001152:	7bf9      	ldrb	r1, [r7, #15]
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fec0 	bl	8000edc <SH1106_drawVLineInt>
	}
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000209 	.word	0x20000209

0800116c <SH1106_fillRect>:

// Draw filled rectangle
// input:
//   x1,y1 - top left coordinates
//   x2,y2 - bottom right coordinates
void SH1106_fillRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	4604      	mov	r4, r0
 8001174:	4608      	mov	r0, r1
 8001176:	4611      	mov	r1, r2
 8001178:	461a      	mov	r2, r3
 800117a:	4623      	mov	r3, r4
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	4603      	mov	r3, r0
 8001180:	71bb      	strb	r3, [r7, #6]
 8001182:	460b      	mov	r3, r1
 8001184:	717b      	strb	r3, [r7, #5]
 8001186:	4613      	mov	r3, r2
 8001188:	713b      	strb	r3, [r7, #4]
	uint8_t z, e, t, l;

	// Fill rectangle by vertical lines is most optimal, therefore calculate coordinates
	// with regard of screen rotation
	if (scr_orientation == SH1106_ORIENT_CW
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <SH1106_fillRect+0xd0>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d003      	beq.n	800119a <SH1106_fillRect+0x2e>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <SH1106_fillRect+0xd0>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d11e      	bne.n	80011d8 <SH1106_fillRect+0x6c>
		if (x1 > x2) {
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	797b      	ldrb	r3, [r7, #5]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d906      	bls.n	80011b0 <SH1106_fillRect+0x44>
			t = x2;
 80011a2:	797b      	ldrb	r3, [r7, #5]
 80011a4:	737b      	strb	r3, [r7, #13]
			l = x1 - x2;
 80011a6:	79fa      	ldrb	r2, [r7, #7]
 80011a8:	797b      	ldrb	r3, [r7, #5]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	733b      	strb	r3, [r7, #12]
 80011ae:	e005      	b.n	80011bc <SH1106_fillRect+0x50>
		} else {
			t = x1;
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	737b      	strb	r3, [r7, #13]
			l = x2 - x1;
 80011b4:	797a      	ldrb	r2, [r7, #5]
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	733b      	strb	r3, [r7, #12]
		}

		if (y1 > y2) {
 80011bc:	79ba      	ldrb	r2, [r7, #6]
 80011be:	793b      	ldrb	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d904      	bls.n	80011ce <SH1106_fillRect+0x62>
			z = y1;
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	73fb      	strb	r3, [r7, #15]
			e = y2;
 80011c8:	793b      	ldrb	r3, [r7, #4]
 80011ca:	73bb      	strb	r3, [r7, #14]
		if (y1 > y2) {
 80011cc:	e022      	b.n	8001214 <SH1106_fillRect+0xa8>
		} else {
			z = y2;
 80011ce:	793b      	ldrb	r3, [r7, #4]
 80011d0:	73fb      	strb	r3, [r7, #15]
			e = y1;
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	73bb      	strb	r3, [r7, #14]
		if (y1 > y2) {
 80011d6:	e01d      	b.n	8001214 <SH1106_fillRect+0xa8>
		}
	} else {
		if (y1 > y2) {
 80011d8:	79ba      	ldrb	r2, [r7, #6]
 80011da:	793b      	ldrb	r3, [r7, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d906      	bls.n	80011ee <SH1106_fillRect+0x82>
			t = y2;
 80011e0:	793b      	ldrb	r3, [r7, #4]
 80011e2:	737b      	strb	r3, [r7, #13]
			l = y1 - y2;
 80011e4:	79ba      	ldrb	r2, [r7, #6]
 80011e6:	793b      	ldrb	r3, [r7, #4]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	733b      	strb	r3, [r7, #12]
 80011ec:	e005      	b.n	80011fa <SH1106_fillRect+0x8e>
		} else {
			t = y1;
 80011ee:	79bb      	ldrb	r3, [r7, #6]
 80011f0:	737b      	strb	r3, [r7, #13]
			l = y2 - y1;
 80011f2:	793a      	ldrb	r2, [r7, #4]
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	733b      	strb	r3, [r7, #12]
		}

		if (x1 > x2) {
 80011fa:	79fa      	ldrb	r2, [r7, #7]
 80011fc:	797b      	ldrb	r3, [r7, #5]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d904      	bls.n	800120c <SH1106_fillRect+0xa0>
			z = x1;
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	73fb      	strb	r3, [r7, #15]
			e = x2;
 8001206:	797b      	ldrb	r3, [r7, #5]
 8001208:	73bb      	strb	r3, [r7, #14]
 800120a:	e003      	b.n	8001214 <SH1106_fillRect+0xa8>
		} else {
			z = x2;
 800120c:	797b      	ldrb	r3, [r7, #5]
 800120e:	73fb      	strb	r3, [r7, #15]
			e = x1;
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	73bb      	strb	r3, [r7, #14]
		}
	}
	l++;
 8001214:	7b3b      	ldrb	r3, [r7, #12]
 8001216:	3301      	adds	r3, #1
 8001218:	733b      	strb	r3, [r7, #12]

	// Fill a rectangle
	do {
		SH1106_drawVLineInt(z, t, l);
 800121a:	7b3a      	ldrb	r2, [r7, #12]
 800121c:	7b79      	ldrb	r1, [r7, #13]
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fe5b 	bl	8000edc <SH1106_drawVLineInt>
	} while (z-- > e);
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	1e5a      	subs	r2, r3, #1
 800122a:	73fa      	strb	r2, [r7, #15]
 800122c:	7bba      	ldrb	r2, [r7, #14]
 800122e:	429a      	cmp	r2, r3
 8001230:	d3f3      	bcc.n	800121a <SH1106_fillRect+0xae>
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bd90      	pop	{r4, r7, pc}
 800123c:	20000209 	.word	0x20000209

08001240 <SH1106_drawCircle>:

// Draw circle
// input:
//   x_,x_ - circle center coordinates
//   radius - circle radius
void SH1106_drawCircle(int16_t x_, int16_t y_, uint8_t radius) {
 8001240:	b4b0      	push	{r4, r5, r7}
 8001242:	b091      	sub	sp, #68	; 0x44
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
 800124a:	460b      	mov	r3, r1
 800124c:	80bb      	strh	r3, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	70fb      	strb	r3, [r7, #3]
	int16_t err = 1 - radius;
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	b29b      	uxth	r3, r3
 8001256:	f1c3 0301 	rsb	r3, r3, #1
 800125a:	b29b      	uxth	r3, r3
 800125c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	int16_t dx = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	87bb      	strh	r3, [r7, #60]	; 0x3c
	int16_t dy = -2 * radius;
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	b29b      	uxth	r3, r3
 8001266:	461a      	mov	r2, r3
 8001268:	03d2      	lsls	r2, r2, #15
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	b29b      	uxth	r3, r3
 8001270:	877b      	strh	r3, [r7, #58]	; 0x3a
	int16_t x = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	873b      	strh	r3, [r7, #56]	; 0x38
	int16_t y = radius;
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	86fb      	strh	r3, [r7, #54]	; 0x36
	// Screen width and height for less calculations
	int16_t sh = scr_height - 1;
 800127a:	4b8c      	ldr	r3, [pc, #560]	; (80014ac <SH1106_drawCircle+0x26c>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	3b01      	subs	r3, #1
 8001280:	b29b      	uxth	r3, r3
 8001282:	86bb      	strh	r3, [r7, #52]	; 0x34
	int16_t sw = scr_width - 1;
 8001284:	4b8a      	ldr	r3, [pc, #552]	; (80014b0 <SH1106_drawCircle+0x270>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	3b01      	subs	r3, #1
 800128a:	b29b      	uxth	r3, r3
 800128c:	867b      	strh	r3, [r7, #50]	; 0x32

	while (x < y) {
 800128e:	e3cc      	b.n	8001a2a <SH1106_drawCircle+0x7ea>
		if (err >= 0) {
 8001290:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0e      	blt.n	80012b6 <SH1106_drawCircle+0x76>
			dy += 2;
 8001298:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800129a:	3302      	adds	r3, #2
 800129c:	b29b      	uxth	r3, r3
 800129e:	877b      	strh	r3, [r7, #58]	; 0x3a
			err += dy;
 80012a0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80012a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80012a4:	4413      	add	r3, r2
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
			y--;
 80012aa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	3b01      	subs	r3, #1
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		dx += 2;
 80012b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012b8:	3302      	adds	r3, #2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
		err += dx + 1;
 80012be:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80012c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80012c2:	4413      	add	r3, r2
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3301      	adds	r3, #1
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
		x++;
 80012cc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	3301      	adds	r3, #1
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	873b      	strh	r3, [r7, #56]	; 0x38

		// Draw eight pixels of each octant
		if (x_ + x < sw) {
 80012d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012dc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80012e0:	441a      	add	r2, r3
 80012e2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80012e6:	429a      	cmp	r2, r3
 80012e8:	f280 80eb 	bge.w	80014c2 <SH1106_drawCircle+0x282>
			if (y_ + y < sh)
 80012ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012f0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80012f4:	441a      	add	r2, r3
 80012f6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80012fa:	429a      	cmp	r2, r3
 80012fc:	da67      	bge.n	80013ce <SH1106_drawCircle+0x18e>
				SH1106_pixel(x_ + x, y_ + y, SH1106_PixelMode);
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b2d9      	uxtb	r1, r3
 800130a:	88bb      	ldrh	r3, [r7, #4]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4413      	add	r3, r2
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b67      	ldr	r3, [pc, #412]	; (80014b4 <SH1106_drawCircle+0x274>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	f887 1031 	strb.w	r1, [r7, #49]	; 0x31
 800131e:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8001322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (scr_orientation == SH1106_ORIENT_CW
 8001326:	4b64      	ldr	r3, [pc, #400]	; (80014b8 <SH1106_drawCircle+0x278>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d003      	beq.n	8001336 <SH1106_drawCircle+0xf6>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 800132e:	4b62      	ldr	r3, [pc, #392]	; (80014b8 <SH1106_drawCircle+0x278>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d10d      	bne.n	8001352 <SH1106_drawCircle+0x112>
		offset = ((x >> 3) << 7) + y;
 8001336:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800133a:	08db      	lsrs	r3, r3, #3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	01da      	lsls	r2, r3, #7
 8001340:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001344:	4413      	add	r3, r2
 8001346:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001348:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800134c:	f003 0507 	and.w	r5, r3, #7
 8001350:	e00c      	b.n	800136c <SH1106_drawCircle+0x12c>
		offset = ((y >> 3) << 7) + x;
 8001352:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	01da      	lsls	r2, r3, #7
 800135c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001360:	4413      	add	r3, r2
 8001362:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001364:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001368:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 800136c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001370:	d82c      	bhi.n	80013cc <SH1106_drawCircle+0x18c>
	switch (Mode) {
 8001372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001376:	2b01      	cmp	r3, #1
 8001378:	d002      	beq.n	8001380 <SH1106_drawCircle+0x140>
 800137a:	2b02      	cmp	r3, #2
 800137c:	d00e      	beq.n	800139c <SH1106_drawCircle+0x15c>
 800137e:	e019      	b.n	80013b4 <SH1106_drawCircle+0x174>
		vRAM[offset] &= ~(1 << bpos);
 8001380:	4b4e      	ldr	r3, [pc, #312]	; (80014bc <SH1106_drawCircle+0x27c>)
 8001382:	5d1b      	ldrb	r3, [r3, r4]
 8001384:	b25a      	sxtb	r2, r3
 8001386:	2301      	movs	r3, #1
 8001388:	40ab      	lsls	r3, r5
 800138a:	b25b      	sxtb	r3, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	b25b      	sxtb	r3, r3
 8001390:	4013      	ands	r3, r2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b49      	ldr	r3, [pc, #292]	; (80014bc <SH1106_drawCircle+0x27c>)
 8001398:	551a      	strb	r2, [r3, r4]
		break;
 800139a:	e018      	b.n	80013ce <SH1106_drawCircle+0x18e>
		vRAM[offset] ^= (1 << bpos);
 800139c:	4b47      	ldr	r3, [pc, #284]	; (80014bc <SH1106_drawCircle+0x27c>)
 800139e:	5d1b      	ldrb	r3, [r3, r4]
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	2301      	movs	r3, #1
 80013a4:	40ab      	lsls	r3, r5
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	4053      	eors	r3, r2
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b43      	ldr	r3, [pc, #268]	; (80014bc <SH1106_drawCircle+0x27c>)
 80013b0:	551a      	strb	r2, [r3, r4]
		break;
 80013b2:	e00c      	b.n	80013ce <SH1106_drawCircle+0x18e>
		vRAM[offset] |= (1 << bpos);
 80013b4:	4b41      	ldr	r3, [pc, #260]	; (80014bc <SH1106_drawCircle+0x27c>)
 80013b6:	5d1b      	ldrb	r3, [r3, r4]
 80013b8:	b25a      	sxtb	r2, r3
 80013ba:	2301      	movs	r3, #1
 80013bc:	40ab      	lsls	r3, r5
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <SH1106_drawCircle+0x27c>)
 80013c8:	551a      	strb	r2, [r3, r4]
		break;
 80013ca:	e000      	b.n	80013ce <SH1106_drawCircle+0x18e>
		return;
 80013cc:	bf00      	nop
			if (y_ - y > -1)
 80013ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013d2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db72      	blt.n	80014c2 <SH1106_drawCircle+0x282>
				SH1106_pixel(x_ + x, y_ - y, SH1106_PixelMode);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	b2d9      	uxtb	r1, r3
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <SH1106_drawCircle+0x274>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	f887 102e 	strb.w	r1, [r7, #46]	; 0x2e
 80013fc:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8001400:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	if (scr_orientation == SH1106_ORIENT_CW
 8001404:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <SH1106_drawCircle+0x278>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d003      	beq.n	8001414 <SH1106_drawCircle+0x1d4>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <SH1106_drawCircle+0x278>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d10d      	bne.n	8001430 <SH1106_drawCircle+0x1f0>
		offset = ((x >> 3) << 7) + y;
 8001414:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001418:	08db      	lsrs	r3, r3, #3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	01da      	lsls	r2, r3, #7
 800141e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001422:	4413      	add	r3, r2
 8001424:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001426:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800142a:	f003 0507 	and.w	r5, r3, #7
 800142e:	e00c      	b.n	800144a <SH1106_drawCircle+0x20a>
		offset = ((y >> 3) << 7) + x;
 8001430:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	01da      	lsls	r2, r3, #7
 800143a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800143e:	4413      	add	r3, r2
 8001440:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001442:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001446:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 800144a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800144e:	d837      	bhi.n	80014c0 <SH1106_drawCircle+0x280>
	switch (Mode) {
 8001450:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001454:	2b01      	cmp	r3, #1
 8001456:	d002      	beq.n	800145e <SH1106_drawCircle+0x21e>
 8001458:	2b02      	cmp	r3, #2
 800145a:	d00e      	beq.n	800147a <SH1106_drawCircle+0x23a>
 800145c:	e019      	b.n	8001492 <SH1106_drawCircle+0x252>
		vRAM[offset] &= ~(1 << bpos);
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <SH1106_drawCircle+0x27c>)
 8001460:	5d1b      	ldrb	r3, [r3, r4]
 8001462:	b25a      	sxtb	r2, r3
 8001464:	2301      	movs	r3, #1
 8001466:	40ab      	lsls	r3, r5
 8001468:	b25b      	sxtb	r3, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	b25b      	sxtb	r3, r3
 800146e:	4013      	ands	r3, r2
 8001470:	b25b      	sxtb	r3, r3
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <SH1106_drawCircle+0x27c>)
 8001476:	551a      	strb	r2, [r3, r4]
		break;
 8001478:	e023      	b.n	80014c2 <SH1106_drawCircle+0x282>
		vRAM[offset] ^= (1 << bpos);
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <SH1106_drawCircle+0x27c>)
 800147c:	5d1b      	ldrb	r3, [r3, r4]
 800147e:	b25a      	sxtb	r2, r3
 8001480:	2301      	movs	r3, #1
 8001482:	40ab      	lsls	r3, r5
 8001484:	b25b      	sxtb	r3, r3
 8001486:	4053      	eors	r3, r2
 8001488:	b25b      	sxtb	r3, r3
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <SH1106_drawCircle+0x27c>)
 800148e:	551a      	strb	r2, [r3, r4]
		break;
 8001490:	e017      	b.n	80014c2 <SH1106_drawCircle+0x282>
		vRAM[offset] |= (1 << bpos);
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <SH1106_drawCircle+0x27c>)
 8001494:	5d1b      	ldrb	r3, [r3, r4]
 8001496:	b25a      	sxtb	r2, r3
 8001498:	2301      	movs	r3, #1
 800149a:	40ab      	lsls	r3, r5
 800149c:	b25b      	sxtb	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SH1106_drawCircle+0x27c>)
 80014a6:	551a      	strb	r2, [r3, r4]
		break;
 80014a8:	e00b      	b.n	80014c2 <SH1106_drawCircle+0x282>
 80014aa:	bf00      	nop
 80014ac:	20000042 	.word	0x20000042
 80014b0:	20000040 	.word	0x20000040
 80014b4:	20000208 	.word	0x20000208
 80014b8:	20000209 	.word	0x20000209
 80014bc:	2000020c 	.word	0x2000020c
		return;
 80014c0:	bf00      	nop
		}
		if (x_ - x > -1) {
 80014c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014c6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f2c0 80e0 	blt.w	8001692 <SH1106_drawCircle+0x452>
			if (y_ + y < sh)
 80014d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014d6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80014da:	441a      	add	r2, r3
 80014dc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80014e0:	429a      	cmp	r2, r3
 80014e2:	da67      	bge.n	80015b4 <SH1106_drawCircle+0x374>
				SH1106_pixel(x_ - x, y_ + y, SH1106_PixelMode);
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	b2d9      	uxtb	r1, r3
 80014f0:	88bb      	ldrh	r3, [r7, #4]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4ba2      	ldr	r3, [pc, #648]	; (8001788 <SH1106_drawCircle+0x548>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
 8001504:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
 8001508:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	if (scr_orientation == SH1106_ORIENT_CW
 800150c:	4b9f      	ldr	r3, [pc, #636]	; (800178c <SH1106_drawCircle+0x54c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d003      	beq.n	800151c <SH1106_drawCircle+0x2dc>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001514:	4b9d      	ldr	r3, [pc, #628]	; (800178c <SH1106_drawCircle+0x54c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d10d      	bne.n	8001538 <SH1106_drawCircle+0x2f8>
		offset = ((x >> 3) << 7) + y;
 800151c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001520:	08db      	lsrs	r3, r3, #3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	01da      	lsls	r2, r3, #7
 8001526:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800152a:	4413      	add	r3, r2
 800152c:	461c      	mov	r4, r3
		bpos = x & 0x07;
 800152e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001532:	f003 0507 	and.w	r5, r3, #7
 8001536:	e00c      	b.n	8001552 <SH1106_drawCircle+0x312>
		offset = ((y >> 3) << 7) + x;
 8001538:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	01da      	lsls	r2, r3, #7
 8001542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001546:	4413      	add	r3, r2
 8001548:	461c      	mov	r4, r3
		bpos = y & 0x07;
 800154a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800154e:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001552:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001556:	d82c      	bhi.n	80015b2 <SH1106_drawCircle+0x372>
	switch (Mode) {
 8001558:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800155c:	2b01      	cmp	r3, #1
 800155e:	d002      	beq.n	8001566 <SH1106_drawCircle+0x326>
 8001560:	2b02      	cmp	r3, #2
 8001562:	d00e      	beq.n	8001582 <SH1106_drawCircle+0x342>
 8001564:	e019      	b.n	800159a <SH1106_drawCircle+0x35a>
		vRAM[offset] &= ~(1 << bpos);
 8001566:	4b8a      	ldr	r3, [pc, #552]	; (8001790 <SH1106_drawCircle+0x550>)
 8001568:	5d1b      	ldrb	r3, [r3, r4]
 800156a:	b25a      	sxtb	r2, r3
 800156c:	2301      	movs	r3, #1
 800156e:	40ab      	lsls	r3, r5
 8001570:	b25b      	sxtb	r3, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	b25b      	sxtb	r3, r3
 8001576:	4013      	ands	r3, r2
 8001578:	b25b      	sxtb	r3, r3
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b84      	ldr	r3, [pc, #528]	; (8001790 <SH1106_drawCircle+0x550>)
 800157e:	551a      	strb	r2, [r3, r4]
		break;
 8001580:	e018      	b.n	80015b4 <SH1106_drawCircle+0x374>
		vRAM[offset] ^= (1 << bpos);
 8001582:	4b83      	ldr	r3, [pc, #524]	; (8001790 <SH1106_drawCircle+0x550>)
 8001584:	5d1b      	ldrb	r3, [r3, r4]
 8001586:	b25a      	sxtb	r2, r3
 8001588:	2301      	movs	r3, #1
 800158a:	40ab      	lsls	r3, r5
 800158c:	b25b      	sxtb	r3, r3
 800158e:	4053      	eors	r3, r2
 8001590:	b25b      	sxtb	r3, r3
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b7e      	ldr	r3, [pc, #504]	; (8001790 <SH1106_drawCircle+0x550>)
 8001596:	551a      	strb	r2, [r3, r4]
		break;
 8001598:	e00c      	b.n	80015b4 <SH1106_drawCircle+0x374>
		vRAM[offset] |= (1 << bpos);
 800159a:	4b7d      	ldr	r3, [pc, #500]	; (8001790 <SH1106_drawCircle+0x550>)
 800159c:	5d1b      	ldrb	r3, [r3, r4]
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	2301      	movs	r3, #1
 80015a2:	40ab      	lsls	r3, r5
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4b78      	ldr	r3, [pc, #480]	; (8001790 <SH1106_drawCircle+0x550>)
 80015ae:	551a      	strb	r2, [r3, r4]
		break;
 80015b0:	e000      	b.n	80015b4 <SH1106_drawCircle+0x374>
		return;
 80015b2:	bf00      	nop
			if (y_ - y > -1)
 80015b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015b8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db67      	blt.n	8001692 <SH1106_drawCircle+0x452>
				SH1106_pixel(x_ - x, y_ - y, SH1106_PixelMode);
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	b2d9      	uxtb	r1, r3
 80015ce:	88bb      	ldrh	r3, [r7, #4]
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b6b      	ldr	r3, [pc, #428]	; (8001788 <SH1106_drawCircle+0x548>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
 80015e2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80015e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (scr_orientation == SH1106_ORIENT_CW
 80015ea:	4b68      	ldr	r3, [pc, #416]	; (800178c <SH1106_drawCircle+0x54c>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d003      	beq.n	80015fa <SH1106_drawCircle+0x3ba>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 80015f2:	4b66      	ldr	r3, [pc, #408]	; (800178c <SH1106_drawCircle+0x54c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d10d      	bne.n	8001616 <SH1106_drawCircle+0x3d6>
		offset = ((x >> 3) << 7) + y;
 80015fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015fe:	08db      	lsrs	r3, r3, #3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	01da      	lsls	r2, r3, #7
 8001604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001608:	4413      	add	r3, r2
 800160a:	461c      	mov	r4, r3
		bpos = x & 0x07;
 800160c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001610:	f003 0507 	and.w	r5, r3, #7
 8001614:	e00c      	b.n	8001630 <SH1106_drawCircle+0x3f0>
		offset = ((y >> 3) << 7) + x;
 8001616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800161a:	08db      	lsrs	r3, r3, #3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	01da      	lsls	r2, r3, #7
 8001620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001624:	4413      	add	r3, r2
 8001626:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800162c:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001630:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001634:	d82c      	bhi.n	8001690 <SH1106_drawCircle+0x450>
	switch (Mode) {
 8001636:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800163a:	2b01      	cmp	r3, #1
 800163c:	d002      	beq.n	8001644 <SH1106_drawCircle+0x404>
 800163e:	2b02      	cmp	r3, #2
 8001640:	d00e      	beq.n	8001660 <SH1106_drawCircle+0x420>
 8001642:	e019      	b.n	8001678 <SH1106_drawCircle+0x438>
		vRAM[offset] &= ~(1 << bpos);
 8001644:	4b52      	ldr	r3, [pc, #328]	; (8001790 <SH1106_drawCircle+0x550>)
 8001646:	5d1b      	ldrb	r3, [r3, r4]
 8001648:	b25a      	sxtb	r2, r3
 800164a:	2301      	movs	r3, #1
 800164c:	40ab      	lsls	r3, r5
 800164e:	b25b      	sxtb	r3, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	b25b      	sxtb	r3, r3
 8001654:	4013      	ands	r3, r2
 8001656:	b25b      	sxtb	r3, r3
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <SH1106_drawCircle+0x550>)
 800165c:	551a      	strb	r2, [r3, r4]
		break;
 800165e:	e018      	b.n	8001692 <SH1106_drawCircle+0x452>
		vRAM[offset] ^= (1 << bpos);
 8001660:	4b4b      	ldr	r3, [pc, #300]	; (8001790 <SH1106_drawCircle+0x550>)
 8001662:	5d1b      	ldrb	r3, [r3, r4]
 8001664:	b25a      	sxtb	r2, r3
 8001666:	2301      	movs	r3, #1
 8001668:	40ab      	lsls	r3, r5
 800166a:	b25b      	sxtb	r3, r3
 800166c:	4053      	eors	r3, r2
 800166e:	b25b      	sxtb	r3, r3
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b47      	ldr	r3, [pc, #284]	; (8001790 <SH1106_drawCircle+0x550>)
 8001674:	551a      	strb	r2, [r3, r4]
		break;
 8001676:	e00c      	b.n	8001692 <SH1106_drawCircle+0x452>
		vRAM[offset] |= (1 << bpos);
 8001678:	4b45      	ldr	r3, [pc, #276]	; (8001790 <SH1106_drawCircle+0x550>)
 800167a:	5d1b      	ldrb	r3, [r3, r4]
 800167c:	b25a      	sxtb	r2, r3
 800167e:	2301      	movs	r3, #1
 8001680:	40ab      	lsls	r3, r5
 8001682:	b25b      	sxtb	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b25b      	sxtb	r3, r3
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <SH1106_drawCircle+0x550>)
 800168c:	551a      	strb	r2, [r3, r4]
		break;
 800168e:	e000      	b.n	8001692 <SH1106_drawCircle+0x452>
		return;
 8001690:	bf00      	nop
		}
		if (x_ + y < sw) {
 8001692:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001696:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800169a:	441a      	add	r2, r3
 800169c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f280 80e7 	bge.w	8001874 <SH1106_drawCircle+0x634>
			if (y_ + x < sh)
 80016a6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016aa:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80016ae:	441a      	add	r2, r3
 80016b0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80016b4:	429a      	cmp	r2, r3
 80016b6:	da6e      	bge.n	8001796 <SH1106_drawCircle+0x556>
				SH1106_pixel(x_ + y, y_ + x, SH1106_PixelMode);
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	b2d9      	uxtb	r1, r3
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <SH1106_drawCircle+0x548>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 80016d8:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 80016dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (scr_orientation == SH1106_ORIENT_CW
 80016e0:	4b2a      	ldr	r3, [pc, #168]	; (800178c <SH1106_drawCircle+0x54c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d003      	beq.n	80016f0 <SH1106_drawCircle+0x4b0>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <SH1106_drawCircle+0x54c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d10d      	bne.n	800170c <SH1106_drawCircle+0x4cc>
		offset = ((x >> 3) << 7) + y;
 80016f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	01da      	lsls	r2, r3, #7
 80016fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016fe:	4413      	add	r3, r2
 8001700:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001702:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001706:	f003 0507 	and.w	r5, r3, #7
 800170a:	e00c      	b.n	8001726 <SH1106_drawCircle+0x4e6>
		offset = ((y >> 3) << 7) + x;
 800170c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001710:	08db      	lsrs	r3, r3, #3
 8001712:	b2db      	uxtb	r3, r3
 8001714:	01da      	lsls	r2, r3, #7
 8001716:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800171a:	4413      	add	r3, r2
 800171c:	461c      	mov	r4, r3
		bpos = y & 0x07;
 800171e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001722:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001726:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800172a:	d833      	bhi.n	8001794 <SH1106_drawCircle+0x554>
	switch (Mode) {
 800172c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001730:	2b01      	cmp	r3, #1
 8001732:	d002      	beq.n	800173a <SH1106_drawCircle+0x4fa>
 8001734:	2b02      	cmp	r3, #2
 8001736:	d00e      	beq.n	8001756 <SH1106_drawCircle+0x516>
 8001738:	e019      	b.n	800176e <SH1106_drawCircle+0x52e>
		vRAM[offset] &= ~(1 << bpos);
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <SH1106_drawCircle+0x550>)
 800173c:	5d1b      	ldrb	r3, [r3, r4]
 800173e:	b25a      	sxtb	r2, r3
 8001740:	2301      	movs	r3, #1
 8001742:	40ab      	lsls	r3, r5
 8001744:	b25b      	sxtb	r3, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	b25b      	sxtb	r3, r3
 800174a:	4013      	ands	r3, r2
 800174c:	b25b      	sxtb	r3, r3
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <SH1106_drawCircle+0x550>)
 8001752:	551a      	strb	r2, [r3, r4]
		break;
 8001754:	e01f      	b.n	8001796 <SH1106_drawCircle+0x556>
		vRAM[offset] ^= (1 << bpos);
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <SH1106_drawCircle+0x550>)
 8001758:	5d1b      	ldrb	r3, [r3, r4]
 800175a:	b25a      	sxtb	r2, r3
 800175c:	2301      	movs	r3, #1
 800175e:	40ab      	lsls	r3, r5
 8001760:	b25b      	sxtb	r3, r3
 8001762:	4053      	eors	r3, r2
 8001764:	b25b      	sxtb	r3, r3
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <SH1106_drawCircle+0x550>)
 800176a:	551a      	strb	r2, [r3, r4]
		break;
 800176c:	e013      	b.n	8001796 <SH1106_drawCircle+0x556>
		vRAM[offset] |= (1 << bpos);
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <SH1106_drawCircle+0x550>)
 8001770:	5d1b      	ldrb	r3, [r3, r4]
 8001772:	b25a      	sxtb	r2, r3
 8001774:	2301      	movs	r3, #1
 8001776:	40ab      	lsls	r3, r5
 8001778:	b25b      	sxtb	r3, r3
 800177a:	4313      	orrs	r3, r2
 800177c:	b25b      	sxtb	r3, r3
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <SH1106_drawCircle+0x550>)
 8001782:	551a      	strb	r2, [r3, r4]
		break;
 8001784:	e007      	b.n	8001796 <SH1106_drawCircle+0x556>
 8001786:	bf00      	nop
 8001788:	20000208 	.word	0x20000208
 800178c:	20000209 	.word	0x20000209
 8001790:	2000020c 	.word	0x2000020c
		return;
 8001794:	bf00      	nop
			if (y_ - x > -1)
 8001796:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800179a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db67      	blt.n	8001874 <SH1106_drawCircle+0x634>
				SH1106_pixel(x_ + y, y_ - x, SH1106_PixelMode);
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	b2d9      	uxtb	r1, r3
 80017b0:	88bb      	ldrh	r3, [r7, #4]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b97      	ldr	r3, [pc, #604]	; (8001a1c <SH1106_drawCircle+0x7dc>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
 80017c4:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 80017c8:	f887 3020 	strb.w	r3, [r7, #32]
	if (scr_orientation == SH1106_ORIENT_CW
 80017cc:	4b94      	ldr	r3, [pc, #592]	; (8001a20 <SH1106_drawCircle+0x7e0>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d003      	beq.n	80017dc <SH1106_drawCircle+0x59c>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 80017d4:	4b92      	ldr	r3, [pc, #584]	; (8001a20 <SH1106_drawCircle+0x7e0>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d10d      	bne.n	80017f8 <SH1106_drawCircle+0x5b8>
		offset = ((x >> 3) << 7) + y;
 80017dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017e0:	08db      	lsrs	r3, r3, #3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	01da      	lsls	r2, r3, #7
 80017e6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017ea:	4413      	add	r3, r2
 80017ec:	461c      	mov	r4, r3
		bpos = x & 0x07;
 80017ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017f2:	f003 0507 	and.w	r5, r3, #7
 80017f6:	e00c      	b.n	8001812 <SH1106_drawCircle+0x5d2>
		offset = ((y >> 3) << 7) + x;
 80017f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017fc:	08db      	lsrs	r3, r3, #3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	01da      	lsls	r2, r3, #7
 8001802:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001806:	4413      	add	r3, r2
 8001808:	461c      	mov	r4, r3
		bpos = y & 0x07;
 800180a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800180e:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001812:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001816:	d82c      	bhi.n	8001872 <SH1106_drawCircle+0x632>
	switch (Mode) {
 8001818:	f897 3020 	ldrb.w	r3, [r7, #32]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d002      	beq.n	8001826 <SH1106_drawCircle+0x5e6>
 8001820:	2b02      	cmp	r3, #2
 8001822:	d00e      	beq.n	8001842 <SH1106_drawCircle+0x602>
 8001824:	e019      	b.n	800185a <SH1106_drawCircle+0x61a>
		vRAM[offset] &= ~(1 << bpos);
 8001826:	4b7f      	ldr	r3, [pc, #508]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 8001828:	5d1b      	ldrb	r3, [r3, r4]
 800182a:	b25a      	sxtb	r2, r3
 800182c:	2301      	movs	r3, #1
 800182e:	40ab      	lsls	r3, r5
 8001830:	b25b      	sxtb	r3, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	b25b      	sxtb	r3, r3
 8001836:	4013      	ands	r3, r2
 8001838:	b25b      	sxtb	r3, r3
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b79      	ldr	r3, [pc, #484]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 800183e:	551a      	strb	r2, [r3, r4]
		break;
 8001840:	e018      	b.n	8001874 <SH1106_drawCircle+0x634>
		vRAM[offset] ^= (1 << bpos);
 8001842:	4b78      	ldr	r3, [pc, #480]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 8001844:	5d1b      	ldrb	r3, [r3, r4]
 8001846:	b25a      	sxtb	r2, r3
 8001848:	2301      	movs	r3, #1
 800184a:	40ab      	lsls	r3, r5
 800184c:	b25b      	sxtb	r3, r3
 800184e:	4053      	eors	r3, r2
 8001850:	b25b      	sxtb	r3, r3
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b73      	ldr	r3, [pc, #460]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 8001856:	551a      	strb	r2, [r3, r4]
		break;
 8001858:	e00c      	b.n	8001874 <SH1106_drawCircle+0x634>
		vRAM[offset] |= (1 << bpos);
 800185a:	4b72      	ldr	r3, [pc, #456]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 800185c:	5d1b      	ldrb	r3, [r3, r4]
 800185e:	b25a      	sxtb	r2, r3
 8001860:	2301      	movs	r3, #1
 8001862:	40ab      	lsls	r3, r5
 8001864:	b25b      	sxtb	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b25b      	sxtb	r3, r3
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b6d      	ldr	r3, [pc, #436]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 800186e:	551a      	strb	r2, [r3, r4]
		break;
 8001870:	e000      	b.n	8001874 <SH1106_drawCircle+0x634>
		return;
 8001872:	bf00      	nop
		}
		if (x_ - y > -1) {
 8001874:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001878:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	f2c0 80d3 	blt.w	8001a2a <SH1106_drawCircle+0x7ea>
			if (y_ + x < sh)
 8001884:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001888:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800188c:	441a      	add	r2, r3
 800188e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001892:	429a      	cmp	r2, r3
 8001894:	da5d      	bge.n	8001952 <SH1106_drawCircle+0x712>
				SH1106_pixel(x_ - y, y_ + x, SH1106_PixelMode);
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800189c:	b2db      	uxtb	r3, r3
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	b2d9      	uxtb	r1, r3
 80018a2:	88bb      	ldrh	r3, [r7, #4]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <SH1106_drawCircle+0x7dc>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	77f9      	strb	r1, [r7, #31]
 80018b4:	77ba      	strb	r2, [r7, #30]
 80018b6:	777b      	strb	r3, [r7, #29]
	if (scr_orientation == SH1106_ORIENT_CW
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <SH1106_drawCircle+0x7e0>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d003      	beq.n	80018c8 <SH1106_drawCircle+0x688>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 80018c0:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <SH1106_drawCircle+0x7e0>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d10a      	bne.n	80018de <SH1106_drawCircle+0x69e>
		offset = ((x >> 3) << 7) + y;
 80018c8:	7ffb      	ldrb	r3, [r7, #31]
 80018ca:	08db      	lsrs	r3, r3, #3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	01da      	lsls	r2, r3, #7
 80018d0:	7fbb      	ldrb	r3, [r7, #30]
 80018d2:	4413      	add	r3, r2
 80018d4:	461c      	mov	r4, r3
		bpos = x & 0x07;
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	f003 0507 	and.w	r5, r3, #7
 80018dc:	e009      	b.n	80018f2 <SH1106_drawCircle+0x6b2>
		offset = ((y >> 3) << 7) + x;
 80018de:	7fbb      	ldrb	r3, [r7, #30]
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	01da      	lsls	r2, r3, #7
 80018e6:	7ffb      	ldrb	r3, [r7, #31]
 80018e8:	4413      	add	r3, r2
 80018ea:	461c      	mov	r4, r3
		bpos = y & 0x07;
 80018ec:	7fbb      	ldrb	r3, [r7, #30]
 80018ee:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 80018f2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80018f6:	d82b      	bhi.n	8001950 <SH1106_drawCircle+0x710>
	switch (Mode) {
 80018f8:	7f7b      	ldrb	r3, [r7, #29]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d002      	beq.n	8001904 <SH1106_drawCircle+0x6c4>
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d00e      	beq.n	8001920 <SH1106_drawCircle+0x6e0>
 8001902:	e019      	b.n	8001938 <SH1106_drawCircle+0x6f8>
		vRAM[offset] &= ~(1 << bpos);
 8001904:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 8001906:	5d1b      	ldrb	r3, [r3, r4]
 8001908:	b25a      	sxtb	r2, r3
 800190a:	2301      	movs	r3, #1
 800190c:	40ab      	lsls	r3, r5
 800190e:	b25b      	sxtb	r3, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	b25b      	sxtb	r3, r3
 8001914:	4013      	ands	r3, r2
 8001916:	b25b      	sxtb	r3, r3
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b42      	ldr	r3, [pc, #264]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 800191c:	551a      	strb	r2, [r3, r4]
		break;
 800191e:	e018      	b.n	8001952 <SH1106_drawCircle+0x712>
		vRAM[offset] ^= (1 << bpos);
 8001920:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 8001922:	5d1b      	ldrb	r3, [r3, r4]
 8001924:	b25a      	sxtb	r2, r3
 8001926:	2301      	movs	r3, #1
 8001928:	40ab      	lsls	r3, r5
 800192a:	b25b      	sxtb	r3, r3
 800192c:	4053      	eors	r3, r2
 800192e:	b25b      	sxtb	r3, r3
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 8001934:	551a      	strb	r2, [r3, r4]
		break;
 8001936:	e00c      	b.n	8001952 <SH1106_drawCircle+0x712>
		vRAM[offset] |= (1 << bpos);
 8001938:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 800193a:	5d1b      	ldrb	r3, [r3, r4]
 800193c:	b25a      	sxtb	r2, r3
 800193e:	2301      	movs	r3, #1
 8001940:	40ab      	lsls	r3, r5
 8001942:	b25b      	sxtb	r3, r3
 8001944:	4313      	orrs	r3, r2
 8001946:	b25b      	sxtb	r3, r3
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 800194c:	551a      	strb	r2, [r3, r4]
		break;
 800194e:	e000      	b.n	8001952 <SH1106_drawCircle+0x712>
		return;
 8001950:	bf00      	nop
			if (y_ - x > -1)
 8001952:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001956:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	db64      	blt.n	8001a2a <SH1106_drawCircle+0x7ea>
				SH1106_pixel(x_ - y, y_ - x, SH1106_PixelMode);
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001966:	b2db      	uxtb	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b2d9      	uxtb	r1, r3
 800196c:	88bb      	ldrh	r3, [r7, #4]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001972:	b2db      	uxtb	r3, r3
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <SH1106_drawCircle+0x7dc>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	7739      	strb	r1, [r7, #28]
 800197e:	76fa      	strb	r2, [r7, #27]
 8001980:	76bb      	strb	r3, [r7, #26]
	if (scr_orientation == SH1106_ORIENT_CW
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <SH1106_drawCircle+0x7e0>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d003      	beq.n	8001992 <SH1106_drawCircle+0x752>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 800198a:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <SH1106_drawCircle+0x7e0>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d10a      	bne.n	80019a8 <SH1106_drawCircle+0x768>
		offset = ((x >> 3) << 7) + y;
 8001992:	7f3b      	ldrb	r3, [r7, #28]
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	01da      	lsls	r2, r3, #7
 800199a:	7efb      	ldrb	r3, [r7, #27]
 800199c:	4413      	add	r3, r2
 800199e:	461c      	mov	r4, r3
		bpos = x & 0x07;
 80019a0:	7f3b      	ldrb	r3, [r7, #28]
 80019a2:	f003 0507 	and.w	r5, r3, #7
 80019a6:	e009      	b.n	80019bc <SH1106_drawCircle+0x77c>
		offset = ((y >> 3) << 7) + x;
 80019a8:	7efb      	ldrb	r3, [r7, #27]
 80019aa:	08db      	lsrs	r3, r3, #3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	01da      	lsls	r2, r3, #7
 80019b0:	7f3b      	ldrb	r3, [r7, #28]
 80019b2:	4413      	add	r3, r2
 80019b4:	461c      	mov	r4, r3
		bpos = y & 0x07;
 80019b6:	7efb      	ldrb	r3, [r7, #27]
 80019b8:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 80019bc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80019c0:	d832      	bhi.n	8001a28 <SH1106_drawCircle+0x7e8>
	switch (Mode) {
 80019c2:	7ebb      	ldrb	r3, [r7, #26]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d002      	beq.n	80019ce <SH1106_drawCircle+0x78e>
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d00e      	beq.n	80019ea <SH1106_drawCircle+0x7aa>
 80019cc:	e019      	b.n	8001a02 <SH1106_drawCircle+0x7c2>
		vRAM[offset] &= ~(1 << bpos);
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 80019d0:	5d1b      	ldrb	r3, [r3, r4]
 80019d2:	b25a      	sxtb	r2, r3
 80019d4:	2301      	movs	r3, #1
 80019d6:	40ab      	lsls	r3, r5
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	4013      	ands	r3, r2
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 80019e6:	551a      	strb	r2, [r3, r4]
		break;
 80019e8:	e01f      	b.n	8001a2a <SH1106_drawCircle+0x7ea>
		vRAM[offset] ^= (1 << bpos);
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 80019ec:	5d1b      	ldrb	r3, [r3, r4]
 80019ee:	b25a      	sxtb	r2, r3
 80019f0:	2301      	movs	r3, #1
 80019f2:	40ab      	lsls	r3, r5
 80019f4:	b25b      	sxtb	r3, r3
 80019f6:	4053      	eors	r3, r2
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 80019fe:	551a      	strb	r2, [r3, r4]
		break;
 8001a00:	e013      	b.n	8001a2a <SH1106_drawCircle+0x7ea>
		vRAM[offset] |= (1 << bpos);
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 8001a04:	5d1b      	ldrb	r3, [r3, r4]
 8001a06:	b25a      	sxtb	r2, r3
 8001a08:	2301      	movs	r3, #1
 8001a0a:	40ab      	lsls	r3, r5
 8001a0c:	b25b      	sxtb	r3, r3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b25b      	sxtb	r3, r3
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <SH1106_drawCircle+0x7e4>)
 8001a16:	551a      	strb	r2, [r3, r4]
		break;
 8001a18:	e007      	b.n	8001a2a <SH1106_drawCircle+0x7ea>
 8001a1a:	bf00      	nop
 8001a1c:	20000208 	.word	0x20000208
 8001a20:	20000209 	.word	0x20000209
 8001a24:	2000020c 	.word	0x2000020c
		return;
 8001a28:	bf00      	nop
	while (x < y) {
 8001a2a:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8001a2e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001a32:	429a      	cmp	r2, r3
 8001a34:	f6ff ac2c 	blt.w	8001290 <SH1106_drawCircle+0x50>
		}
	}

	// Vertical and horizontal points
	if (x_ + radius < sw)
 8001a38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	441a      	add	r2, r3
 8001a40:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001a44:	429a      	cmp	r2, r3
 8001a46:	da58      	bge.n	8001afa <SH1106_drawCircle+0x8ba>
		SH1106_pixel(x_ + radius, y_, SH1106_PixelMode);
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	4413      	add	r3, r2
 8001a50:	b2d9      	uxtb	r1, r3
 8001a52:	88bb      	ldrh	r3, [r7, #4]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b9b      	ldr	r3, [pc, #620]	; (8001cc4 <SH1106_drawCircle+0xa84>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	7679      	strb	r1, [r7, #25]
 8001a5c:	763a      	strb	r2, [r7, #24]
 8001a5e:	75fb      	strb	r3, [r7, #23]
	if (scr_orientation == SH1106_ORIENT_CW
 8001a60:	4b99      	ldr	r3, [pc, #612]	; (8001cc8 <SH1106_drawCircle+0xa88>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d003      	beq.n	8001a70 <SH1106_drawCircle+0x830>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001a68:	4b97      	ldr	r3, [pc, #604]	; (8001cc8 <SH1106_drawCircle+0xa88>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d10a      	bne.n	8001a86 <SH1106_drawCircle+0x846>
		offset = ((x >> 3) << 7) + y;
 8001a70:	7e7b      	ldrb	r3, [r7, #25]
 8001a72:	08db      	lsrs	r3, r3, #3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	01da      	lsls	r2, r3, #7
 8001a78:	7e3b      	ldrb	r3, [r7, #24]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001a7e:	7e7b      	ldrb	r3, [r7, #25]
 8001a80:	f003 0507 	and.w	r5, r3, #7
 8001a84:	e009      	b.n	8001a9a <SH1106_drawCircle+0x85a>
		offset = ((y >> 3) << 7) + x;
 8001a86:	7e3b      	ldrb	r3, [r7, #24]
 8001a88:	08db      	lsrs	r3, r3, #3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	01da      	lsls	r2, r3, #7
 8001a8e:	7e7b      	ldrb	r3, [r7, #25]
 8001a90:	4413      	add	r3, r2
 8001a92:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001a94:	7e3b      	ldrb	r3, [r7, #24]
 8001a96:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001a9a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001a9e:	d82b      	bhi.n	8001af8 <SH1106_drawCircle+0x8b8>
	switch (Mode) {
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d002      	beq.n	8001aac <SH1106_drawCircle+0x86c>
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d00e      	beq.n	8001ac8 <SH1106_drawCircle+0x888>
 8001aaa:	e019      	b.n	8001ae0 <SH1106_drawCircle+0x8a0>
		vRAM[offset] &= ~(1 << bpos);
 8001aac:	4b87      	ldr	r3, [pc, #540]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001aae:	5d1b      	ldrb	r3, [r3, r4]
 8001ab0:	b25a      	sxtb	r2, r3
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	40ab      	lsls	r3, r5
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	4013      	ands	r3, r2
 8001abe:	b25b      	sxtb	r3, r3
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b82      	ldr	r3, [pc, #520]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001ac4:	551a      	strb	r2, [r3, r4]
		break;
 8001ac6:	e018      	b.n	8001afa <SH1106_drawCircle+0x8ba>
		vRAM[offset] ^= (1 << bpos);
 8001ac8:	4b80      	ldr	r3, [pc, #512]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001aca:	5d1b      	ldrb	r3, [r3, r4]
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	2301      	movs	r3, #1
 8001ad0:	40ab      	lsls	r3, r5
 8001ad2:	b25b      	sxtb	r3, r3
 8001ad4:	4053      	eors	r3, r2
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4b7c      	ldr	r3, [pc, #496]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001adc:	551a      	strb	r2, [r3, r4]
		break;
 8001ade:	e00c      	b.n	8001afa <SH1106_drawCircle+0x8ba>
		vRAM[offset] |= (1 << bpos);
 8001ae0:	4b7a      	ldr	r3, [pc, #488]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001ae2:	5d1b      	ldrb	r3, [r3, r4]
 8001ae4:	b25a      	sxtb	r2, r3
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	40ab      	lsls	r3, r5
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4b76      	ldr	r3, [pc, #472]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001af4:	551a      	strb	r2, [r3, r4]
		break;
 8001af6:	e000      	b.n	8001afa <SH1106_drawCircle+0x8ba>
		return;
 8001af8:	bf00      	nop
	if (x_ - radius > -1)
 8001afa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db58      	blt.n	8001bb8 <SH1106_drawCircle+0x978>
		SH1106_pixel(x_ - radius, y_, SH1106_PixelMode);
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	b2d9      	uxtb	r1, r3
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b6b      	ldr	r3, [pc, #428]	; (8001cc4 <SH1106_drawCircle+0xa84>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	75b9      	strb	r1, [r7, #22]
 8001b1a:	757a      	strb	r2, [r7, #21]
 8001b1c:	753b      	strb	r3, [r7, #20]
	if (scr_orientation == SH1106_ORIENT_CW
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	; (8001cc8 <SH1106_drawCircle+0xa88>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d003      	beq.n	8001b2e <SH1106_drawCircle+0x8ee>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001b26:	4b68      	ldr	r3, [pc, #416]	; (8001cc8 <SH1106_drawCircle+0xa88>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d10a      	bne.n	8001b44 <SH1106_drawCircle+0x904>
		offset = ((x >> 3) << 7) + y;
 8001b2e:	7dbb      	ldrb	r3, [r7, #22]
 8001b30:	08db      	lsrs	r3, r3, #3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	01da      	lsls	r2, r3, #7
 8001b36:	7d7b      	ldrb	r3, [r7, #21]
 8001b38:	4413      	add	r3, r2
 8001b3a:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001b3c:	7dbb      	ldrb	r3, [r7, #22]
 8001b3e:	f003 0507 	and.w	r5, r3, #7
 8001b42:	e009      	b.n	8001b58 <SH1106_drawCircle+0x918>
		offset = ((y >> 3) << 7) + x;
 8001b44:	7d7b      	ldrb	r3, [r7, #21]
 8001b46:	08db      	lsrs	r3, r3, #3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	01da      	lsls	r2, r3, #7
 8001b4c:	7dbb      	ldrb	r3, [r7, #22]
 8001b4e:	4413      	add	r3, r2
 8001b50:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001b52:	7d7b      	ldrb	r3, [r7, #21]
 8001b54:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001b58:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001b5c:	d82b      	bhi.n	8001bb6 <SH1106_drawCircle+0x976>
	switch (Mode) {
 8001b5e:	7d3b      	ldrb	r3, [r7, #20]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d002      	beq.n	8001b6a <SH1106_drawCircle+0x92a>
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d00e      	beq.n	8001b86 <SH1106_drawCircle+0x946>
 8001b68:	e019      	b.n	8001b9e <SH1106_drawCircle+0x95e>
		vRAM[offset] &= ~(1 << bpos);
 8001b6a:	4b58      	ldr	r3, [pc, #352]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001b6c:	5d1b      	ldrb	r3, [r3, r4]
 8001b6e:	b25a      	sxtb	r2, r3
 8001b70:	2301      	movs	r3, #1
 8001b72:	40ab      	lsls	r3, r5
 8001b74:	b25b      	sxtb	r3, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	4b52      	ldr	r3, [pc, #328]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001b82:	551a      	strb	r2, [r3, r4]
		break;
 8001b84:	e018      	b.n	8001bb8 <SH1106_drawCircle+0x978>
		vRAM[offset] ^= (1 << bpos);
 8001b86:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001b88:	5d1b      	ldrb	r3, [r3, r4]
 8001b8a:	b25a      	sxtb	r2, r3
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	40ab      	lsls	r3, r5
 8001b90:	b25b      	sxtb	r3, r3
 8001b92:	4053      	eors	r3, r2
 8001b94:	b25b      	sxtb	r3, r3
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001b9a:	551a      	strb	r2, [r3, r4]
		break;
 8001b9c:	e00c      	b.n	8001bb8 <SH1106_drawCircle+0x978>
		vRAM[offset] |= (1 << bpos);
 8001b9e:	4b4b      	ldr	r3, [pc, #300]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001ba0:	5d1b      	ldrb	r3, [r3, r4]
 8001ba2:	b25a      	sxtb	r2, r3
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	40ab      	lsls	r3, r5
 8001ba8:	b25b      	sxtb	r3, r3
 8001baa:	4313      	orrs	r3, r2
 8001bac:	b25b      	sxtb	r3, r3
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b46      	ldr	r3, [pc, #280]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001bb2:	551a      	strb	r2, [r3, r4]
		break;
 8001bb4:	e000      	b.n	8001bb8 <SH1106_drawCircle+0x978>
		return;
 8001bb6:	bf00      	nop
	if (y_ + radius < sh)
 8001bb8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	441a      	add	r2, r3
 8001bc0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	da58      	bge.n	8001c7a <SH1106_drawCircle+0xa3a>
		SH1106_pixel(x_, y_ + radius, SH1106_PixelMode);
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	b2d9      	uxtb	r1, r3
 8001bcc:	88bb      	ldrh	r3, [r7, #4]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <SH1106_drawCircle+0xa84>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	74f9      	strb	r1, [r7, #19]
 8001bdc:	74ba      	strb	r2, [r7, #18]
 8001bde:	747b      	strb	r3, [r7, #17]
	if (scr_orientation == SH1106_ORIENT_CW
 8001be0:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <SH1106_drawCircle+0xa88>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d003      	beq.n	8001bf0 <SH1106_drawCircle+0x9b0>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001be8:	4b37      	ldr	r3, [pc, #220]	; (8001cc8 <SH1106_drawCircle+0xa88>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d10a      	bne.n	8001c06 <SH1106_drawCircle+0x9c6>
		offset = ((x >> 3) << 7) + y;
 8001bf0:	7cfb      	ldrb	r3, [r7, #19]
 8001bf2:	08db      	lsrs	r3, r3, #3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	01da      	lsls	r2, r3, #7
 8001bf8:	7cbb      	ldrb	r3, [r7, #18]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
 8001c00:	f003 0507 	and.w	r5, r3, #7
 8001c04:	e009      	b.n	8001c1a <SH1106_drawCircle+0x9da>
		offset = ((y >> 3) << 7) + x;
 8001c06:	7cbb      	ldrb	r3, [r7, #18]
 8001c08:	08db      	lsrs	r3, r3, #3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	01da      	lsls	r2, r3, #7
 8001c0e:	7cfb      	ldrb	r3, [r7, #19]
 8001c10:	4413      	add	r3, r2
 8001c12:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001c14:	7cbb      	ldrb	r3, [r7, #18]
 8001c16:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001c1a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001c1e:	d82b      	bhi.n	8001c78 <SH1106_drawCircle+0xa38>
	switch (Mode) {
 8001c20:	7c7b      	ldrb	r3, [r7, #17]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d002      	beq.n	8001c2c <SH1106_drawCircle+0x9ec>
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d00e      	beq.n	8001c48 <SH1106_drawCircle+0xa08>
 8001c2a:	e019      	b.n	8001c60 <SH1106_drawCircle+0xa20>
		vRAM[offset] &= ~(1 << bpos);
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001c2e:	5d1b      	ldrb	r3, [r3, r4]
 8001c30:	b25a      	sxtb	r2, r3
 8001c32:	2301      	movs	r3, #1
 8001c34:	40ab      	lsls	r3, r5
 8001c36:	b25b      	sxtb	r3, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	b25b      	sxtb	r3, r3
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001c44:	551a      	strb	r2, [r3, r4]
		break;
 8001c46:	e018      	b.n	8001c7a <SH1106_drawCircle+0xa3a>
		vRAM[offset] ^= (1 << bpos);
 8001c48:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001c4a:	5d1b      	ldrb	r3, [r3, r4]
 8001c4c:	b25a      	sxtb	r2, r3
 8001c4e:	2301      	movs	r3, #1
 8001c50:	40ab      	lsls	r3, r5
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	4053      	eors	r3, r2
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001c5c:	551a      	strb	r2, [r3, r4]
		break;
 8001c5e:	e00c      	b.n	8001c7a <SH1106_drawCircle+0xa3a>
		vRAM[offset] |= (1 << bpos);
 8001c60:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001c62:	5d1b      	ldrb	r3, [r3, r4]
 8001c64:	b25a      	sxtb	r2, r3
 8001c66:	2301      	movs	r3, #1
 8001c68:	40ab      	lsls	r3, r5
 8001c6a:	b25b      	sxtb	r3, r3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <SH1106_drawCircle+0xa8c>)
 8001c74:	551a      	strb	r2, [r3, r4]
		break;
 8001c76:	e000      	b.n	8001c7a <SH1106_drawCircle+0xa3a>
		return;
 8001c78:	bf00      	nop
	if (y_ - radius > -1)
 8001c7a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db5e      	blt.n	8001d44 <SH1106_drawCircle+0xb04>
		SH1106_pixel(x_, y_ - radius, SH1106_PixelMode);
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	b2d9      	uxtb	r1, r3
 8001c8a:	88bb      	ldrh	r3, [r7, #4]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <SH1106_drawCircle+0xa84>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	7439      	strb	r1, [r7, #16]
 8001c9a:	73fa      	strb	r2, [r7, #15]
 8001c9c:	73bb      	strb	r3, [r7, #14]
	if (scr_orientation == SH1106_ORIENT_CW
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <SH1106_drawCircle+0xa88>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d003      	beq.n	8001cae <SH1106_drawCircle+0xa6e>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <SH1106_drawCircle+0xa88>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d110      	bne.n	8001cd0 <SH1106_drawCircle+0xa90>
		offset = ((x >> 3) << 7) + y;
 8001cae:	7c3b      	ldrb	r3, [r7, #16]
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	01da      	lsls	r2, r3, #7
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	4413      	add	r3, r2
 8001cba:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001cbc:	7c3b      	ldrb	r3, [r7, #16]
 8001cbe:	f003 0507 	and.w	r5, r3, #7
 8001cc2:	e00f      	b.n	8001ce4 <SH1106_drawCircle+0xaa4>
 8001cc4:	20000208 	.word	0x20000208
 8001cc8:	20000209 	.word	0x20000209
 8001ccc:	2000020c 	.word	0x2000020c
		offset = ((y >> 3) << 7) + x;
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	08db      	lsrs	r3, r3, #3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	01da      	lsls	r2, r3, #7
 8001cd8:	7c3b      	ldrb	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001ce4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001ce8:	d82b      	bhi.n	8001d42 <SH1106_drawCircle+0xb02>
	switch (Mode) {
 8001cea:	7bbb      	ldrb	r3, [r7, #14]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d002      	beq.n	8001cf6 <SH1106_drawCircle+0xab6>
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d00e      	beq.n	8001d12 <SH1106_drawCircle+0xad2>
 8001cf4:	e019      	b.n	8001d2a <SH1106_drawCircle+0xaea>
		vRAM[offset] &= ~(1 << bpos);
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <SH1106_drawCircle+0xb10>)
 8001cf8:	5d1b      	ldrb	r3, [r3, r4]
 8001cfa:	b25a      	sxtb	r2, r3
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	40ab      	lsls	r3, r5
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	4013      	ands	r3, r2
 8001d08:	b25b      	sxtb	r3, r3
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <SH1106_drawCircle+0xb10>)
 8001d0e:	551a      	strb	r2, [r3, r4]
		break;
 8001d10:	e018      	b.n	8001d44 <SH1106_drawCircle+0xb04>
		vRAM[offset] ^= (1 << bpos);
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <SH1106_drawCircle+0xb10>)
 8001d14:	5d1b      	ldrb	r3, [r3, r4]
 8001d16:	b25a      	sxtb	r2, r3
 8001d18:	2301      	movs	r3, #1
 8001d1a:	40ab      	lsls	r3, r5
 8001d1c:	b25b      	sxtb	r3, r3
 8001d1e:	4053      	eors	r3, r2
 8001d20:	b25b      	sxtb	r3, r3
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <SH1106_drawCircle+0xb10>)
 8001d26:	551a      	strb	r2, [r3, r4]
		break;
 8001d28:	e00c      	b.n	8001d44 <SH1106_drawCircle+0xb04>
		vRAM[offset] |= (1 << bpos);
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <SH1106_drawCircle+0xb10>)
 8001d2c:	5d1b      	ldrb	r3, [r3, r4]
 8001d2e:	b25a      	sxtb	r2, r3
 8001d30:	2301      	movs	r3, #1
 8001d32:	40ab      	lsls	r3, r5
 8001d34:	b25b      	sxtb	r3, r3
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SH1106_drawCircle+0xb10>)
 8001d3e:	551a      	strb	r2, [r3, r4]
		break;
 8001d40:	e000      	b.n	8001d44 <SH1106_drawCircle+0xb04>
		return;
 8001d42:	bf00      	nop
}
 8001d44:	bf00      	nop
 8001d46:	3744      	adds	r7, #68	; 0x44
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bcb0      	pop	{r4, r5, r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	2000020c 	.word	0x2000020c

08001d54 <SH1106_drawBattery>:
 * @brief: draws a simple 5x20 battery gauge at given position
 * @param percentage: % of battery to be displayed on the gauge
 * @param x: topleft x coordinate to draw gauge
 * @param y: topleft y coordinate to draw gauge
 */
void SH1106_drawBattery(uint8_t percentage, uint8_t x, uint8_t y)	{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	71bb      	strb	r3, [r7, #6]
 8001d62:	4613      	mov	r3, r2
 8001d64:	717b      	strb	r3, [r7, #5]
	SH1106_drawHLine(x+1, x+19, y); //top
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b2d8      	uxtb	r0, r3
 8001d6c:	79bb      	ldrb	r3, [r7, #6]
 8001d6e:	3313      	adds	r3, #19
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	797a      	ldrb	r2, [r7, #5]
 8001d74:	4619      	mov	r1, r3
 8001d76:	f7ff f985 	bl	8001084 <SH1106_drawHLine>
    SH1106_drawHLine(x+1, x+19, y+4); //bottom
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	b2d8      	uxtb	r0, r3
 8001d80:	79bb      	ldrb	r3, [r7, #6]
 8001d82:	3313      	adds	r3, #19
 8001d84:	b2d9      	uxtb	r1, r3
 8001d86:	797b      	ldrb	r3, [r7, #5]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f7ff f979 	bl	8001084 <SH1106_drawHLine>
    SH1106_drawVLine(x, y+1, y+3); //left
 8001d92:	797b      	ldrb	r3, [r7, #5]
 8001d94:	3301      	adds	r3, #1
 8001d96:	b2d9      	uxtb	r1, r3
 8001d98:	797b      	ldrb	r3, [r7, #5]
 8001d9a:	3303      	adds	r3, #3
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f9a9 	bl	80010f8 <SH1106_drawVLine>
    SH1106_drawVLine(x+20, y+1, y+3); //right
 8001da6:	79bb      	ldrb	r3, [r7, #6]
 8001da8:	3314      	adds	r3, #20
 8001daa:	b2d8      	uxtb	r0, r3
 8001dac:	797b      	ldrb	r3, [r7, #5]
 8001dae:	3301      	adds	r3, #1
 8001db0:	b2d9      	uxtb	r1, r3
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	3303      	adds	r3, #3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	f7ff f99d 	bl	80010f8 <SH1106_drawVLine>
    SH1106_fillRect(x, y+1, x+(percentage/5), y+3); //percentage for filling
 8001dbe:	797b      	ldrb	r3, [r7, #5]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b2d9      	uxtb	r1, r3
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	4a09      	ldr	r2, [pc, #36]	; (8001dec <SH1106_drawBattery+0x98>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	79bb      	ldrb	r3, [r7, #6]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	797b      	ldrb	r3, [r7, #5]
 8001dd8:	3303      	adds	r3, #3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	79b8      	ldrb	r0, [r7, #6]
 8001dde:	f7ff f9c5 	bl	800116c <SH1106_fillRect>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	cccccccd 	.word	0xcccccccd

08001df0 <SH1106_drawBitmapFullscreen>:
		}
		p_y += 8;
	}
}

void SH1106_drawBitmapFullscreen(const uint8_t *pBMP) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	memcpy(vRAM, pBMP, (SCR_W * SCR_H ) >> 3);
 8001df8:	4a06      	ldr	r2, [pc, #24]	; (8001e14 <SH1106_drawBitmapFullscreen+0x24>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e04:	461a      	mov	r2, r3
 8001e06:	f002 fd3b 	bl	8004880 <memcpy>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000020c 	.word	0x2000020c

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_Init+0x28>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_Init+0x28>)
 8001e22:	f043 0310 	orr.w	r3, r3, #16
 8001e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 fd21 	bl	8002870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	200f      	movs	r0, #15
 8001e30:	f7fe fd2a 	bl	8000888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7fe fcee 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_IncTick+0x1c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x20>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <HAL_IncTick+0x20>)
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	200000cc 	.word	0x200000cc
 8001e64:	2000068c 	.word	0x2000068c

08001e68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_GetTick+0x10>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	2000068c 	.word	0x2000068c

08001e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff fff0 	bl	8001e68 <HAL_GetTick>
 8001e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d005      	beq.n	8001ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_Delay+0x44>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea2:	bf00      	nop
 8001ea4:	f7ff ffe0 	bl	8001e68 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8f7      	bhi.n	8001ea4 <HAL_Delay+0x28>
  {
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200000cc 	.word	0x200000cc

08001ec4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0be      	b.n	8002064 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe f960 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fbc5 	bl	8002698 <ADC_ConversionStop_Disable>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 8099 	bne.w	8002052 <HAL_ADC_Init+0x18e>
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f040 8095 	bne.w	8002052 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f30:	f023 0302 	bic.w	r3, r3, #2
 8001f34:	f043 0202 	orr.w	r2, r3, #2
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f44:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	7b1b      	ldrb	r3, [r3, #12]
 8001f4a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f4c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f5c:	d003      	beq.n	8001f66 <HAL_ADC_Init+0xa2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d102      	bne.n	8001f6c <HAL_ADC_Init+0xa8>
 8001f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f6a:	e000      	b.n	8001f6e <HAL_ADC_Init+0xaa>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7d1b      	ldrb	r3, [r3, #20]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d119      	bne.n	8001fb0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7b1b      	ldrb	r3, [r3, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	035a      	lsls	r2, r3, #13
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	e00b      	b.n	8001fb0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	f043 0220 	orr.w	r2, r3, #32
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	4b28      	ldr	r3, [pc, #160]	; (800206c <HAL_ADC_Init+0x1a8>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe0:	d003      	beq.n	8001fea <HAL_ADC_Init+0x126>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d104      	bne.n	8001ff4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	051b      	lsls	r3, r3, #20
 8001ff2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	430a      	orrs	r2, r1
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	4b18      	ldr	r3, [pc, #96]	; (8002070 <HAL_ADC_Init+0x1ac>)
 8002010:	4013      	ands	r3, r2
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	429a      	cmp	r2, r3
 8002016:	d10b      	bne.n	8002030 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800202e:	e018      	b.n	8002062 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	f023 0312 	bic.w	r3, r3, #18
 8002038:	f043 0210 	orr.w	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002050:	e007      	b.n	8002062 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	f043 0210 	orr.w	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002062:	7dfb      	ldrb	r3, [r7, #23]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	ffe1f7fd 	.word	0xffe1f7fd
 8002070:	ff1f0efe 	.word	0xff1f0efe

08002074 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_ADC_Start+0x1a>
 800208a:	2302      	movs	r3, #2
 800208c:	e098      	b.n	80021c0 <HAL_ADC_Start+0x14c>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 faa4 	bl	80025e4 <ADC_Enable>
 800209c:	4603      	mov	r3, r0
 800209e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 8087 	bne.w	80021b6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a41      	ldr	r2, [pc, #260]	; (80021c8 <HAL_ADC_Start+0x154>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d105      	bne.n	80020d2 <HAL_ADC_Start+0x5e>
 80020c6:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_ADC_Start+0x158>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d115      	bne.n	80020fe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d026      	beq.n	800213a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020fc:	e01d      	b.n	800213a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2f      	ldr	r2, [pc, #188]	; (80021cc <HAL_ADC_Start+0x158>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d004      	beq.n	800211e <HAL_ADC_Start+0xaa>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a2b      	ldr	r2, [pc, #172]	; (80021c8 <HAL_ADC_Start+0x154>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10d      	bne.n	800213a <HAL_ADC_Start+0xc6>
 800211e:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <HAL_ADC_Start+0x158>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002132:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d006      	beq.n	8002154 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	f023 0206 	bic.w	r2, r3, #6
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	62da      	str	r2, [r3, #44]	; 0x2c
 8002152:	e002      	b.n	800215a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f06f 0202 	mvn.w	r2, #2
 800216a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002176:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800217a:	d113      	bne.n	80021a4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002180:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <HAL_ADC_Start+0x154>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d105      	bne.n	8002192 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <HAL_ADC_Start+0x158>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	d108      	bne.n	80021a4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	e00c      	b.n	80021be <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	e003      	b.n	80021be <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40012800 	.word	0x40012800
 80021cc:	40012400 	.word	0x40012400

080021d0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80021e6:	f7ff fe3f 	bl	8001e68 <HAL_GetTick>
 80021ea:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	f043 0220 	orr.w	r2, r3, #32
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0d3      	b.n	80023ba <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d131      	bne.n	8002284 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800222a:	2b00      	cmp	r3, #0
 800222c:	d12a      	bne.n	8002284 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800222e:	e021      	b.n	8002274 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002236:	d01d      	beq.n	8002274 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_ADC_PollForConversion+0x7e>
 800223e:	f7ff fe13 	bl	8001e68 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d212      	bcs.n	8002274 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10b      	bne.n	8002274 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	f043 0204 	orr.w	r2, r3, #4
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0a2      	b.n	80023ba <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0d6      	beq.n	8002230 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002282:	e070      	b.n	8002366 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002284:	4b4f      	ldr	r3, [pc, #316]	; (80023c4 <HAL_ADC_PollForConversion+0x1f4>)
 8002286:	681c      	ldr	r4, [r3, #0]
 8002288:	2002      	movs	r0, #2
 800228a:	f001 fe1b 	bl	8003ec4 <HAL_RCCEx_GetPeriphCLKFreq>
 800228e:	4603      	mov	r3, r0
 8002290:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6919      	ldr	r1, [r3, #16]
 800229a:	4b4b      	ldr	r3, [pc, #300]	; (80023c8 <HAL_ADC_PollForConversion+0x1f8>)
 800229c:	400b      	ands	r3, r1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_ADC_PollForConversion+0x104>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68d9      	ldr	r1, [r3, #12]
 80022a8:	4b48      	ldr	r3, [pc, #288]	; (80023cc <HAL_ADC_PollForConversion+0x1fc>)
 80022aa:	400b      	ands	r3, r1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d111      	bne.n	80022d4 <HAL_ADC_PollForConversion+0x104>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6919      	ldr	r1, [r3, #16]
 80022b6:	4b46      	ldr	r3, [pc, #280]	; (80023d0 <HAL_ADC_PollForConversion+0x200>)
 80022b8:	400b      	ands	r3, r1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d108      	bne.n	80022d0 <HAL_ADC_PollForConversion+0x100>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68d9      	ldr	r1, [r3, #12]
 80022c4:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <HAL_ADC_PollForConversion+0x204>)
 80022c6:	400b      	ands	r3, r1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_PollForConversion+0x100>
 80022cc:	2314      	movs	r3, #20
 80022ce:	e020      	b.n	8002312 <HAL_ADC_PollForConversion+0x142>
 80022d0:	2329      	movs	r3, #41	; 0x29
 80022d2:	e01e      	b.n	8002312 <HAL_ADC_PollForConversion+0x142>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6919      	ldr	r1, [r3, #16]
 80022da:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <HAL_ADC_PollForConversion+0x200>)
 80022dc:	400b      	ands	r3, r1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_ADC_PollForConversion+0x120>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68d9      	ldr	r1, [r3, #12]
 80022e8:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <HAL_ADC_PollForConversion+0x204>)
 80022ea:	400b      	ands	r3, r1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00d      	beq.n	800230c <HAL_ADC_PollForConversion+0x13c>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6919      	ldr	r1, [r3, #16]
 80022f6:	4b38      	ldr	r3, [pc, #224]	; (80023d8 <HAL_ADC_PollForConversion+0x208>)
 80022f8:	400b      	ands	r3, r1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d108      	bne.n	8002310 <HAL_ADC_PollForConversion+0x140>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68d9      	ldr	r1, [r3, #12]
 8002304:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_ADC_PollForConversion+0x208>)
 8002306:	400b      	ands	r3, r1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_PollForConversion+0x140>
 800230c:	2354      	movs	r3, #84	; 0x54
 800230e:	e000      	b.n	8002312 <HAL_ADC_PollForConversion+0x142>
 8002310:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002318:	e021      	b.n	800235e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d01a      	beq.n	8002358 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_ADC_PollForConversion+0x168>
 8002328:	f7ff fd9e 	bl	8001e68 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d20f      	bcs.n	8002358 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	429a      	cmp	r2, r3
 800233e:	d90b      	bls.n	8002358 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	f043 0204 	orr.w	r2, r3, #4
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e030      	b.n	80023ba <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3301      	adds	r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	429a      	cmp	r2, r3
 8002364:	d8d9      	bhi.n	800231a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f06f 0212 	mvn.w	r2, #18
 800236e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002386:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800238a:	d115      	bne.n	80023b8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002390:	2b00      	cmp	r3, #0
 8002392:	d111      	bne.n	80023b8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd90      	pop	{r4, r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000003c 	.word	0x2000003c
 80023c8:	24924924 	.word	0x24924924
 80023cc:	00924924 	.word	0x00924924
 80023d0:	12492492 	.word	0x12492492
 80023d4:	00492492 	.word	0x00492492
 80023d8:	00249249 	.word	0x00249249

080023dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x20>
 8002410:	2302      	movs	r3, #2
 8002412:	e0dc      	b.n	80025ce <HAL_ADC_ConfigChannel+0x1da>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b06      	cmp	r3, #6
 8002422:	d81c      	bhi.n	800245e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	3b05      	subs	r3, #5
 8002436:	221f      	movs	r2, #31
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	4019      	ands	r1, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3b05      	subs	r3, #5
 8002450:	fa00 f203 	lsl.w	r2, r0, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	635a      	str	r2, [r3, #52]	; 0x34
 800245c:	e03c      	b.n	80024d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d81c      	bhi.n	80024a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	3b23      	subs	r3, #35	; 0x23
 8002478:	221f      	movs	r2, #31
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	4019      	ands	r1, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3b23      	subs	r3, #35	; 0x23
 8002492:	fa00 f203 	lsl.w	r2, r0, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
 800249e:	e01b      	b.n	80024d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3b41      	subs	r3, #65	; 0x41
 80024b2:	221f      	movs	r2, #31
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4019      	ands	r1, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	3b41      	subs	r3, #65	; 0x41
 80024cc:	fa00 f203 	lsl.w	r2, r0, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b09      	cmp	r3, #9
 80024de:	d91c      	bls.n	800251a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68d9      	ldr	r1, [r3, #12]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	3b1e      	subs	r3, #30
 80024f2:	2207      	movs	r2, #7
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	4019      	ands	r1, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6898      	ldr	r0, [r3, #8]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	3b1e      	subs	r3, #30
 800250c:	fa00 f203 	lsl.w	r2, r0, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	e019      	b.n	800254e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6919      	ldr	r1, [r3, #16]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	2207      	movs	r2, #7
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	4019      	ands	r1, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6898      	ldr	r0, [r3, #8]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	fa00 f203 	lsl.w	r2, r0, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b10      	cmp	r3, #16
 8002554:	d003      	beq.n	800255e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800255a:	2b11      	cmp	r3, #17
 800255c:	d132      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d125      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d126      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002584:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b10      	cmp	r3, #16
 800258c:	d11a      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <HAL_ADC_ConfigChannel+0x1e8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002594:	fba2 2303 	umull	r2, r3, r2, r3
 8002598:	0c9a      	lsrs	r2, r3, #18
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025a4:	e002      	b.n	80025ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f9      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x1b2>
 80025b2:	e007      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	f043 0220 	orr.w	r2, r3, #32
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40012400 	.word	0x40012400
 80025dc:	2000003c 	.word	0x2000003c
 80025e0:	431bde83 	.word	0x431bde83

080025e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d040      	beq.n	8002684 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002612:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <ADC_Enable+0xac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1f      	ldr	r2, [pc, #124]	; (8002694 <ADC_Enable+0xb0>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	0c9b      	lsrs	r3, r3, #18
 800261e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002620:	e002      	b.n	8002628 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3b01      	subs	r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f9      	bne.n	8002622 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800262e:	f7ff fc1b 	bl	8001e68 <HAL_GetTick>
 8002632:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002634:	e01f      	b.n	8002676 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002636:	f7ff fc17 	bl	8001e68 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d918      	bls.n	8002676 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d011      	beq.n	8002676 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	f043 0210 	orr.w	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e007      	b.n	8002686 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d1d8      	bne.n	8002636 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	2000003c 	.word	0x2000003c
 8002694:	431bde83 	.word	0x431bde83

08002698 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d12e      	bne.n	8002710 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0201 	bic.w	r2, r2, #1
 80026c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026c2:	f7ff fbd1 	bl	8001e68 <HAL_GetTick>
 80026c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026c8:	e01b      	b.n	8002702 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026ca:	f7ff fbcd 	bl	8001e68 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d914      	bls.n	8002702 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d10d      	bne.n	8002702 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	f043 0210 	orr.w	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e007      	b.n	8002712 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d0dc      	beq.n	80026ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274e:	4a04      	ldr	r2, [pc, #16]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	60d3      	str	r3, [r2, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <__NVIC_GetPriorityGrouping+0x18>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0307 	and.w	r3, r3, #7
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db0b      	blt.n	80027aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4906      	ldr	r1, [pc, #24]	; (80027b4 <__NVIC_EnableIRQ+0x34>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	fa00 f202 	lsl.w	r2, r0, r2
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	e000e100 	.word	0xe000e100

080027b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	; (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
         );
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff4f 	bl	800271c <__NVIC_SetPriorityGrouping>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002898:	f7ff ff64 	bl	8002764 <__NVIC_GetPriorityGrouping>
 800289c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f7ff ffb2 	bl	800280c <NVIC_EncodePriority>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff81 	bl	80027b8 <__NVIC_SetPriority>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff57 	bl	8002780 <__NVIC_EnableIRQ>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b08b      	sub	sp, #44	; 0x2c
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ee:	e169      	b.n	8002bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028f0:	2201      	movs	r2, #1
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	429a      	cmp	r2, r3
 800290a:	f040 8158 	bne.w	8002bbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a9a      	ldr	r2, [pc, #616]	; (8002b7c <HAL_GPIO_Init+0x2a0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d05e      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002918:	4a98      	ldr	r2, [pc, #608]	; (8002b7c <HAL_GPIO_Init+0x2a0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d875      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800291e:	4a98      	ldr	r2, [pc, #608]	; (8002b80 <HAL_GPIO_Init+0x2a4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d058      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002924:	4a96      	ldr	r2, [pc, #600]	; (8002b80 <HAL_GPIO_Init+0x2a4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d86f      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800292a:	4a96      	ldr	r2, [pc, #600]	; (8002b84 <HAL_GPIO_Init+0x2a8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d052      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002930:	4a94      	ldr	r2, [pc, #592]	; (8002b84 <HAL_GPIO_Init+0x2a8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d869      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002936:	4a94      	ldr	r2, [pc, #592]	; (8002b88 <HAL_GPIO_Init+0x2ac>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d04c      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 800293c:	4a92      	ldr	r2, [pc, #584]	; (8002b88 <HAL_GPIO_Init+0x2ac>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d863      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002942:	4a92      	ldr	r2, [pc, #584]	; (8002b8c <HAL_GPIO_Init+0x2b0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d046      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002948:	4a90      	ldr	r2, [pc, #576]	; (8002b8c <HAL_GPIO_Init+0x2b0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d85d      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800294e:	2b12      	cmp	r3, #18
 8002950:	d82a      	bhi.n	80029a8 <HAL_GPIO_Init+0xcc>
 8002952:	2b12      	cmp	r3, #18
 8002954:	d859      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <HAL_GPIO_Init+0x80>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	080029d7 	.word	0x080029d7
 8002960:	080029b1 	.word	0x080029b1
 8002964:	080029c3 	.word	0x080029c3
 8002968:	08002a05 	.word	0x08002a05
 800296c:	08002a0b 	.word	0x08002a0b
 8002970:	08002a0b 	.word	0x08002a0b
 8002974:	08002a0b 	.word	0x08002a0b
 8002978:	08002a0b 	.word	0x08002a0b
 800297c:	08002a0b 	.word	0x08002a0b
 8002980:	08002a0b 	.word	0x08002a0b
 8002984:	08002a0b 	.word	0x08002a0b
 8002988:	08002a0b 	.word	0x08002a0b
 800298c:	08002a0b 	.word	0x08002a0b
 8002990:	08002a0b 	.word	0x08002a0b
 8002994:	08002a0b 	.word	0x08002a0b
 8002998:	08002a0b 	.word	0x08002a0b
 800299c:	08002a0b 	.word	0x08002a0b
 80029a0:	080029b9 	.word	0x080029b9
 80029a4:	080029cd 	.word	0x080029cd
 80029a8:	4a79      	ldr	r2, [pc, #484]	; (8002b90 <HAL_GPIO_Init+0x2b4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029ae:	e02c      	b.n	8002a0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	623b      	str	r3, [r7, #32]
          break;
 80029b6:	e029      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	3304      	adds	r3, #4
 80029be:	623b      	str	r3, [r7, #32]
          break;
 80029c0:	e024      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	3308      	adds	r3, #8
 80029c8:	623b      	str	r3, [r7, #32]
          break;
 80029ca:	e01f      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	330c      	adds	r3, #12
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	e01a      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029de:	2304      	movs	r3, #4
 80029e0:	623b      	str	r3, [r7, #32]
          break;
 80029e2:	e013      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d105      	bne.n	80029f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029ec:	2308      	movs	r3, #8
 80029ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	611a      	str	r2, [r3, #16]
          break;
 80029f6:	e009      	b.n	8002a0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029f8:	2308      	movs	r3, #8
 80029fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	615a      	str	r2, [r3, #20]
          break;
 8002a02:	e003      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a04:	2300      	movs	r3, #0
 8002a06:	623b      	str	r3, [r7, #32]
          break;
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          break;
 8002a0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2bff      	cmp	r3, #255	; 0xff
 8002a10:	d801      	bhi.n	8002a16 <HAL_GPIO_Init+0x13a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	e001      	b.n	8002a1a <HAL_GPIO_Init+0x13e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	d802      	bhi.n	8002a28 <HAL_GPIO_Init+0x14c>
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	e002      	b.n	8002a2e <HAL_GPIO_Init+0x152>
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	3b08      	subs	r3, #8
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	210f      	movs	r1, #15
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	401a      	ands	r2, r3
 8002a40:	6a39      	ldr	r1, [r7, #32]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80b1 	beq.w	8002bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a5c:	4b4d      	ldr	r3, [pc, #308]	; (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4a4c      	ldr	r2, [pc, #304]	; (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6193      	str	r3, [r2, #24]
 8002a68:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a74:	4a48      	ldr	r2, [pc, #288]	; (8002b98 <HAL_GPIO_Init+0x2bc>)
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a40      	ldr	r2, [pc, #256]	; (8002b9c <HAL_GPIO_Init+0x2c0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d013      	beq.n	8002ac8 <HAL_GPIO_Init+0x1ec>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a3f      	ldr	r2, [pc, #252]	; (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00d      	beq.n	8002ac4 <HAL_GPIO_Init+0x1e8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a3e      	ldr	r2, [pc, #248]	; (8002ba4 <HAL_GPIO_Init+0x2c8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <HAL_GPIO_Init+0x1e4>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a3d      	ldr	r2, [pc, #244]	; (8002ba8 <HAL_GPIO_Init+0x2cc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d101      	bne.n	8002abc <HAL_GPIO_Init+0x1e0>
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e006      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e004      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e002      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002acc:	f002 0203 	and.w	r2, r2, #3
 8002ad0:	0092      	lsls	r2, r2, #2
 8002ad2:	4093      	lsls	r3, r2
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ada:	492f      	ldr	r1, [pc, #188]	; (8002b98 <HAL_GPIO_Init+0x2bc>)
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	492c      	ldr	r1, [pc, #176]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	4928      	ldr	r1, [pc, #160]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b1c:	4b23      	ldr	r3, [pc, #140]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4922      	ldr	r1, [pc, #136]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	491e      	ldr	r1, [pc, #120]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	4918      	ldr	r1, [pc, #96]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	4914      	ldr	r1, [pc, #80]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d021      	beq.n	8002bb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	490e      	ldr	r1, [pc, #56]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60cb      	str	r3, [r1, #12]
 8002b78:	e021      	b.n	8002bbe <HAL_GPIO_Init+0x2e2>
 8002b7a:	bf00      	nop
 8002b7c:	10320000 	.word	0x10320000
 8002b80:	10310000 	.word	0x10310000
 8002b84:	10220000 	.word	0x10220000
 8002b88:	10210000 	.word	0x10210000
 8002b8c:	10120000 	.word	0x10120000
 8002b90:	10110000 	.word	0x10110000
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40010800 	.word	0x40010800
 8002ba0:	40010c00 	.word	0x40010c00
 8002ba4:	40011000 	.word	0x40011000
 8002ba8:	40011400 	.word	0x40011400
 8002bac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	4909      	ldr	r1, [pc, #36]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	fa22 f303 	lsr.w	r3, r2, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f47f ae8e 	bne.w	80028f0 <HAL_GPIO_Init+0x14>
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	372c      	adds	r7, #44	; 0x2c
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	40010400 	.word	0x40010400

08002be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bf4:	787b      	ldrb	r3, [r7, #1]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c00:	e003      	b.n	8002c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c02:	887b      	ldrh	r3, [r7, #2]
 8002c04:	041a      	lsls	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	611a      	str	r2, [r3, #16]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fd fc5f 	bl	80004e4 <HAL_GPIO_EXTI_Callback>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e12b      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd fc06 	bl	8000468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c94:	f000 ffea 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 8002c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a81      	ldr	r2, [pc, #516]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d807      	bhi.n	8002cb4 <HAL_I2C_Init+0x84>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a80      	ldr	r2, [pc, #512]	; (8002ea8 <HAL_I2C_Init+0x278>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e006      	b.n	8002cc2 <HAL_I2C_Init+0x92>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a7d      	ldr	r2, [pc, #500]	; (8002eac <HAL_I2C_Init+0x27c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0e7      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a78      	ldr	r2, [pc, #480]	; (8002eb0 <HAL_I2C_Init+0x280>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0c9b      	lsrs	r3, r3, #18
 8002cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a6a      	ldr	r2, [pc, #424]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d802      	bhi.n	8002d04 <HAL_I2C_Init+0xd4>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3301      	adds	r3, #1
 8002d02:	e009      	b.n	8002d18 <HAL_I2C_Init+0xe8>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	4a69      	ldr	r2, [pc, #420]	; (8002eb4 <HAL_I2C_Init+0x284>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	3301      	adds	r3, #1
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	495c      	ldr	r1, [pc, #368]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002d34:	428b      	cmp	r3, r1
 8002d36:	d819      	bhi.n	8002d6c <HAL_I2C_Init+0x13c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e59      	subs	r1, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d46:	1c59      	adds	r1, r3, #1
 8002d48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_I2C_Init+0x138>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1e59      	subs	r1, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d66:	e051      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	e04f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d111      	bne.n	8002d98 <HAL_I2C_Init+0x168>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e012      	b.n	8002dbe <HAL_I2C_Init+0x18e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	0099      	lsls	r1, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Init+0x196>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e022      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10e      	bne.n	8002dec <HAL_I2C_Init+0x1bc>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e58      	subs	r0, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6859      	ldr	r1, [r3, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	440b      	add	r3, r1
 8002ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dea:	e00f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e58      	subs	r0, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	0099      	lsls	r1, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	6809      	ldr	r1, [r1, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6911      	ldr	r1, [r2, #16]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	000186a0 	.word	0x000186a0
 8002ea8:	001e847f 	.word	0x001e847f
 8002eac:	003d08ff 	.word	0x003d08ff
 8002eb0:	431bde83 	.word	0x431bde83
 8002eb4:	10624dd3 	.word	0x10624dd3

08002eb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	817b      	strh	r3, [r7, #10]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7fe ffcc 	bl	8001e68 <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	f040 80e0 	bne.w	80030a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4970      	ldr	r1, [pc, #448]	; (80030ac <HAL_I2C_Master_Transmit+0x1f4>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f964 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e0d3      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_I2C_Master_Transmit+0x50>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0cc      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d007      	beq.n	8002f2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0201 	orr.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2221      	movs	r2, #33	; 0x21
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2210      	movs	r2, #16
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	893a      	ldrh	r2, [r7, #8]
 8002f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a50      	ldr	r2, [pc, #320]	; (80030b0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f70:	8979      	ldrh	r1, [r7, #10]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	6a3a      	ldr	r2, [r7, #32]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f89c 	bl	80030b4 <I2C_MasterRequestWrite>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e08d      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f9c:	e066      	b.n	800306c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	6a39      	ldr	r1, [r7, #32]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f9de 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d107      	bne.n	8002fc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e06b      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b04      	cmp	r3, #4
 8003006:	d11b      	bne.n	8003040 <HAL_I2C_Master_Transmit+0x188>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d017      	beq.n	8003040 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	6a39      	ldr	r1, [r7, #32]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f9ce 	bl	80033e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00d      	beq.n	800306c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2b04      	cmp	r3, #4
 8003056:	d107      	bne.n	8003068 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003066:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e01a      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	d194      	bne.n	8002f9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	00100002 	.word	0x00100002
 80030b0:	ffff0000 	.word	0xffff0000

080030b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	460b      	mov	r3, r1
 80030c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d006      	beq.n	80030de <I2C_MasterRequestWrite+0x2a>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d003      	beq.n	80030de <I2C_MasterRequestWrite+0x2a>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030dc:	d108      	bne.n	80030f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e00b      	b.n	8003108 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	2b12      	cmp	r3, #18
 80030f6:	d107      	bne.n	8003108 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003106:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f84f 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800312e:	d103      	bne.n	8003138 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e035      	b.n	80031a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003144:	d108      	bne.n	8003158 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003146:	897b      	ldrh	r3, [r7, #10]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003154:	611a      	str	r2, [r3, #16]
 8003156:	e01b      	b.n	8003190 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003158:	897b      	ldrh	r3, [r7, #10]
 800315a:	11db      	asrs	r3, r3, #7
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f003 0306 	and.w	r3, r3, #6
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f063 030f 	orn	r3, r3, #15
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	490e      	ldr	r1, [pc, #56]	; (80031b0 <I2C_MasterRequestWrite+0xfc>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f875 	bl	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e010      	b.n	80031a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003186:	897b      	ldrh	r3, [r7, #10]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4907      	ldr	r1, [pc, #28]	; (80031b4 <I2C_MasterRequestWrite+0x100>)
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f865 	bl	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	00010008 	.word	0x00010008
 80031b4:	00010002 	.word	0x00010002

080031b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c8:	e025      	b.n	8003216 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d021      	beq.n	8003216 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d2:	f7fe fe49 	bl	8001e68 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d302      	bcc.n	80031e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d116      	bne.n	8003216 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f043 0220 	orr.w	r2, r3, #32
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e023      	b.n	800325e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	0c1b      	lsrs	r3, r3, #16
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10d      	bne.n	800323c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	43da      	mvns	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4013      	ands	r3, r2
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	e00c      	b.n	8003256 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	43da      	mvns	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4013      	ands	r3, r2
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf0c      	ite	eq
 800324e:	2301      	moveq	r3, #1
 8003250:	2300      	movne	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	429a      	cmp	r2, r3
 800325a:	d0b6      	beq.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003274:	e051      	b.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003284:	d123      	bne.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003294:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800329e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f043 0204 	orr.w	r2, r3, #4
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e046      	b.n	800335c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d021      	beq.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d6:	f7fe fdc7 	bl	8001e68 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d302      	bcc.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d116      	bne.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f043 0220 	orr.w	r2, r3, #32
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e020      	b.n	800335c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d10c      	bne.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	43da      	mvns	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4013      	ands	r3, r2
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf14      	ite	ne
 8003336:	2301      	movne	r3, #1
 8003338:	2300      	moveq	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	e00b      	b.n	8003356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	43da      	mvns	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4013      	ands	r3, r2
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d18d      	bne.n	8003276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003370:	e02d      	b.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f878 	bl	8003468 <I2C_IsAcknowledgeFailed>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e02d      	b.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d021      	beq.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fe fd6d 	bl	8001e68 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d116      	bne.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f043 0220 	orr.w	r2, r3, #32
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e007      	b.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d1ca      	bne.n	8003372 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033f2:	e02d      	b.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f837 	bl	8003468 <I2C_IsAcknowledgeFailed>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e02d      	b.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d021      	beq.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340c:	f7fe fd2c 	bl	8001e68 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	429a      	cmp	r2, r3
 800341a:	d302      	bcc.n	8003422 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d116      	bne.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e007      	b.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b04      	cmp	r3, #4
 800345c:	d1ca      	bne.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347e:	d11b      	bne.n	80034b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003488:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f043 0204 	orr.w	r2, r3, #4
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e272      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8087 	beq.w	80035f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034e4:	4b92      	ldr	r3, [pc, #584]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d00c      	beq.n	800350a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034f0:	4b8f      	ldr	r3, [pc, #572]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d112      	bne.n	8003522 <HAL_RCC_OscConfig+0x5e>
 80034fc:	4b8c      	ldr	r3, [pc, #560]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d10b      	bne.n	8003522 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350a:	4b89      	ldr	r3, [pc, #548]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d06c      	beq.n	80035f0 <HAL_RCC_OscConfig+0x12c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d168      	bne.n	80035f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e24c      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352a:	d106      	bne.n	800353a <HAL_RCC_OscConfig+0x76>
 800352c:	4b80      	ldr	r3, [pc, #512]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a7f      	ldr	r2, [pc, #508]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	e02e      	b.n	8003598 <HAL_RCC_OscConfig+0xd4>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x98>
 8003542:	4b7b      	ldr	r3, [pc, #492]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a7a      	ldr	r2, [pc, #488]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b78      	ldr	r3, [pc, #480]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a77      	ldr	r2, [pc, #476]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e01d      	b.n	8003598 <HAL_RCC_OscConfig+0xd4>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0xbc>
 8003566:	4b72      	ldr	r3, [pc, #456]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a71      	ldr	r2, [pc, #452]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800356c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b6f      	ldr	r3, [pc, #444]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6e      	ldr	r2, [pc, #440]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0xd4>
 8003580:	4b6b      	ldr	r3, [pc, #428]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a6a      	ldr	r2, [pc, #424]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b68      	ldr	r3, [pc, #416]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a67      	ldr	r2, [pc, #412]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe fc62 	bl	8001e68 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe fc5e 	bl	8001e68 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e200      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	4b5d      	ldr	r3, [pc, #372]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0xe4>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe fc4e 	bl	8001e68 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fc4a 	bl	8001e68 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e1ec      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e2:	4b53      	ldr	r3, [pc, #332]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x10c>
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d063      	beq.n	80036c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035fe:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00b      	beq.n	8003622 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800360a:	4b49      	ldr	r3, [pc, #292]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b08      	cmp	r3, #8
 8003614:	d11c      	bne.n	8003650 <HAL_RCC_OscConfig+0x18c>
 8003616:	4b46      	ldr	r3, [pc, #280]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d116      	bne.n	8003650 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003622:	4b43      	ldr	r3, [pc, #268]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_RCC_OscConfig+0x176>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d001      	beq.n	800363a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e1c0      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363a:	4b3d      	ldr	r3, [pc, #244]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4939      	ldr	r1, [pc, #228]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	e03a      	b.n	80036c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003658:	4b36      	ldr	r3, [pc, #216]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365e:	f7fe fc03 	bl	8001e68 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003666:	f7fe fbff 	bl	8001e68 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e1a1      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003678:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003684:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4927      	ldr	r1, [pc, #156]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 8003694:	4313      	orrs	r3, r2
 8003696:	600b      	str	r3, [r1, #0]
 8003698:	e015      	b.n	80036c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369a:	4b26      	ldr	r3, [pc, #152]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fe fbe2 	bl	8001e68 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a8:	f7fe fbde 	bl	8001e68 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e180      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ba:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d03a      	beq.n	8003748 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d019      	beq.n	800370e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036da:	4b17      	ldr	r3, [pc, #92]	; (8003738 <HAL_RCC_OscConfig+0x274>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e0:	f7fe fbc2 	bl	8001e68 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e8:	f7fe fbbe 	bl	8001e68 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e160      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003706:	2001      	movs	r0, #1
 8003708:	f000 fb08 	bl	8003d1c <RCC_Delay>
 800370c:	e01c      	b.n	8003748 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HAL_RCC_OscConfig+0x274>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003714:	f7fe fba8 	bl	8001e68 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371a:	e00f      	b.n	800373c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371c:	f7fe fba4 	bl	8001e68 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d908      	bls.n	800373c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e146      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000
 8003734:	42420000 	.word	0x42420000
 8003738:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373c:	4b92      	ldr	r3, [pc, #584]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e9      	bne.n	800371c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80a6 	beq.w	80038a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375a:	4b8b      	ldr	r3, [pc, #556]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	4b88      	ldr	r3, [pc, #544]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	4a87      	ldr	r2, [pc, #540]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	61d3      	str	r3, [r2, #28]
 8003772:	4b85      	ldr	r3, [pc, #532]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003782:	4b82      	ldr	r3, [pc, #520]	; (800398c <HAL_RCC_OscConfig+0x4c8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d118      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378e:	4b7f      	ldr	r3, [pc, #508]	; (800398c <HAL_RCC_OscConfig+0x4c8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7e      	ldr	r2, [pc, #504]	; (800398c <HAL_RCC_OscConfig+0x4c8>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379a:	f7fe fb65 	bl	8001e68 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a2:	f7fe fb61 	bl	8001e68 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b64      	cmp	r3, #100	; 0x64
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e103      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	4b75      	ldr	r3, [pc, #468]	; (800398c <HAL_RCC_OscConfig+0x4c8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x312>
 80037c8:	4b6f      	ldr	r3, [pc, #444]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	4a6e      	ldr	r2, [pc, #440]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6213      	str	r3, [r2, #32]
 80037d4:	e02d      	b.n	8003832 <HAL_RCC_OscConfig+0x36e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x334>
 80037de:	4b6a      	ldr	r3, [pc, #424]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	4a69      	ldr	r2, [pc, #420]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	6213      	str	r3, [r2, #32]
 80037ea:	4b67      	ldr	r3, [pc, #412]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	4a66      	ldr	r2, [pc, #408]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	6213      	str	r3, [r2, #32]
 80037f6:	e01c      	b.n	8003832 <HAL_RCC_OscConfig+0x36e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d10c      	bne.n	800381a <HAL_RCC_OscConfig+0x356>
 8003800:	4b61      	ldr	r3, [pc, #388]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4a60      	ldr	r2, [pc, #384]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	6213      	str	r3, [r2, #32]
 800380c:	4b5e      	ldr	r3, [pc, #376]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4a5d      	ldr	r2, [pc, #372]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6213      	str	r3, [r2, #32]
 8003818:	e00b      	b.n	8003832 <HAL_RCC_OscConfig+0x36e>
 800381a:	4b5b      	ldr	r3, [pc, #364]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4a5a      	ldr	r2, [pc, #360]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	6213      	str	r3, [r2, #32]
 8003826:	4b58      	ldr	r3, [pc, #352]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	4a57      	ldr	r2, [pc, #348]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	f023 0304 	bic.w	r3, r3, #4
 8003830:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d015      	beq.n	8003866 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383a:	f7fe fb15 	bl	8001e68 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fe fb11 	bl	8001e68 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e0b1      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003858:	4b4b      	ldr	r3, [pc, #300]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ee      	beq.n	8003842 <HAL_RCC_OscConfig+0x37e>
 8003864:	e014      	b.n	8003890 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003866:	f7fe faff 	bl	8001e68 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fe fafb 	bl	8001e68 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e09b      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003884:	4b40      	ldr	r3, [pc, #256]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1ee      	bne.n	800386e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d105      	bne.n	80038a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003896:	4b3c      	ldr	r3, [pc, #240]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	4a3b      	ldr	r2, [pc, #236]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8087 	beq.w	80039ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ac:	4b36      	ldr	r3, [pc, #216]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d061      	beq.n	800397c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d146      	bne.n	800394e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c0:	4b33      	ldr	r3, [pc, #204]	; (8003990 <HAL_RCC_OscConfig+0x4cc>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c6:	f7fe facf 	bl	8001e68 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fe facb 	bl	8001e68 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e06d      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e0:	4b29      	ldr	r3, [pc, #164]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f4:	d108      	bne.n	8003908 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038f6:	4b24      	ldr	r3, [pc, #144]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	4921      	ldr	r1, [pc, #132]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003908:	4b1f      	ldr	r3, [pc, #124]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a19      	ldr	r1, [r3, #32]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	430b      	orrs	r3, r1
 800391a:	491b      	ldr	r1, [pc, #108]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003920:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <HAL_RCC_OscConfig+0x4cc>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fe fa9f 	bl	8001e68 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392e:	f7fe fa9b 	bl	8001e68 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e03d      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x46a>
 800394c:	e035      	b.n	80039ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <HAL_RCC_OscConfig+0x4cc>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fe fa88 	bl	8001e68 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395c:	f7fe fa84 	bl	8001e68 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e026      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_OscConfig+0x4c4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x498>
 800397a:	e01e      	b.n	80039ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d107      	bne.n	8003994 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e019      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
 8003988:	40021000 	.word	0x40021000
 800398c:	40007000 	.word	0x40007000
 8003990:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_OscConfig+0x500>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d106      	bne.n	80039b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000

080039c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0d0      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b6a      	ldr	r3, [pc, #424]	; (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d910      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b67      	ldr	r3, [pc, #412]	; (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 0207 	bic.w	r2, r3, #7
 80039f2:	4965      	ldr	r1, [pc, #404]	; (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b63      	ldr	r3, [pc, #396]	; (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0b8      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d020      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a24:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4a58      	ldr	r2, [pc, #352]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a3c:	4b53      	ldr	r3, [pc, #332]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	4a52      	ldr	r2, [pc, #328]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a48:	4b50      	ldr	r3, [pc, #320]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	494d      	ldr	r1, [pc, #308]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d040      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d115      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07f      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e073      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a96:	4b3d      	ldr	r3, [pc, #244]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e06b      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa6:	4b39      	ldr	r3, [pc, #228]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f023 0203 	bic.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4936      	ldr	r1, [pc, #216]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab8:	f7fe f9d6 	bl	8001e68 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac0:	f7fe f9d2 	bl	8001e68 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e053      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	4b2d      	ldr	r3, [pc, #180]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 020c 	and.w	r2, r3, #12
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d1eb      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d210      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 0207 	bic.w	r2, r3, #7
 8003afe:	4922      	ldr	r1, [pc, #136]	; (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e032      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4916      	ldr	r1, [pc, #88]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	490e      	ldr	r1, [pc, #56]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b56:	f000 f821 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	490a      	ldr	r1, [pc, #40]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b68:	5ccb      	ldrb	r3, [r1, r3]
 8003b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6e:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <HAL_RCC_ClockConfig+0x1cc>)
 8003b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b72:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <HAL_RCC_ClockConfig+0x1d0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fc fe86 	bl	8000888 <HAL_InitTick>

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40022000 	.word	0x40022000
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	0800855c 	.word	0x0800855c
 8003b94:	2000003c 	.word	0x2000003c
 8003b98:	200000c8 	.word	0x200000c8

08003b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b9c:	b490      	push	{r4, r7}
 8003b9e:	b08a      	sub	sp, #40	; 0x28
 8003ba0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ba2:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xac>)
 8003ba4:	1d3c      	adds	r4, r7, #4
 8003ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bac:	f240 2301 	movw	r3, #513	; 0x201
 8003bb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bc6:	4b21      	ldr	r3, [pc, #132]	; (8003c4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d002      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x40>
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0x46>
 8003bda:	e02b      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bdc:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bde:	623b      	str	r3, [r7, #32]
      break;
 8003be0:	e02b      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	0c9b      	lsrs	r3, r3, #18
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	3328      	adds	r3, #40	; 0x28
 8003bec:	443b      	add	r3, r7
 8003bee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003bf2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d012      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bfe:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	0c5b      	lsrs	r3, r3, #17
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	3328      	adds	r3, #40	; 0x28
 8003c0a:	443b      	add	r3, r7
 8003c0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	4a0e      	ldr	r2, [pc, #56]	; (8003c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c16:	fb03 f202 	mul.w	r2, r3, r2
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
 8003c22:	e004      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	4a0b      	ldr	r2, [pc, #44]	; (8003c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	623b      	str	r3, [r7, #32]
      break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c36:	623b      	str	r3, [r7, #32]
      break;
 8003c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3728      	adds	r7, #40	; 0x28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc90      	pop	{r4, r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	0800493c 	.word	0x0800493c
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	007a1200 	.word	0x007a1200
 8003c54:	003d0900 	.word	0x003d0900

08003c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c5c:	4b02      	ldr	r3, [pc, #8]	; (8003c68 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	2000003c 	.word	0x2000003c

08003c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c70:	f7ff fff2 	bl	8003c58 <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	0a1b      	lsrs	r3, r3, #8
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4903      	ldr	r1, [pc, #12]	; (8003c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	0800856c 	.word	0x0800856c

08003c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c98:	f7ff ffde 	bl	8003c58 <HAL_RCC_GetHCLKFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	0adb      	lsrs	r3, r3, #11
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4903      	ldr	r1, [pc, #12]	; (8003cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	0800856c 	.word	0x0800856c

08003cbc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	220f      	movs	r2, #15
 8003cca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ccc:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <HAL_RCC_GetClockConfig+0x58>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0203 	and.w	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <HAL_RCC_GetClockConfig+0x58>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_GetClockConfig+0x58>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <HAL_RCC_GetClockConfig+0x58>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	08db      	lsrs	r3, r3, #3
 8003cf6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_RCC_GetClockConfig+0x5c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0207 	and.w	r2, r3, #7
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40022000 	.word	0x40022000

08003d1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <RCC_Delay+0x34>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <RCC_Delay+0x38>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	0a5b      	lsrs	r3, r3, #9
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d38:	bf00      	nop
  }
  while (Delay --);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1e5a      	subs	r2, r3, #1
 8003d3e:	60fa      	str	r2, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f9      	bne.n	8003d38 <RCC_Delay+0x1c>
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr
 8003d50:	2000003c 	.word	0x2000003c
 8003d54:	10624dd3 	.word	0x10624dd3

08003d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d07d      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d74:	2300      	movs	r3, #0
 8003d76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d78:	4b4f      	ldr	r3, [pc, #316]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10d      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d84:	4b4c      	ldr	r3, [pc, #304]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	4a4b      	ldr	r2, [pc, #300]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	61d3      	str	r3, [r2, #28]
 8003d90:	4b49      	ldr	r3, [pc, #292]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da0:	4b46      	ldr	r3, [pc, #280]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d118      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dac:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a42      	ldr	r2, [pc, #264]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db8:	f7fe f856 	bl	8001e68 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc0:	f7fe f852 	bl	8001e68 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	; 0x64
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e06d      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd2:	4b3a      	ldr	r3, [pc, #232]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dde:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d02e      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d027      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dfc:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e06:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e0c:	4b2c      	ldr	r3, [pc, #176]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e12:	4a29      	ldr	r2, [pc, #164]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d014      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e22:	f7fe f821 	bl	8001e68 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fe f81d 	bl	8001e68 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e036      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e40:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ee      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4917      	ldr	r1, [pc, #92]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d105      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e64:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	4a13      	ldr	r2, [pc, #76]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e7c:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	490b      	ldr	r1, [pc, #44]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e9a:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	4904      	ldr	r1, [pc, #16]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	42420440 	.word	0x42420440

08003ec4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b08d      	sub	sp, #52	; 0x34
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ecc:	4b58      	ldr	r3, [pc, #352]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003ece:	f107 040c 	add.w	r4, r7, #12
 8003ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ed8:	f240 2301 	movw	r3, #513	; 0x201
 8003edc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	f200 808e 	bhi.w	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d049      	beq.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d079      	beq.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003f0c:	e086      	b.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003f0e:	4b49      	ldr	r3, [pc, #292]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003f14:	4b47      	ldr	r3, [pc, #284]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d07f      	beq.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	0c9b      	lsrs	r3, r3, #18
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	3330      	adds	r3, #48	; 0x30
 8003f2a:	443b      	add	r3, r7
 8003f2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f30:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d017      	beq.n	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f3c:	4b3d      	ldr	r3, [pc, #244]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	0c5b      	lsrs	r3, r3, #17
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	3330      	adds	r3, #48	; 0x30
 8003f48:	443b      	add	r3, r7
 8003f4a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f5a:	4a37      	ldr	r2, [pc, #220]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	fb02 f303 	mul.w	r3, r2, r3
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6a:	e004      	b.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	4a33      	ldr	r2, [pc, #204]	; (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003f70:	fb02 f303 	mul.w	r3, r2, r3
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f76:	4b2f      	ldr	r3, [pc, #188]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f82:	d102      	bne.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f88:	e04a      	b.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	; (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f98:	e042      	b.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003f9a:	4b26      	ldr	r3, [pc, #152]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003faa:	d108      	bne.n	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fbc:	e01f      	b.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc8:	d109      	bne.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003fca:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003fd6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fdc:	e00f      	b.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe8:	d11c      	bne.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003fea:	4b12      	ldr	r3, [pc, #72]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d016      	beq.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003ff6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ffc:	e012      	b.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003ffe:	e011      	b.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004000:	f7ff fe48 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	0b9b      	lsrs	r3, r3, #14
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	3301      	adds	r3, #1
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800401a:	e004      	b.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800401c:	bf00      	nop
 800401e:	e002      	b.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004020:	bf00      	nop
 8004022:	e000      	b.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004024:	bf00      	nop
    }
  }
  return (frequency);
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004028:	4618      	mov	r0, r3
 800402a:	3734      	adds	r7, #52	; 0x34
 800402c:	46bd      	mov	sp, r7
 800402e:	bd90      	pop	{r4, r7, pc}
 8004030:	0800494c 	.word	0x0800494c
 8004034:	40021000 	.word	0x40021000
 8004038:	007a1200 	.word	0x007a1200
 800403c:	003d0900 	.word	0x003d0900
 8004040:	aaaaaaab 	.word	0xaaaaaaab

08004044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e041      	b.n	80040da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fc fd38 	bl	8000ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f000 fa70 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d001      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e03a      	b.n	8004172 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a18      	ldr	r2, [pc, #96]	; (800417c <HAL_TIM_Base_Start_IT+0x98>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00e      	beq.n	800413c <HAL_TIM_Base_Start_IT+0x58>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004126:	d009      	beq.n	800413c <HAL_TIM_Base_Start_IT+0x58>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a14      	ldr	r2, [pc, #80]	; (8004180 <HAL_TIM_Base_Start_IT+0x9c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <HAL_TIM_Base_Start_IT+0x58>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a13      	ldr	r2, [pc, #76]	; (8004184 <HAL_TIM_Base_Start_IT+0xa0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d111      	bne.n	8004160 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b06      	cmp	r3, #6
 800414c:	d010      	beq.n	8004170 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415e:	e007      	b.n	8004170 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800

08004188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d122      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d11b      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0202 	mvn.w	r2, #2
 80041b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f9b1 	bl	8004532 <HAL_TIM_IC_CaptureCallback>
 80041d0:	e005      	b.n	80041de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f9a4 	bl	8004520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f9b3 	bl	8004544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d122      	bne.n	8004238 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d11b      	bne.n	8004238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0204 	mvn.w	r2, #4
 8004208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2202      	movs	r2, #2
 800420e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f987 	bl	8004532 <HAL_TIM_IC_CaptureCallback>
 8004224:	e005      	b.n	8004232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f97a 	bl	8004520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f989 	bl	8004544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b08      	cmp	r3, #8
 8004244:	d122      	bne.n	800428c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b08      	cmp	r3, #8
 8004252:	d11b      	bne.n	800428c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0208 	mvn.w	r2, #8
 800425c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2204      	movs	r2, #4
 8004262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f95d 	bl	8004532 <HAL_TIM_IC_CaptureCallback>
 8004278:	e005      	b.n	8004286 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f950 	bl	8004520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f95f 	bl	8004544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b10      	cmp	r3, #16
 8004298:	d122      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d11b      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0210 	mvn.w	r2, #16
 80042b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2208      	movs	r2, #8
 80042b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f933 	bl	8004532 <HAL_TIM_IC_CaptureCallback>
 80042cc:	e005      	b.n	80042da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f926 	bl	8004520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f935 	bl	8004544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d10e      	bne.n	800430c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d107      	bne.n	800430c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0201 	mvn.w	r2, #1
 8004304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc fa6c 	bl	80007e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004316:	2b80      	cmp	r3, #128	; 0x80
 8004318:	d10e      	bne.n	8004338 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004324:	2b80      	cmp	r3, #128	; 0x80
 8004326:	d107      	bne.n	8004338 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa77 	bl	8004826 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d10e      	bne.n	8004364 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d107      	bne.n	8004364 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800435c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f8f9 	bl	8004556 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b20      	cmp	r3, #32
 8004370:	d10e      	bne.n	8004390 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b20      	cmp	r3, #32
 800437e:	d107      	bne.n	8004390 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0220 	mvn.w	r2, #32
 8004388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fa42 	bl	8004814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_TIM_ConfigClockSource+0x18>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e0b3      	b.n	8004518 <HAL_TIM_ConfigClockSource+0x180>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e8:	d03e      	beq.n	8004468 <HAL_TIM_ConfigClockSource+0xd0>
 80043ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ee:	f200 8087 	bhi.w	8004500 <HAL_TIM_ConfigClockSource+0x168>
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f6:	f000 8085 	beq.w	8004504 <HAL_TIM_ConfigClockSource+0x16c>
 80043fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fe:	d87f      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x168>
 8004400:	2b70      	cmp	r3, #112	; 0x70
 8004402:	d01a      	beq.n	800443a <HAL_TIM_ConfigClockSource+0xa2>
 8004404:	2b70      	cmp	r3, #112	; 0x70
 8004406:	d87b      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x168>
 8004408:	2b60      	cmp	r3, #96	; 0x60
 800440a:	d050      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x116>
 800440c:	2b60      	cmp	r3, #96	; 0x60
 800440e:	d877      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x168>
 8004410:	2b50      	cmp	r3, #80	; 0x50
 8004412:	d03c      	beq.n	800448e <HAL_TIM_ConfigClockSource+0xf6>
 8004414:	2b50      	cmp	r3, #80	; 0x50
 8004416:	d873      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x168>
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	d058      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x136>
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d86f      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x168>
 8004420:	2b30      	cmp	r3, #48	; 0x30
 8004422:	d064      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x156>
 8004424:	2b30      	cmp	r3, #48	; 0x30
 8004426:	d86b      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x168>
 8004428:	2b20      	cmp	r3, #32
 800442a:	d060      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x156>
 800442c:	2b20      	cmp	r3, #32
 800442e:	d867      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x168>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d05c      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x156>
 8004434:	2b10      	cmp	r3, #16
 8004436:	d05a      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004438:	e062      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6899      	ldr	r1, [r3, #8]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f000 f966 	bl	800471a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800445c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	609a      	str	r2, [r3, #8]
      break;
 8004466:	e04e      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6899      	ldr	r1, [r3, #8]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f000 f94f 	bl	800471a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800448a:	609a      	str	r2, [r3, #8]
      break;
 800448c:	e03b      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6859      	ldr	r1, [r3, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	461a      	mov	r2, r3
 800449c:	f000 f8c6 	bl	800462c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2150      	movs	r1, #80	; 0x50
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f91d 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 80044ac:	e02b      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6859      	ldr	r1, [r3, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f000 f8e4 	bl	8004688 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2160      	movs	r1, #96	; 0x60
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f90d 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 80044cc:	e01b      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6859      	ldr	r1, [r3, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	461a      	mov	r2, r3
 80044dc:	f000 f8a6 	bl	800462c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2140      	movs	r1, #64	; 0x40
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f8fd 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 80044ec:	e00b      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4619      	mov	r1, r3
 80044f8:	4610      	mov	r0, r2
 80044fa:	f000 f8f4 	bl	80046e6 <TIM_ITRx_SetConfig>
        break;
 80044fe:	e002      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004500:	bf00      	nop
 8004502:	e000      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004504:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr

08004532 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr

08004544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a29      	ldr	r2, [pc, #164]	; (8004620 <TIM_Base_SetConfig+0xb8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00b      	beq.n	8004598 <TIM_Base_SetConfig+0x30>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004586:	d007      	beq.n	8004598 <TIM_Base_SetConfig+0x30>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a26      	ldr	r2, [pc, #152]	; (8004624 <TIM_Base_SetConfig+0xbc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_Base_SetConfig+0x30>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a25      	ldr	r2, [pc, #148]	; (8004628 <TIM_Base_SetConfig+0xc0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d108      	bne.n	80045aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <TIM_Base_SetConfig+0xb8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_Base_SetConfig+0x62>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b8:	d007      	beq.n	80045ca <TIM_Base_SetConfig+0x62>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a19      	ldr	r2, [pc, #100]	; (8004624 <TIM_Base_SetConfig+0xbc>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_Base_SetConfig+0x62>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a18      	ldr	r2, [pc, #96]	; (8004628 <TIM_Base_SetConfig+0xc0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a07      	ldr	r2, [pc, #28]	; (8004620 <TIM_Base_SetConfig+0xb8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	615a      	str	r2, [r3, #20]
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800

0800462c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f023 0201 	bic.w	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 030a 	bic.w	r3, r3, #10
 8004668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f023 0210 	bic.w	r2, r3, #16
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	031b      	lsls	r3, r3, #12
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	621a      	str	r2, [r3, #32]
}
 80046dc:	bf00      	nop
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	f043 0307 	orr.w	r3, r3, #7
 8004708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	609a      	str	r2, [r3, #8]
}
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800471a:	b480      	push	{r7}
 800471c:	b087      	sub	sp, #28
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004734:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	021a      	lsls	r2, r3, #8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	431a      	orrs	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4313      	orrs	r3, r2
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	609a      	str	r2, [r3, #8]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800476c:	2302      	movs	r3, #2
 800476e:	e046      	b.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a16      	ldr	r2, [pc, #88]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00e      	beq.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047bc:	d009      	beq.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a12      	ldr	r2, [pc, #72]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d004      	beq.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a10      	ldr	r2, [pc, #64]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d10c      	bne.n	80047ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800

08004814 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <__libc_init_array>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	2600      	movs	r6, #0
 800483c:	4d0c      	ldr	r5, [pc, #48]	; (8004870 <__libc_init_array+0x38>)
 800483e:	4c0d      	ldr	r4, [pc, #52]	; (8004874 <__libc_init_array+0x3c>)
 8004840:	1b64      	subs	r4, r4, r5
 8004842:	10a4      	asrs	r4, r4, #2
 8004844:	42a6      	cmp	r6, r4
 8004846:	d109      	bne.n	800485c <__libc_init_array+0x24>
 8004848:	f000 f830 	bl	80048ac <_init>
 800484c:	2600      	movs	r6, #0
 800484e:	4d0a      	ldr	r5, [pc, #40]	; (8004878 <__libc_init_array+0x40>)
 8004850:	4c0a      	ldr	r4, [pc, #40]	; (800487c <__libc_init_array+0x44>)
 8004852:	1b64      	subs	r4, r4, r5
 8004854:	10a4      	asrs	r4, r4, #2
 8004856:	42a6      	cmp	r6, r4
 8004858:	d105      	bne.n	8004866 <__libc_init_array+0x2e>
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004860:	4798      	blx	r3
 8004862:	3601      	adds	r6, #1
 8004864:	e7ee      	b.n	8004844 <__libc_init_array+0xc>
 8004866:	f855 3b04 	ldr.w	r3, [r5], #4
 800486a:	4798      	blx	r3
 800486c:	3601      	adds	r6, #1
 800486e:	e7f2      	b.n	8004856 <__libc_init_array+0x1e>
 8004870:	08008584 	.word	0x08008584
 8004874:	08008584 	.word	0x08008584
 8004878:	08008584 	.word	0x08008584
 800487c:	08008588 	.word	0x08008588

08004880 <memcpy>:
 8004880:	440a      	add	r2, r1
 8004882:	4291      	cmp	r1, r2
 8004884:	f100 33ff 	add.w	r3, r0, #4294967295
 8004888:	d100      	bne.n	800488c <memcpy+0xc>
 800488a:	4770      	bx	lr
 800488c:	b510      	push	{r4, lr}
 800488e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004892:	4291      	cmp	r1, r2
 8004894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004898:	d1f9      	bne.n	800488e <memcpy+0xe>
 800489a:	bd10      	pop	{r4, pc}

0800489c <memset>:
 800489c:	4603      	mov	r3, r0
 800489e:	4402      	add	r2, r0
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d100      	bne.n	80048a6 <memset+0xa>
 80048a4:	4770      	bx	lr
 80048a6:	f803 1b01 	strb.w	r1, [r3], #1
 80048aa:	e7f9      	b.n	80048a0 <memset+0x4>

080048ac <_init>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	bf00      	nop
 80048b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b2:	bc08      	pop	{r3}
 80048b4:	469e      	mov	lr, r3
 80048b6:	4770      	bx	lr

080048b8 <_fini>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	bf00      	nop
 80048bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048be:	bc08      	pop	{r3}
 80048c0:	469e      	mov	lr, r3
 80048c2:	4770      	bx	lr
