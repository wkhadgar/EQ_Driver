
EQ DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003884  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ca0  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007630  08007630  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08007630  08007630  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007630  08007630  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007634  08007634  00017634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08007638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  200000d0  08007708  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  08007708  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f667  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fb  00000000  00000000  0002f760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00031e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00032d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182f5  00000000  00000000  00033bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b69  00000000  00000000  0004beb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3aa  00000000  00000000  0005ea1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eddc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f30  00000000  00000000  000ede18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003978 	.word	0x08003978

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	08003978 	.word	0x08003978

0800014c <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC2_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC2_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC2_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC2_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC2_Init+0x74>)
 800018a:	f001 fb8b 	bl	80018a4 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fafc 	bl	8000790 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000198:	2300      	movs	r3, #0
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC2_Init+0x74>)
 80001aa:	f001 fc53 	bl	8001a54 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 faec 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	200000ec 	.word	0x200000ec
 80001c4:	40012800 	.word	0x40012800

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC2)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0-WKUP     ------> ADC2_IN0
    */
    GPIO_InitStruct.Pin = V_BATTERY_Pin;
 8000218:	2301      	movs	r3, #1
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_BATTERY_GPIO_Port, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f001 fe2e 	bl	8001e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012800 	.word	0x40012800
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0310 	add.w	r3, r7, #16
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000254:	4b4e      	ldr	r3, [pc, #312]	; (8000390 <MX_GPIO_Init+0x150>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a4d      	ldr	r2, [pc, #308]	; (8000390 <MX_GPIO_Init+0x150>)
 800025a:	f043 0310 	orr.w	r3, r3, #16
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b4b      	ldr	r3, [pc, #300]	; (8000390 <MX_GPIO_Init+0x150>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0310 	and.w	r3, r3, #16
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800026c:	4b48      	ldr	r3, [pc, #288]	; (8000390 <MX_GPIO_Init+0x150>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a47      	ldr	r2, [pc, #284]	; (8000390 <MX_GPIO_Init+0x150>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b45      	ldr	r3, [pc, #276]	; (8000390 <MX_GPIO_Init+0x150>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0320 	and.w	r3, r3, #32
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000284:	4b42      	ldr	r3, [pc, #264]	; (8000390 <MX_GPIO_Init+0x150>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a41      	ldr	r2, [pc, #260]	; (8000390 <MX_GPIO_Init+0x150>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b3f      	ldr	r3, [pc, #252]	; (8000390 <MX_GPIO_Init+0x150>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0304 	and.w	r3, r3, #4
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029c:	4b3c      	ldr	r3, [pc, #240]	; (8000390 <MX_GPIO_Init+0x150>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a3b      	ldr	r2, [pc, #236]	; (8000390 <MX_GPIO_Init+0x150>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b39      	ldr	r3, [pc, #228]	; (8000390 <MX_GPIO_Init+0x150>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0308 	and.w	r3, r3, #8
 80002b0:	603b      	str	r3, [r7, #0]
 80002b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M1_STEP_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	21e0      	movs	r1, #224	; 0xe0
 80002b8:	4836      	ldr	r0, [pc, #216]	; (8000394 <MX_GPIO_Init+0x154>)
 80002ba:	f001 ff69 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_STEP_GPIO_Port, M2_STEP_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	2101      	movs	r1, #1
 80002c2:	4835      	ldr	r0, [pc, #212]	; (8000398 <MX_GPIO_Init+0x158>)
 80002c4:	f001 ff64 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80002c8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80002cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ce:	2303      	movs	r3, #3
 80002d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	4619      	mov	r1, r3
 80002d8:	4830      	ldr	r0, [pc, #192]	; (800039c <MX_GPIO_Init+0x15c>)
 80002da:	f001 fdd5 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80002de:	f649 731e 	movw	r3, #40734	; 0x9f1e
 80002e2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e4:	2303      	movs	r3, #3
 80002e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e8:	f107 0310 	add.w	r3, r7, #16
 80002ec:	4619      	mov	r1, r3
 80002ee:	4829      	ldr	r0, [pc, #164]	; (8000394 <MX_GPIO_Init+0x154>)
 80002f0:	f001 fdca 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M1_STEP_Pin|M2_DIR_Pin;
 80002f4:	23e0      	movs	r3, #224	; 0xe0
 80002f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2302      	movs	r3, #2
 8000302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	4619      	mov	r1, r3
 800030a:	4822      	ldr	r0, [pc, #136]	; (8000394 <MX_GPIO_Init+0x154>)
 800030c:	f001 fdbc 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_STEP_Pin;
 8000310:	2301      	movs	r3, #1
 8000312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	2301      	movs	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	2300      	movs	r3, #0
 800031a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031c:	2302      	movs	r3, #2
 800031e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_STEP_GPIO_Port, &GPIO_InitStruct);
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	4619      	mov	r1, r3
 8000326:	481c      	ldr	r0, [pc, #112]	; (8000398 <MX_GPIO_Init+0x158>)
 8000328:	f001 fdae 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800032c:	f648 733e 	movw	r3, #36670	; 0x8f3e
 8000330:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000332:	2303      	movs	r3, #3
 8000334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	4816      	ldr	r0, [pc, #88]	; (8000398 <MX_GPIO_Init+0x158>)
 800033e:	f001 fda3 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SELECT_Pin|ROTARY_TRIG_Pin;
 8000342:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_GPIO_Init+0x160>)
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034c:	2301      	movs	r3, #1
 800034e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	4810      	ldr	r0, [pc, #64]	; (8000398 <MX_GPIO_Init+0x158>)
 8000358:	f001 fd96 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROTARY_CLKW_Pin;
 800035c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROTARY_CLKW_GPIO_Port, &GPIO_InitStruct);
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	4619      	mov	r1, r3
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <MX_GPIO_Init+0x158>)
 8000372:	f001 fd89 	bl	8001e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2100      	movs	r1, #0
 800037a:	2028      	movs	r0, #40	; 0x28
 800037c:	f001 fd59 	bl	8001e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000380:	2028      	movs	r0, #40	; 0x28
 8000382:	f001 fd72 	bl	8001e6a <HAL_NVIC_EnableIRQ>

}
 8000386:	bf00      	nop
 8000388:	3720      	adds	r7, #32
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	40010800 	.word	0x40010800
 8000398:	40010c00 	.word	0x40010c00
 800039c:	40011000 	.word	0x40011000
 80003a0:	10210000 	.word	0x10210000

080003a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003aa:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <MX_I2C1_Init+0x54>)
 80003ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003b0:	4a12      	ldr	r2, [pc, #72]	; (80003fc <MX_I2C1_Init+0x58>)
 80003b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 120;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003bc:	2278      	movs	r2, #120	; 0x78
 80003be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c8:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003dc:	2280      	movs	r2, #128	; 0x80
 80003de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003e2:	f001 fefb 	bl	80021dc <HAL_I2C_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003ec:	f000 f9d0 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	2000011c 	.word	0x2000011c
 80003f8:	40005400 	.word	0x40005400
 80003fc:	00061a80 	.word	0x00061a80

08000400 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b088      	sub	sp, #32
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <HAL_I2C_MspInit+0x70>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d123      	bne.n	8000468 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <HAL_I2C_MspInit+0x74>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a13      	ldr	r2, [pc, #76]	; (8000474 <HAL_I2C_MspInit+0x74>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <HAL_I2C_MspInit+0x74>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0308 	and.w	r3, r3, #8
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000438:	23c0      	movs	r3, #192	; 0xc0
 800043a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800043c:	2312      	movs	r3, #18
 800043e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000440:	2303      	movs	r3, #3
 8000442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	480b      	ldr	r0, [pc, #44]	; (8000478 <HAL_I2C_MspInit+0x78>)
 800044c:	f001 fd1c 	bl	8001e88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <HAL_I2C_MspInit+0x74>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	4a07      	ldr	r2, [pc, #28]	; (8000474 <HAL_I2C_MspInit+0x74>)
 8000456:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800045a:	61d3      	str	r3, [r2, #28]
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <HAL_I2C_MspInit+0x74>)
 800045e:	69db      	ldr	r3, [r3, #28]
 8000460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000468:	bf00      	nop
 800046a:	3720      	adds	r7, #32
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40005400 	.word	0x40005400
 8000474:	40021000 	.word	0x40021000
 8000478:	40010c00 	.word	0x40010c00

0800047c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ROTARY_TRIG_Pin) {
 8000486:	88fb      	ldrh	r3, [r7, #6]
 8000488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800048c:	d10c      	bne.n	80004a8 <HAL_GPIO_EXTI_Callback+0x2c>
    set_flag(rotary_triggered);
 800048e:	2001      	movs	r0, #1
 8000490:	f000 fa92 	bl	80009b8 <set_flag>
    if (ROTARY_CLKW_GPIO_Port->IDR & ROTARY_CLKW_Pin)
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <HAL_GPIO_EXTI_Callback+0x44>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800049c:	2b00      	cmp	r3, #0
 800049e:	d00a      	beq.n	80004b6 <HAL_GPIO_EXTI_Callback+0x3a>
      set_flag(ccw);
 80004a0:	2002      	movs	r0, #2
 80004a2:	f000 fa89 	bl	80009b8 <set_flag>
  } else if (GPIO_Pin == SELECT_Pin) {
    set_flag(selected);
  }
}
 80004a6:	e006      	b.n	80004b6 <HAL_GPIO_EXTI_Callback+0x3a>
  } else if (GPIO_Pin == SELECT_Pin) {
 80004a8:	88fb      	ldrh	r3, [r7, #6]
 80004aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004ae:	d102      	bne.n	80004b6 <HAL_GPIO_EXTI_Callback+0x3a>
    set_flag(selected);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 fa81 	bl	80009b8 <set_flag>
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40010c00 	.word	0x40010c00

080004c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b096      	sub	sp, #88	; 0x58
 80004c8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80004ca:	f001 f995 	bl	80017f8 <HAL_Init>
      brilho_tela,
      tempo_tela,
      save_configs,
      MENU_SIZE //must be the last value
  };
  const char* menu_str[] = {
 80004ce:	4b74      	ldr	r3, [pc, #464]	; (80006a0 <main+0x1dc>)
 80004d0:	f107 0414 	add.w	r4, r7, #20
 80004d4:	461d      	mov	r5, r3
 80004d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      "Modo manual",
      "Contraste",
      "Luz da tela",
      "Salvar configs"
  };
  uint16_t menu_op_value[MENU_SIZE] = {0};
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
  const uint8_t SCREEN_ROWS = 5;
 80004ee:	2305      	movs	r3, #5
 80004f0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

  uint32_t lock_value;

  uint32_t last_move_ticks = 0; // to track time passed in ms with HAL_GetTick()
 80004f4:	2300      	movs	r3, #0
 80004f6:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t ra_last_tick = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint8_t actual_menu_top_row = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t arrow_row = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  uint8_t current_selection;

  bool_t wake_flag     = False;
 8000508:	2300      	movs	r3, #0
 800050a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  bool_t select_pressed = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  bool_t sleeping = False;
 8000514:	2300      	movs	r3, #0
 8000516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  bool_t on_menu = 1;
 800051a:	2301      	movs	r3, #1
 800051c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  bool_t low_battery_flag = False;
 8000520:	2300      	movs	r3, #0
 8000522:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  bool_t toggle_horse = False;
 8000526:	2300      	movs	r3, #0
 8000528:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

  uint8_t frame = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  uint16_t rot_val = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  SH1106_cleanInit();
 8000538:	f000 fbb2 	bl	8000ca0 <SH1106_cleanInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f8ba 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f7ff fe7e 	bl	8000240 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000544:	f7ff ff2e 	bl	80003a4 <MX_I2C1_Init>
  MX_ADC2_Init();
 8000548:	f7ff fe00 	bl	800014c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t data_readed = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  BKP_TypeDef * DRx = BKP;
 8000552:	4b54      	ldr	r3, [pc, #336]	; (80006a4 <main+0x1e0>)
 8000554:	63fb      	str	r3, [r7, #60]	; 0x3c

  //enabling bkp write
  RCC_TypeDef* RCCAPB = RCC;
 8000556:	4b54      	ldr	r3, [pc, #336]	; (80006a8 <main+0x1e4>)
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
  PWR_TypeDef* PWR_C = PWR;
 800055a:	4b54      	ldr	r3, [pc, #336]	; (80006ac <main+0x1e8>)
 800055c:	637b      	str	r3, [r7, #52]	; 0x34
  RCCAPB->APB1ENR |= (0b11 << 27);
 800055e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f043 52c0 	orr.w	r2, r3, #402653184	; 0x18000000
 8000566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000568:	61da      	str	r2, [r3, #28]
  PWR->CR |= (1 << 8);
 800056a:	4b50      	ldr	r3, [pc, #320]	; (80006ac <main+0x1e8>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a4f      	ldr	r2, [pc, #316]	; (80006ac <main+0x1e8>)
 8000570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000574:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

	data_readed = (DRx->DR1 << 16) >> 16;
 8000576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* USER CODE BEGIN 3 */
    rot_val = incremented_var(rot_value, 0);
 800057e:	2100      	movs	r1, #0
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fa49 	bl	8000a18 <incremented_var>
 8000586:	4603      	mov	r3, r0
 8000588:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (toggle_horse) {
 800058c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000590:	2b00      	cmp	r3, #0
 8000592:	d017      	beq.n	80005c4 <main+0x100>
      if (frame > 14)
 8000594:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8000598:	2b0e      	cmp	r3, #14
 800059a:	d902      	bls.n	80005a2 <main+0xde>
        frame = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
      SH1106_drawBitmapFullscreen(horses[frame++]);
 80005a2:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80005a6:	1c5a      	adds	r2, r3, #1
 80005a8:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b40      	ldr	r3, [pc, #256]	; (80006b0 <main+0x1ec>)
 80005b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 f90b 	bl	80017d0 <SH1106_drawBitmapFullscreen>
      SH1106_flush();
 80005ba:	f000 fb3d 	bl	8000c38 <SH1106_flush>
      HAL_Delay(2);
 80005be:	2002      	movs	r0, #2
 80005c0:	f001 f94c 	bl	800185c <HAL_Delay>
    }

    SH1106_clear();
 80005c4:	f000 fb16 	bl	8000bf4 <SH1106_clear>

    if (get_flag(rotary_triggered)) { // rotary encoder triggered
 80005c8:	2001      	movs	r0, #1
 80005ca:	f000 fa15 	bl	80009f8 <get_flag>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d02f      	beq.n	8000634 <main+0x170>
      reset_flag(rotary_triggered);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 f9ff 	bl	80009d8 <reset_flag>
      if ((TICKS_NOW - last_move_ticks) >= ROT_DEBOUNCE_DELAY_MS) {
 80005da:	f001 f935 	bl	8001848 <HAL_GetTick>
 80005de:	4602      	mov	r2, r0
 80005e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	2b09      	cmp	r3, #9
 80005e6:	d94e      	bls.n	8000686 <main+0x1c2>

        set_flag(update_display);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f9e5 	bl	80009b8 <set_flag>
        // digitalToggle(OUT_RA_DIR);

        if (get_flag(ccw)) {
 80005ee:	2002      	movs	r0, #2
 80005f0:	f000 fa02 	bl	80009f8 <get_flag>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d00c      	beq.n	8000614 <main+0x150>
          reset_flag(ccw);
 80005fa:	2002      	movs	r0, #2
 80005fc:	f000 f9ec 	bl	80009d8 <reset_flag>

          if (rot_val > 0) {
 8000600:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000604:	2b00      	cmp	r3, #0
 8000606:	d009      	beq.n	800061c <main+0x158>
            incremented_var(rot_value, -1);
 8000608:	f04f 31ff 	mov.w	r1, #4294967295
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fa03 	bl	8000a18 <incremented_var>
 8000612:	e003      	b.n	800061c <main+0x158>
          }
        } else { // clockwise rotation
          incremented_var(rot_value, 1);
 8000614:	2101      	movs	r1, #1
 8000616:	2000      	movs	r0, #0
 8000618:	f000 f9fe 	bl	8000a18 <incremented_var>
        }
        SH1106_drawCircle(63, 31, rot_val);
 800061c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000620:	b2db      	uxtb	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	211f      	movs	r1, #31
 8000626:	203f      	movs	r0, #63	; 0x3f
 8000628:	f000 fb48 	bl	8000cbc <SH1106_drawCircle>

        last_move_ticks = TICKS_NOW;
 800062c:	f001 f90c 	bl	8001848 <HAL_GetTick>
 8000630:	6578      	str	r0, [r7, #84]	; 0x54
 8000632:	e028      	b.n	8000686 <main+0x1c2>
      }
    }

    else if (get_flag(selected)) { // rotary encoder trigged
 8000634:	2000      	movs	r0, #0
 8000636:	f000 f9df 	bl	80009f8 <get_flag>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d022      	beq.n	8000686 <main+0x1c2>
      reset_flag(selected);
 8000640:	2000      	movs	r0, #0
 8000642:	f000 f9c9 	bl	80009d8 <reset_flag>
      if ((TICKS_NOW - last_move_ticks) >= PUSH_DEBOUNCE_DELAY_MS) {
 8000646:	f001 f8ff 	bl	8001848 <HAL_GetTick>
 800064a:	4602      	mov	r2, r0
 800064c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000654:	d317      	bcc.n	8000686 <main+0x1c2>

        SH1106_setContrast(255);
 8000656:	20ff      	movs	r0, #255	; 0xff
 8000658:	f000 faaa 	bl	8000bb0 <SH1106_setContrast>
        set_flag(update_display);
 800065c:	2003      	movs	r0, #3
 800065e:	f000 f9ab 	bl	80009b8 <set_flag>
        toggle_horse = !toggle_horse;
 8000662:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000666:	2b00      	cmp	r3, #0
 8000668:	bf0c      	ite	eq
 800066a:	2301      	moveq	r3, #1
 800066c:	2300      	movne	r3, #0
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        DRx->DR1 |= 0b1010;
 8000674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	f043 020a 	orr.w	r2, r3, #10
 800067c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067e:	605a      	str	r2, [r3, #4]

        last_move_ticks = TICKS_NOW;
 8000680:	f001 f8e2 	bl	8001848 <HAL_GetTick>
 8000684:	6578      	str	r0, [r7, #84]	; 0x54
      }
    }

    if (get_flag(update_display)) {
 8000686:	2003      	movs	r0, #3
 8000688:	f000 f9b6 	bl	80009f8 <get_flag>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	f43f af71 	beq.w	8000576 <main+0xb2>
      reset_flag(update_display);
 8000694:	2003      	movs	r0, #3
 8000696:	f000 f99f 	bl	80009d8 <reset_flag>
      SH1106_flush();
 800069a:	f000 facd 	bl	8000c38 <SH1106_flush>
	data_readed = (DRx->DR1 << 16) >> 16;
 800069e:	e76a      	b.n	8000576 <main+0xb2>
 80006a0:	080039e8 	.word	0x080039e8
 80006a4:	40006c00 	.word	0x40006c00
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40007000 	.word	0x40007000
 80006b0:	20000000 	.word	0x20000000

080006b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006be:	2228      	movs	r2, #40	; 0x28
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 f950 	bl	8003968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000700:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070a:	4618      	mov	r0, r3
 800070c:	f002 f9b0 	bl	8002a70 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x66>
    Error_Handler();
 8000716:	f000 f83b 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800071a:	230f      	movs	r3, #15
 800071c:	617b      	str	r3, [r7, #20]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2102      	movs	r1, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fc1c 	bl	8002f74 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x92>
    Error_Handler();
 8000742:	f000 f825 	bl	8000790 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000746:	2302      	movs	r3, #2
 8000748:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800074a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800074e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fdd6 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xae>
    Error_Handler();
 800075e:	f000 f817 	bl	8000790 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d101      	bne.n	8000782 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800077e:	f001 f851 	bl	8001824 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40012c00 	.word	0x40012c00

08000790 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <HAL_MspInit+0x6c>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <HAL_MspInit+0x6c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <HAL_MspInit+0x6c>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <HAL_MspInit+0x6c>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <HAL_MspInit+0x6c>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <HAL_MspInit+0x6c>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2005      	movs	r0, #5
 80007d8:	f001 fb2b 	bl	8001e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80007dc:	2005      	movs	r0, #5
 80007de:	f001 fb44 	bl	8001e6a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_MspInit+0x70>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_MspInit+0x70>)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	40010000 	.word	0x40010000

08000810 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000820:	2300      	movs	r3, #0
 8000822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <HAL_InitTick+0xd0>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	4a2d      	ldr	r2, [pc, #180]	; (80008e0 <HAL_InitTick+0xd0>)
 800082c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000830:	6193      	str	r3, [r2, #24]
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <HAL_InitTick+0xd0>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800083e:	f107 020c 	add.w	r2, r7, #12
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f002 fd0d 	bl	8003268 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800084e:	f002 fcf7 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8000852:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000856:	4a23      	ldr	r2, [pc, #140]	; (80008e4 <HAL_InitTick+0xd4>)
 8000858:	fba2 2303 	umull	r2, r3, r2, r3
 800085c:	0c9b      	lsrs	r3, r3, #18
 800085e:	3b01      	subs	r3, #1
 8000860:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <HAL_InitTick+0xd8>)
 8000864:	4a21      	ldr	r2, [pc, #132]	; (80008ec <HAL_InitTick+0xdc>)
 8000866:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <HAL_InitTick+0xd8>)
 800086a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800086e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000870:	4a1d      	ldr	r2, [pc, #116]	; (80008e8 <HAL_InitTick+0xd8>)
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <HAL_InitTick+0xd8>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <HAL_InitTick+0xd8>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <HAL_InitTick+0xd8>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000888:	4817      	ldr	r0, [pc, #92]	; (80008e8 <HAL_InitTick+0xd8>)
 800088a:	f002 fdf1 	bl	8003470 <HAL_TIM_Base_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000898:	2b00      	cmp	r3, #0
 800089a:	d11b      	bne.n	80008d4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800089c:	4812      	ldr	r0, [pc, #72]	; (80008e8 <HAL_InitTick+0xd8>)
 800089e:	f002 fe3f 	bl	8003520 <HAL_TIM_Base_Start_IT>
 80008a2:	4603      	mov	r3, r0
 80008a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d111      	bne.n	80008d4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80008b0:	2019      	movs	r0, #25
 80008b2:	f001 fada 	bl	8001e6a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	d808      	bhi.n	80008ce <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80008bc:	2200      	movs	r2, #0
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	2019      	movs	r0, #25
 80008c2:	f001 fab6 	bl	8001e32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <HAL_InitTick+0xe0>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	e002      	b.n	80008d4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3730      	adds	r7, #48	; 0x30
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000
 80008e4:	431bde83 	.word	0x431bde83
 80008e8:	20000170 	.word	0x20000170
 80008ec:	40012c00 	.word	0x40012c00
 80008f0:	200000c8 	.word	0x200000c8

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80008f8:	e7fe      	b.n	80008f8 <NMI_Handler+0x4>

080008fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <MemManage_Handler+0x4>

08000906 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <UsageFault_Handler+0x4>

08000912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
	...

08000950 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <TIM1_UP_IRQHandler+0x10>)
 8000956:	f002 fe35 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000170 	.word	0x20000170

08000964 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (EXTI->PR & SELECT_Pin) {
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <EXTI15_10_IRQHandler+0x44>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d008      	beq.n	8000986 <EXTI15_10_IRQHandler+0x22>
		/* Clear bit */
		EXTI->PR = SELECT_Pin;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <EXTI15_10_IRQHandler+0x44>)
 8000976:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800097a:	615a      	str	r2, [r3, #20]
		/* Call global function */
		HAL_GPIO_EXTI_IRQHandler(SELECT_Pin);
 800097c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000980:	f001 fc1e 	bl	80021c0 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000984:	e00d      	b.n	80009a2 <EXTI15_10_IRQHandler+0x3e>
	else if (EXTI->PR & ROTARY_TRIG_Pin) {
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <EXTI15_10_IRQHandler+0x44>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	2b00      	cmp	r3, #0
 8000990:	d007      	beq.n	80009a2 <EXTI15_10_IRQHandler+0x3e>
		EXTI->PR = ROTARY_TRIG_Pin;
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <EXTI15_10_IRQHandler+0x44>)
 8000994:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000998:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_IRQHandler(ROTARY_TRIG_Pin);
 800099a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800099e:	f001 fc0f 	bl	80021c0 <HAL_GPIO_EXTI_IRQHandler>
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40010400 	.word	0x40010400

080009ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <set_flag>:
#include "variables.h"

void set_flag(bool_var_t bool_var) {
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	boolVariables[bool_var] = 1;
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <set_flag+0x1c>)
 80009c6:	2101      	movs	r1, #1
 80009c8:	54d1      	strb	r1, [r2, r3]
	return;
 80009ca:	bf00      	nop
}
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	200001b8 	.word	0x200001b8

080009d8 <reset_flag>:

void reset_flag(bool_var_t bool_var) {
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	boolVariables[bool_var] = 0;
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <reset_flag+0x1c>)
 80009e6:	2100      	movs	r1, #0
 80009e8:	54d1      	strb	r1, [r2, r3]
	return;
 80009ea:	bf00      	nop
}
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	200001b8 	.word	0x200001b8

080009f8 <get_flag>:

bool_t get_flag(bool_var_t bool_var) {
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	return boolVariables[bool_var];
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <get_flag+0x1c>)
 8000a06:	5cd3      	ldrb	r3, [r2, r3]
 8000a08:	b2db      	uxtb	r3, r3
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	200001b8 	.word	0x200001b8

08000a18 <incremented_var>:

int incremented_var(int_var_t int_var, int8_t increment) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	460a      	mov	r2, r1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	4613      	mov	r3, r2
 8000a26:	71bb      	strb	r3, [r7, #6]
	return (intVariables[int_var] += increment);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <incremented_var+0x30>)
 8000a2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000a30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	440b      	add	r3, r1
 8000a38:	4903      	ldr	r1, [pc, #12]	; (8000a48 <incremented_var+0x30>)
 8000a3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	200001bc 	.word	0x200001bc

08000a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	; (8000a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	; (8000a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a72:	f7ff ff9b 	bl	80009ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a76:	f002 ff45 	bl	8003904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7a:	f7ff fd23 	bl	80004c4 <main>
  bx lr
 8000a7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8000a88:	08007638 	.word	0x08007638
  ldr r2, =_sbss
 8000a8c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8000a90:	20000648 	.word	0x20000648

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>
	...

08000a98 <SH1106_cmd>:
		{ 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

// Send single byte command to display
// input:
//   cmd - display command
static void SH1106_cmd(uint8_t cmd) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	// Send command to display
	uint8_t command[] = {0x00, cmd};
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	733b      	strb	r3, [r7, #12]
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, command,
 8000aaa:	f107 020c 	add.w	r2, r7, #12
 8000aae:	230a      	movs	r3, #10
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	2178      	movs	r1, #120	; 0x78
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <SH1106_cmd+0x2c>)
 8000ab8:	f001 fcd4 	bl	8002464 <HAL_I2C_Master_Transmit>
			sizeof(command), 10);
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000011c 	.word	0x2000011c

08000ac8 <SH1106_data>:

// Send double byte command to display
// input:
//   data - page buffer data with 0x40 blocks
//   num_bytes - number of bytes to display in the page
static void SH1106_data(uint8_t* data, uint8_t num_bytes) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
	// Send double byte command to display
	HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, data,
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	220a      	movs	r2, #10
 8000ada:	9200      	str	r2, [sp, #0]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	2178      	movs	r1, #120	; 0x78
 8000ae0:	4803      	ldr	r0, [pc, #12]	; (8000af0 <SH1106_data+0x28>)
 8000ae2:	f001 fcbf 	bl	8002464 <HAL_I2C_Master_Transmit>
			num_bytes, 10);
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000011c 	.word	0x2000011c

08000af4 <SH1106_Init>:

// Initialize SDA peripheral and SH1106 display
// note: SDA peripheral must be initialized before
void SH1106_Init(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	// Initial display configuration
	HAL_Delay(100);
 8000af8:	2064      	movs	r0, #100	; 0x64
 8000afa:	f000 feaf 	bl	800185c <HAL_Delay>

	SH1106_cmd(SH1106_CMD_DISP_OFF);
 8000afe:	20ae      	movs	r0, #174	; 0xae
 8000b00:	f7ff ffca 	bl	8000a98 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_COL_LOW);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f7ff ffc7 	bl	8000a98 <SH1106_cmd>
	SH1106_cmd(SH1106_CMD_COL_HIGH);
 8000b0a:	2010      	movs	r0, #16
 8000b0c:	f7ff ffc4 	bl	8000a98 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_STARTLINE);
 8000b10:	2040      	movs	r0, #64	; 0x40
 8000b12:	f7ff ffc1 	bl	8000a98 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_PAGE_ADDR);
 8000b16:	20b0      	movs	r0, #176	; 0xb0
 8000b18:	f7ff ffbe 	bl	8000a98 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_CONTRAST);
 8000b1c:	2081      	movs	r0, #129	; 0x81
 8000b1e:	f7ff ffbb 	bl	8000a98 <SH1106_cmd>
	SH1106_cmd(0x00); // 0x00...0xff
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ffb8 	bl	8000a98 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SEG_NORM + 1);
 8000b28:	20a1      	movs	r0, #161	; 0xa1
 8000b2a:	f7ff ffb5 	bl	8000a98 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_EDOFF); // Display follows RAM content
 8000b2e:	20a4      	movs	r0, #164	; 0xa4
 8000b30:	f7ff ffb2 	bl	8000a98 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_INV_OFF); // Normal display mode
 8000b34:	20a6      	movs	r0, #166	; 0xa6
 8000b36:	f7ff ffaf 	bl	8000a98 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SETMUX);
 8000b3a:	20a8      	movs	r0, #168	; 0xa8
 8000b3c:	f7ff ffac 	bl	8000a98 <SH1106_cmd>
	SH1106_cmd(0x3F); // 63 -> 64mux
 8000b40:	203f      	movs	r0, #63	; 0x3f
 8000b42:	f7ff ffa9 	bl	8000a98 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_DC_DC_SET);
 8000b46:	20ad      	movs	r0, #173	; 0xad
 8000b48:	f7ff ffa6 	bl	8000a98 <SH1106_cmd>
	SH1106_cmd(0x8B); // on
 8000b4c:	208b      	movs	r0, #139	; 0x8b
 8000b4e:	f7ff ffa3 	bl	8000a98 <SH1106_cmd>
	SH1106_cmd(0x32); // 8v
 8000b52:	2032      	movs	r0, #50	; 0x32
 8000b54:	f7ff ffa0 	bl	8000a98 <SH1106_cmd>


	SH1106_cmd(SH1106_CMD_COM_INV);
 8000b58:	20c8      	movs	r0, #200	; 0xc8
 8000b5a:	f7ff ff9d 	bl	8000a98 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SETOFFS);
 8000b5e:	20d3      	movs	r0, #211	; 0xd3
 8000b60:	f7ff ff9a 	bl	8000a98 <SH1106_cmd>
	SH1106_cmd(0x00); // 0px
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff ff97 	bl	8000a98 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_CLOCKDIV);
 8000b6a:	20d5      	movs	r0, #213	; 0xd5
 8000b6c:	f7ff ff94 	bl	8000a98 <SH1106_cmd>
	SH1106_cmd(0xF0); // ~100Hz
 8000b70:	20f0      	movs	r0, #240	; 0xf0
 8000b72:	f7ff ff91 	bl	8000a98 <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SET_CHARGE);
 8000b76:	20d9      	movs	r0, #217	; 0xd9
 8000b78:	f7ff ff8e 	bl	8000a98 <SH1106_cmd>
	SH1106_cmd(0x2A); //4MSb are discharge ticks and 4LSb are pre charge ticks
 8000b7c:	202a      	movs	r0, #42	; 0x2a
 8000b7e:	f7ff ff8b 	bl	8000a98 <SH1106_cmd>
	// Set COM pins hardware configuration
	// bit[4]: reset - sequential COM pin configuration
	//         set   - alternative COM pin configuration (reset value)
	// bit[5]: reset - disable COM left/right remap (reset value)
	//         set   - enable COM left/right remap
	SH1106_cmd(SH1106_CMD_COM_HW);
 8000b82:	20da      	movs	r0, #218	; 0xda
 8000b84:	f7ff ff88 	bl	8000a98 <SH1106_cmd>
	SH1106_cmd(0x12);
 8000b88:	2012      	movs	r0, #18
 8000b8a:	f7ff ff85 	bl	8000a98 <SH1106_cmd>

	SH1106_cmd(0xDB);
 8000b8e:	20db      	movs	r0, #219	; 0xdb
 8000b90:	f7ff ff82 	bl	8000a98 <SH1106_cmd>
	SH1106_cmd(0x40);
 8000b94:	2040      	movs	r0, #64	; 0x40
 8000b96:	f7ff ff7f 	bl	8000a98 <SH1106_cmd>

	HAL_Delay(100);
 8000b9a:	2064      	movs	r0, #100	; 0x64
 8000b9c:	f000 fe5e 	bl	800185c <HAL_Delay>

	SH1106_cmd(SH1106_CMD_DISP_ON); // Display enabled
 8000ba0:	20af      	movs	r0, #175	; 0xaf
 8000ba2:	f7ff ff79 	bl	8000a98 <SH1106_cmd>

	HAL_Delay(100);
 8000ba6:	2064      	movs	r0, #100	; 0x64
 8000ba8:	f000 fe58 	bl	800185c <HAL_Delay>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <SH1106_setContrast>:

// set display contrast
// input:
//   contrast - new contrast value (0x00..0xff)
void SH1106_setContrast(uint8_t contrast) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	SH1106_cmd(SH1106_CMD_CONTRAST);
 8000bba:	2081      	movs	r0, #129	; 0x81
 8000bbc:	f7ff ff6c 	bl	8000a98 <SH1106_cmd>
	SH1106_cmd(contrast);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff68 	bl	8000a98 <SH1106_cmd>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <SH1106_setAllPixelsOn>:
// set entire LCD pixels on or off
// input:
//   eon_state - new pixels state (one of SH1106_ENTIRE_PIXELS_XXX values)
// note: SH1106_ENTIRE_PIXELS_ON means what all pixels on display will be on
//       without regard of display memory contents
void SH1106_setAllPixelsOn(uint8_t eon_state) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	SH1106_cmd(eon_state ? SH1106_CMD_EDON : SH1106_CMD_EDOFF);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SH1106_setAllPixelsOn+0x14>
 8000be0:	23a5      	movs	r3, #165	; 0xa5
 8000be2:	e000      	b.n	8000be6 <SH1106_setAllPixelsOn+0x16>
 8000be4:	23a4      	movs	r3, #164	; 0xa4
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff56 	bl	8000a98 <SH1106_cmd>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <SH1106_clear>:
	// Store orientation
	scr_orientation = orientation;
}

// clear vRAM buffer
void SH1106_clear(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
	uint8_t page;
	static uint8_t null_buff[SCR_W] = {0x00};
	for (page = 0; page < 8; page++)	{
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	e00e      	b.n	8000c1e <SH1106_clear+0x2a>
		memcpy(vRAM + (page << 7), null_buff, SCR_W);
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	01db      	lsls	r3, r3, #7
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <SH1106_clear+0x3c>)
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SH1106_clear+0x40>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	4611      	mov	r1, r2
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	461a      	mov	r2, r3
 8000c14:	f002 fe9a 	bl	800394c <memcpy>
	for (page = 0; page < 8; page++)	{
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b07      	cmp	r3, #7
 8000c22:	d9ed      	bls.n	8000c00 <SH1106_clear+0xc>
	}
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001c4 	.word	0x200001c4
 8000c34:	200005c4 	.word	0x200005c4

08000c38 <SH1106_flush>:

// Send vRAM buffer into display
void SH1106_flush(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	uint8_t page;
	static uint8_t screen_buffer[SCR_W + 1] = {0x40};
	for (page = 0; page < 8; page++) {
 8000c3e:	2300      	movs	r3, #0
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	e01e      	b.n	8000c82 <SH1106_flush+0x4a>

		uint8_t* page_content = vRAM + (page << 7);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	01db      	lsls	r3, r3, #7
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <SH1106_flush+0x5c>)
 8000c4c:	4413      	add	r3, r2
 8000c4e:	603b      	str	r3, [r7, #0]
		memcpy(screen_buffer + 1, page_content, SCR_W);
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <SH1106_flush+0x60>)
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	6839      	ldr	r1, [r7, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 fe78 	bl	800394c <memcpy>

		SH1106_cmd(SH1106_CMD_PAGE_ADDR + page);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	3b50      	subs	r3, #80	; 0x50
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff18 	bl	8000a98 <SH1106_cmd>
		SH1106_cmd(SH1106_CMD_COL_LOW);
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f7ff ff15 	bl	8000a98 <SH1106_cmd>
		SH1106_cmd(SH1106_CMD_COL_HIGH);
 8000c6e:	2010      	movs	r0, #16
 8000c70:	f7ff ff12 	bl	8000a98 <SH1106_cmd>

		SH1106_data(screen_buffer, sizeof(screen_buffer));
 8000c74:	2181      	movs	r1, #129	; 0x81
 8000c76:	4809      	ldr	r0, [pc, #36]	; (8000c9c <SH1106_flush+0x64>)
 8000c78:	f7ff ff26 	bl	8000ac8 <SH1106_data>
	for (page = 0; page < 8; page++) {
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	71fb      	strb	r3, [r7, #7]
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b07      	cmp	r3, #7
 8000c86:	d9dd      	bls.n	8000c44 <SH1106_flush+0xc>
	}
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200001c4 	.word	0x200001c4
 8000c98:	20000045 	.word	0x20000045
 8000c9c:	20000044 	.word	0x20000044

08000ca0 <SH1106_cleanInit>:
		memcpy(vRAM + (page << 7), fill_buff, SCR_W);
	}
}

//init routine grouped in one function
void SH1106_cleanInit(void)	{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	SH1106_Init();
 8000ca4:	f7ff ff26 	bl	8000af4 <SH1106_Init>
	SH1106_setAllPixelsOn(0);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff ff91 	bl	8000bd0 <SH1106_setAllPixelsOn>
	SH1106_clear();
 8000cae:	f7ff ffa1 	bl	8000bf4 <SH1106_clear>
	SH1106_flush();
 8000cb2:	f7ff ffc1 	bl	8000c38 <SH1106_flush>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <SH1106_drawCircle>:

// Draw circle
// input:
//   x_,x_ - circle center coordinates
//   radius - circle radius
void SH1106_drawCircle(int16_t x_, int16_t y_, uint8_t radius) {
 8000cbc:	b4b0      	push	{r4, r5, r7}
 8000cbe:	b091      	sub	sp, #68	; 0x44
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	80bb      	strh	r3, [r7, #4]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	70fb      	strb	r3, [r7, #3]
	int16_t err = 1 - radius;
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	f1c3 0301 	rsb	r3, r3, #1
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	int16_t dx = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	87bb      	strh	r3, [r7, #60]	; 0x3c
	int16_t dy = -2 * radius;
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	03d2      	lsls	r2, r2, #15
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	877b      	strh	r3, [r7, #58]	; 0x3a
	int16_t x = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	873b      	strh	r3, [r7, #56]	; 0x38
	int16_t y = radius;
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	86fb      	strh	r3, [r7, #54]	; 0x36
	// Screen width and height for less calculations
	int16_t sh = scr_height - 1;
 8000cf6:	4b8c      	ldr	r3, [pc, #560]	; (8000f28 <SH1106_drawCircle+0x26c>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	86bb      	strh	r3, [r7, #52]	; 0x34
	int16_t sw = scr_width - 1;
 8000d00:	4b8a      	ldr	r3, [pc, #552]	; (8000f2c <SH1106_drawCircle+0x270>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	867b      	strh	r3, [r7, #50]	; 0x32

	while (x < y) {
 8000d0a:	e3cc      	b.n	80014a6 <SH1106_drawCircle+0x7ea>
		if (err >= 0) {
 8000d0c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0e      	blt.n	8000d32 <SH1106_drawCircle+0x76>
			dy += 2;
 8000d14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d16:	3302      	adds	r3, #2
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	877b      	strh	r3, [r7, #58]	; 0x3a
			err += dy;
 8000d1c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000d1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d20:	4413      	add	r3, r2
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	87fb      	strh	r3, [r7, #62]	; 0x3e
			y--;
 8000d26:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		dx += 2;
 8000d32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d34:	3302      	adds	r3, #2
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	87bb      	strh	r3, [r7, #60]	; 0x3c
		err += dx + 1;
 8000d3a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000d3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000d3e:	4413      	add	r3, r2
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	3301      	adds	r3, #1
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	87fb      	strh	r3, [r7, #62]	; 0x3e
		x++;
 8000d48:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	873b      	strh	r3, [r7, #56]	; 0x38

		// Draw eight pixels of each octant
		if (x_ + x < sw) {
 8000d54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d58:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000d5c:	441a      	add	r2, r3
 8000d5e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8000d62:	429a      	cmp	r2, r3
 8000d64:	f280 80eb 	bge.w	8000f3e <SH1106_drawCircle+0x282>
			if (y_ + y < sh)
 8000d68:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d6c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000d70:	441a      	add	r2, r3
 8000d72:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000d76:	429a      	cmp	r2, r3
 8000d78:	da67      	bge.n	8000e4a <SH1106_drawCircle+0x18e>
				SH1106_pixel(x_ + x, y_ + y, SH1106_PixelMode);
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	4413      	add	r3, r2
 8000d84:	b2d9      	uxtb	r1, r3
 8000d86:	88bb      	ldrh	r3, [r7, #4]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4413      	add	r3, r2
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b67      	ldr	r3, [pc, #412]	; (8000f30 <SH1106_drawCircle+0x274>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	f887 1031 	strb.w	r1, [r7, #49]	; 0x31
 8000d9a:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8000d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (scr_orientation == SH1106_ORIENT_CW
 8000da2:	4b64      	ldr	r3, [pc, #400]	; (8000f34 <SH1106_drawCircle+0x278>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d003      	beq.n	8000db2 <SH1106_drawCircle+0xf6>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8000daa:	4b62      	ldr	r3, [pc, #392]	; (8000f34 <SH1106_drawCircle+0x278>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d10d      	bne.n	8000dce <SH1106_drawCircle+0x112>
		offset = ((x >> 3) << 7) + y;
 8000db2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000db6:	08db      	lsrs	r3, r3, #3
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	01da      	lsls	r2, r3, #7
 8000dbc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000dc0:	4413      	add	r3, r2
 8000dc2:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8000dc4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000dc8:	f003 0507 	and.w	r5, r3, #7
 8000dcc:	e00c      	b.n	8000de8 <SH1106_drawCircle+0x12c>
		offset = ((y >> 3) << 7) + x;
 8000dce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000dd2:	08db      	lsrs	r3, r3, #3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	01da      	lsls	r2, r3, #7
 8000dd8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000ddc:	4413      	add	r3, r2
 8000dde:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8000de0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000de4:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8000de8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8000dec:	d82c      	bhi.n	8000e48 <SH1106_drawCircle+0x18c>
	switch (Mode) {
 8000dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d002      	beq.n	8000dfc <SH1106_drawCircle+0x140>
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d00e      	beq.n	8000e18 <SH1106_drawCircle+0x15c>
 8000dfa:	e019      	b.n	8000e30 <SH1106_drawCircle+0x174>
		vRAM[offset] &= ~(1 << bpos);
 8000dfc:	4b4e      	ldr	r3, [pc, #312]	; (8000f38 <SH1106_drawCircle+0x27c>)
 8000dfe:	5d1b      	ldrb	r3, [r3, r4]
 8000e00:	b25a      	sxtb	r2, r3
 8000e02:	2301      	movs	r3, #1
 8000e04:	40ab      	lsls	r3, r5
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b49      	ldr	r3, [pc, #292]	; (8000f38 <SH1106_drawCircle+0x27c>)
 8000e14:	551a      	strb	r2, [r3, r4]
		break;
 8000e16:	e018      	b.n	8000e4a <SH1106_drawCircle+0x18e>
		vRAM[offset] ^= (1 << bpos);
 8000e18:	4b47      	ldr	r3, [pc, #284]	; (8000f38 <SH1106_drawCircle+0x27c>)
 8000e1a:	5d1b      	ldrb	r3, [r3, r4]
 8000e1c:	b25a      	sxtb	r2, r3
 8000e1e:	2301      	movs	r3, #1
 8000e20:	40ab      	lsls	r3, r5
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	4053      	eors	r3, r2
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <SH1106_drawCircle+0x27c>)
 8000e2c:	551a      	strb	r2, [r3, r4]
		break;
 8000e2e:	e00c      	b.n	8000e4a <SH1106_drawCircle+0x18e>
		vRAM[offset] |= (1 << bpos);
 8000e30:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <SH1106_drawCircle+0x27c>)
 8000e32:	5d1b      	ldrb	r3, [r3, r4]
 8000e34:	b25a      	sxtb	r2, r3
 8000e36:	2301      	movs	r3, #1
 8000e38:	40ab      	lsls	r3, r5
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b3d      	ldr	r3, [pc, #244]	; (8000f38 <SH1106_drawCircle+0x27c>)
 8000e44:	551a      	strb	r2, [r3, r4]
		break;
 8000e46:	e000      	b.n	8000e4a <SH1106_drawCircle+0x18e>
		return;
 8000e48:	bf00      	nop
			if (y_ - y > -1)
 8000e4a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e4e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db72      	blt.n	8000f3e <SH1106_drawCircle+0x282>
				SH1106_pixel(x_ + x, y_ - y, SH1106_PixelMode);
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b2d9      	uxtb	r1, r3
 8000e64:	88bb      	ldrh	r3, [r7, #4]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <SH1106_drawCircle+0x274>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	f887 102e 	strb.w	r1, [r7, #46]	; 0x2e
 8000e78:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8000e7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	if (scr_orientation == SH1106_ORIENT_CW
 8000e80:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <SH1106_drawCircle+0x278>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d003      	beq.n	8000e90 <SH1106_drawCircle+0x1d4>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <SH1106_drawCircle+0x278>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d10d      	bne.n	8000eac <SH1106_drawCircle+0x1f0>
		offset = ((x >> 3) << 7) + y;
 8000e90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e94:	08db      	lsrs	r3, r3, #3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	01da      	lsls	r2, r3, #7
 8000e9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e9e:	4413      	add	r3, r2
 8000ea0:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8000ea2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ea6:	f003 0507 	and.w	r5, r3, #7
 8000eaa:	e00c      	b.n	8000ec6 <SH1106_drawCircle+0x20a>
		offset = ((y >> 3) << 7) + x;
 8000eac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000eb0:	08db      	lsrs	r3, r3, #3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	01da      	lsls	r2, r3, #7
 8000eb6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000eba:	4413      	add	r3, r2
 8000ebc:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8000ebe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ec2:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8000ec6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8000eca:	d837      	bhi.n	8000f3c <SH1106_drawCircle+0x280>
	switch (Mode) {
 8000ecc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d002      	beq.n	8000eda <SH1106_drawCircle+0x21e>
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d00e      	beq.n	8000ef6 <SH1106_drawCircle+0x23a>
 8000ed8:	e019      	b.n	8000f0e <SH1106_drawCircle+0x252>
		vRAM[offset] &= ~(1 << bpos);
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <SH1106_drawCircle+0x27c>)
 8000edc:	5d1b      	ldrb	r3, [r3, r4]
 8000ede:	b25a      	sxtb	r2, r3
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	40ab      	lsls	r3, r5
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	4013      	ands	r3, r2
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <SH1106_drawCircle+0x27c>)
 8000ef2:	551a      	strb	r2, [r3, r4]
		break;
 8000ef4:	e023      	b.n	8000f3e <SH1106_drawCircle+0x282>
		vRAM[offset] ^= (1 << bpos);
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <SH1106_drawCircle+0x27c>)
 8000ef8:	5d1b      	ldrb	r3, [r3, r4]
 8000efa:	b25a      	sxtb	r2, r3
 8000efc:	2301      	movs	r3, #1
 8000efe:	40ab      	lsls	r3, r5
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	4053      	eors	r3, r2
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <SH1106_drawCircle+0x27c>)
 8000f0a:	551a      	strb	r2, [r3, r4]
		break;
 8000f0c:	e017      	b.n	8000f3e <SH1106_drawCircle+0x282>
		vRAM[offset] |= (1 << bpos);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <SH1106_drawCircle+0x27c>)
 8000f10:	5d1b      	ldrb	r3, [r3, r4]
 8000f12:	b25a      	sxtb	r2, r3
 8000f14:	2301      	movs	r3, #1
 8000f16:	40ab      	lsls	r3, r5
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <SH1106_drawCircle+0x27c>)
 8000f22:	551a      	strb	r2, [r3, r4]
		break;
 8000f24:	e00b      	b.n	8000f3e <SH1106_drawCircle+0x282>
 8000f26:	bf00      	nop
 8000f28:	20000042 	.word	0x20000042
 8000f2c:	20000040 	.word	0x20000040
 8000f30:	200001c0 	.word	0x200001c0
 8000f34:	200001c1 	.word	0x200001c1
 8000f38:	200001c4 	.word	0x200001c4
		return;
 8000f3c:	bf00      	nop
		}
		if (x_ - x > -1) {
 8000f3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f42:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f2c0 80e0 	blt.w	800110e <SH1106_drawCircle+0x452>
			if (y_ + y < sh)
 8000f4e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f52:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000f56:	441a      	add	r2, r3
 8000f58:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	da67      	bge.n	8001030 <SH1106_drawCircle+0x374>
				SH1106_pixel(x_ - x, y_ + y, SH1106_PixelMode);
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	b2d9      	uxtb	r1, r3
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4ba2      	ldr	r3, [pc, #648]	; (8001204 <SH1106_drawCircle+0x548>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
 8000f80:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
 8000f84:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	if (scr_orientation == SH1106_ORIENT_CW
 8000f88:	4b9f      	ldr	r3, [pc, #636]	; (8001208 <SH1106_drawCircle+0x54c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d003      	beq.n	8000f98 <SH1106_drawCircle+0x2dc>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8000f90:	4b9d      	ldr	r3, [pc, #628]	; (8001208 <SH1106_drawCircle+0x54c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d10d      	bne.n	8000fb4 <SH1106_drawCircle+0x2f8>
		offset = ((x >> 3) << 7) + y;
 8000f98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f9c:	08db      	lsrs	r3, r3, #3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	01da      	lsls	r2, r3, #7
 8000fa2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fa6:	4413      	add	r3, r2
 8000fa8:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8000faa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fae:	f003 0507 	and.w	r5, r3, #7
 8000fb2:	e00c      	b.n	8000fce <SH1106_drawCircle+0x312>
		offset = ((y >> 3) << 7) + x;
 8000fb4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fb8:	08db      	lsrs	r3, r3, #3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	01da      	lsls	r2, r3, #7
 8000fbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fc2:	4413      	add	r3, r2
 8000fc4:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8000fc6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fca:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8000fce:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8000fd2:	d82c      	bhi.n	800102e <SH1106_drawCircle+0x372>
	switch (Mode) {
 8000fd4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d002      	beq.n	8000fe2 <SH1106_drawCircle+0x326>
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d00e      	beq.n	8000ffe <SH1106_drawCircle+0x342>
 8000fe0:	e019      	b.n	8001016 <SH1106_drawCircle+0x35a>
		vRAM[offset] &= ~(1 << bpos);
 8000fe2:	4b8a      	ldr	r3, [pc, #552]	; (800120c <SH1106_drawCircle+0x550>)
 8000fe4:	5d1b      	ldrb	r3, [r3, r4]
 8000fe6:	b25a      	sxtb	r2, r3
 8000fe8:	2301      	movs	r3, #1
 8000fea:	40ab      	lsls	r3, r5
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b84      	ldr	r3, [pc, #528]	; (800120c <SH1106_drawCircle+0x550>)
 8000ffa:	551a      	strb	r2, [r3, r4]
		break;
 8000ffc:	e018      	b.n	8001030 <SH1106_drawCircle+0x374>
		vRAM[offset] ^= (1 << bpos);
 8000ffe:	4b83      	ldr	r3, [pc, #524]	; (800120c <SH1106_drawCircle+0x550>)
 8001000:	5d1b      	ldrb	r3, [r3, r4]
 8001002:	b25a      	sxtb	r2, r3
 8001004:	2301      	movs	r3, #1
 8001006:	40ab      	lsls	r3, r5
 8001008:	b25b      	sxtb	r3, r3
 800100a:	4053      	eors	r3, r2
 800100c:	b25b      	sxtb	r3, r3
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b7e      	ldr	r3, [pc, #504]	; (800120c <SH1106_drawCircle+0x550>)
 8001012:	551a      	strb	r2, [r3, r4]
		break;
 8001014:	e00c      	b.n	8001030 <SH1106_drawCircle+0x374>
		vRAM[offset] |= (1 << bpos);
 8001016:	4b7d      	ldr	r3, [pc, #500]	; (800120c <SH1106_drawCircle+0x550>)
 8001018:	5d1b      	ldrb	r3, [r3, r4]
 800101a:	b25a      	sxtb	r2, r3
 800101c:	2301      	movs	r3, #1
 800101e:	40ab      	lsls	r3, r5
 8001020:	b25b      	sxtb	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b25b      	sxtb	r3, r3
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b78      	ldr	r3, [pc, #480]	; (800120c <SH1106_drawCircle+0x550>)
 800102a:	551a      	strb	r2, [r3, r4]
		break;
 800102c:	e000      	b.n	8001030 <SH1106_drawCircle+0x374>
		return;
 800102e:	bf00      	nop
			if (y_ - y > -1)
 8001030:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001034:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	db67      	blt.n	800110e <SH1106_drawCircle+0x452>
				SH1106_pixel(x_ - x, y_ - y, SH1106_PixelMode);
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001044:	b2db      	uxtb	r3, r3
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	b2d9      	uxtb	r1, r3
 800104a:	88bb      	ldrh	r3, [r7, #4]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001050:	b2db      	uxtb	r3, r3
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b6b      	ldr	r3, [pc, #428]	; (8001204 <SH1106_drawCircle+0x548>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
 800105e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (scr_orientation == SH1106_ORIENT_CW
 8001066:	4b68      	ldr	r3, [pc, #416]	; (8001208 <SH1106_drawCircle+0x54c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d003      	beq.n	8001076 <SH1106_drawCircle+0x3ba>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 800106e:	4b66      	ldr	r3, [pc, #408]	; (8001208 <SH1106_drawCircle+0x54c>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d10d      	bne.n	8001092 <SH1106_drawCircle+0x3d6>
		offset = ((x >> 3) << 7) + y;
 8001076:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800107a:	08db      	lsrs	r3, r3, #3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	01da      	lsls	r2, r3, #7
 8001080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001084:	4413      	add	r3, r2
 8001086:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001088:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800108c:	f003 0507 	and.w	r5, r3, #7
 8001090:	e00c      	b.n	80010ac <SH1106_drawCircle+0x3f0>
		offset = ((y >> 3) << 7) + x;
 8001092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001096:	08db      	lsrs	r3, r3, #3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	01da      	lsls	r2, r3, #7
 800109c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010a0:	4413      	add	r3, r2
 80010a2:	461c      	mov	r4, r3
		bpos = y & 0x07;
 80010a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010a8:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 80010ac:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80010b0:	d82c      	bhi.n	800110c <SH1106_drawCircle+0x450>
	switch (Mode) {
 80010b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d002      	beq.n	80010c0 <SH1106_drawCircle+0x404>
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d00e      	beq.n	80010dc <SH1106_drawCircle+0x420>
 80010be:	e019      	b.n	80010f4 <SH1106_drawCircle+0x438>
		vRAM[offset] &= ~(1 << bpos);
 80010c0:	4b52      	ldr	r3, [pc, #328]	; (800120c <SH1106_drawCircle+0x550>)
 80010c2:	5d1b      	ldrb	r3, [r3, r4]
 80010c4:	b25a      	sxtb	r2, r3
 80010c6:	2301      	movs	r3, #1
 80010c8:	40ab      	lsls	r3, r5
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	4013      	ands	r3, r2
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b4d      	ldr	r3, [pc, #308]	; (800120c <SH1106_drawCircle+0x550>)
 80010d8:	551a      	strb	r2, [r3, r4]
		break;
 80010da:	e018      	b.n	800110e <SH1106_drawCircle+0x452>
		vRAM[offset] ^= (1 << bpos);
 80010dc:	4b4b      	ldr	r3, [pc, #300]	; (800120c <SH1106_drawCircle+0x550>)
 80010de:	5d1b      	ldrb	r3, [r3, r4]
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	2301      	movs	r3, #1
 80010e4:	40ab      	lsls	r3, r5
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	4053      	eors	r3, r2
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b47      	ldr	r3, [pc, #284]	; (800120c <SH1106_drawCircle+0x550>)
 80010f0:	551a      	strb	r2, [r3, r4]
		break;
 80010f2:	e00c      	b.n	800110e <SH1106_drawCircle+0x452>
		vRAM[offset] |= (1 << bpos);
 80010f4:	4b45      	ldr	r3, [pc, #276]	; (800120c <SH1106_drawCircle+0x550>)
 80010f6:	5d1b      	ldrb	r3, [r3, r4]
 80010f8:	b25a      	sxtb	r2, r3
 80010fa:	2301      	movs	r3, #1
 80010fc:	40ab      	lsls	r3, r5
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b25b      	sxtb	r3, r3
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b41      	ldr	r3, [pc, #260]	; (800120c <SH1106_drawCircle+0x550>)
 8001108:	551a      	strb	r2, [r3, r4]
		break;
 800110a:	e000      	b.n	800110e <SH1106_drawCircle+0x452>
		return;
 800110c:	bf00      	nop
		}
		if (x_ + y < sw) {
 800110e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001112:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001116:	441a      	add	r2, r3
 8001118:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800111c:	429a      	cmp	r2, r3
 800111e:	f280 80e7 	bge.w	80012f0 <SH1106_drawCircle+0x634>
			if (y_ + x < sh)
 8001122:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001126:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800112a:	441a      	add	r2, r3
 800112c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001130:	429a      	cmp	r2, r3
 8001132:	da6e      	bge.n	8001212 <SH1106_drawCircle+0x556>
				SH1106_pixel(x_ + y, y_ + x, SH1106_PixelMode);
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4413      	add	r3, r2
 800113e:	b2d9      	uxtb	r1, r3
 8001140:	88bb      	ldrh	r3, [r7, #4]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001146:	b2db      	uxtb	r3, r3
 8001148:	4413      	add	r3, r2
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <SH1106_drawCircle+0x548>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 8001154:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8001158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (scr_orientation == SH1106_ORIENT_CW
 800115c:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <SH1106_drawCircle+0x54c>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d003      	beq.n	800116c <SH1106_drawCircle+0x4b0>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <SH1106_drawCircle+0x54c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d10d      	bne.n	8001188 <SH1106_drawCircle+0x4cc>
		offset = ((x >> 3) << 7) + y;
 800116c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001170:	08db      	lsrs	r3, r3, #3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	01da      	lsls	r2, r3, #7
 8001176:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800117a:	4413      	add	r3, r2
 800117c:	461c      	mov	r4, r3
		bpos = x & 0x07;
 800117e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001182:	f003 0507 	and.w	r5, r3, #7
 8001186:	e00c      	b.n	80011a2 <SH1106_drawCircle+0x4e6>
		offset = ((y >> 3) << 7) + x;
 8001188:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	01da      	lsls	r2, r3, #7
 8001192:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001196:	4413      	add	r3, r2
 8001198:	461c      	mov	r4, r3
		bpos = y & 0x07;
 800119a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800119e:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 80011a2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80011a6:	d833      	bhi.n	8001210 <SH1106_drawCircle+0x554>
	switch (Mode) {
 80011a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d002      	beq.n	80011b6 <SH1106_drawCircle+0x4fa>
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d00e      	beq.n	80011d2 <SH1106_drawCircle+0x516>
 80011b4:	e019      	b.n	80011ea <SH1106_drawCircle+0x52e>
		vRAM[offset] &= ~(1 << bpos);
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <SH1106_drawCircle+0x550>)
 80011b8:	5d1b      	ldrb	r3, [r3, r4]
 80011ba:	b25a      	sxtb	r2, r3
 80011bc:	2301      	movs	r3, #1
 80011be:	40ab      	lsls	r3, r5
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	4013      	ands	r3, r2
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <SH1106_drawCircle+0x550>)
 80011ce:	551a      	strb	r2, [r3, r4]
		break;
 80011d0:	e01f      	b.n	8001212 <SH1106_drawCircle+0x556>
		vRAM[offset] ^= (1 << bpos);
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <SH1106_drawCircle+0x550>)
 80011d4:	5d1b      	ldrb	r3, [r3, r4]
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	2301      	movs	r3, #1
 80011da:	40ab      	lsls	r3, r5
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	4053      	eors	r3, r2
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <SH1106_drawCircle+0x550>)
 80011e6:	551a      	strb	r2, [r3, r4]
		break;
 80011e8:	e013      	b.n	8001212 <SH1106_drawCircle+0x556>
		vRAM[offset] |= (1 << bpos);
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <SH1106_drawCircle+0x550>)
 80011ec:	5d1b      	ldrb	r3, [r3, r4]
 80011ee:	b25a      	sxtb	r2, r3
 80011f0:	2301      	movs	r3, #1
 80011f2:	40ab      	lsls	r3, r5
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <SH1106_drawCircle+0x550>)
 80011fe:	551a      	strb	r2, [r3, r4]
		break;
 8001200:	e007      	b.n	8001212 <SH1106_drawCircle+0x556>
 8001202:	bf00      	nop
 8001204:	200001c0 	.word	0x200001c0
 8001208:	200001c1 	.word	0x200001c1
 800120c:	200001c4 	.word	0x200001c4
		return;
 8001210:	bf00      	nop
			if (y_ - x > -1)
 8001212:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001216:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	db67      	blt.n	80012f0 <SH1106_drawCircle+0x634>
				SH1106_pixel(x_ + y, y_ - x, SH1106_PixelMode);
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4413      	add	r3, r2
 800122a:	b2d9      	uxtb	r1, r3
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001232:	b2db      	uxtb	r3, r3
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b97      	ldr	r3, [pc, #604]	; (8001498 <SH1106_drawCircle+0x7dc>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
 8001240:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8001244:	f887 3020 	strb.w	r3, [r7, #32]
	if (scr_orientation == SH1106_ORIENT_CW
 8001248:	4b94      	ldr	r3, [pc, #592]	; (800149c <SH1106_drawCircle+0x7e0>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d003      	beq.n	8001258 <SH1106_drawCircle+0x59c>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001250:	4b92      	ldr	r3, [pc, #584]	; (800149c <SH1106_drawCircle+0x7e0>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d10d      	bne.n	8001274 <SH1106_drawCircle+0x5b8>
		offset = ((x >> 3) << 7) + y;
 8001258:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800125c:	08db      	lsrs	r3, r3, #3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	01da      	lsls	r2, r3, #7
 8001262:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001266:	4413      	add	r3, r2
 8001268:	461c      	mov	r4, r3
		bpos = x & 0x07;
 800126a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800126e:	f003 0507 	and.w	r5, r3, #7
 8001272:	e00c      	b.n	800128e <SH1106_drawCircle+0x5d2>
		offset = ((y >> 3) << 7) + x;
 8001274:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001278:	08db      	lsrs	r3, r3, #3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	01da      	lsls	r2, r3, #7
 800127e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001282:	4413      	add	r3, r2
 8001284:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001286:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800128a:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 800128e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001292:	d82c      	bhi.n	80012ee <SH1106_drawCircle+0x632>
	switch (Mode) {
 8001294:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d002      	beq.n	80012a2 <SH1106_drawCircle+0x5e6>
 800129c:	2b02      	cmp	r3, #2
 800129e:	d00e      	beq.n	80012be <SH1106_drawCircle+0x602>
 80012a0:	e019      	b.n	80012d6 <SH1106_drawCircle+0x61a>
		vRAM[offset] &= ~(1 << bpos);
 80012a2:	4b7f      	ldr	r3, [pc, #508]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 80012a4:	5d1b      	ldrb	r3, [r3, r4]
 80012a6:	b25a      	sxtb	r2, r3
 80012a8:	2301      	movs	r3, #1
 80012aa:	40ab      	lsls	r3, r5
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	4013      	ands	r3, r2
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b79      	ldr	r3, [pc, #484]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 80012ba:	551a      	strb	r2, [r3, r4]
		break;
 80012bc:	e018      	b.n	80012f0 <SH1106_drawCircle+0x634>
		vRAM[offset] ^= (1 << bpos);
 80012be:	4b78      	ldr	r3, [pc, #480]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 80012c0:	5d1b      	ldrb	r3, [r3, r4]
 80012c2:	b25a      	sxtb	r2, r3
 80012c4:	2301      	movs	r3, #1
 80012c6:	40ab      	lsls	r3, r5
 80012c8:	b25b      	sxtb	r3, r3
 80012ca:	4053      	eors	r3, r2
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b73      	ldr	r3, [pc, #460]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 80012d2:	551a      	strb	r2, [r3, r4]
		break;
 80012d4:	e00c      	b.n	80012f0 <SH1106_drawCircle+0x634>
		vRAM[offset] |= (1 << bpos);
 80012d6:	4b72      	ldr	r3, [pc, #456]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 80012d8:	5d1b      	ldrb	r3, [r3, r4]
 80012da:	b25a      	sxtb	r2, r3
 80012dc:	2301      	movs	r3, #1
 80012de:	40ab      	lsls	r3, r5
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b6d      	ldr	r3, [pc, #436]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 80012ea:	551a      	strb	r2, [r3, r4]
		break;
 80012ec:	e000      	b.n	80012f0 <SH1106_drawCircle+0x634>
		return;
 80012ee:	bf00      	nop
		}
		if (x_ - y > -1) {
 80012f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012f4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f2c0 80d3 	blt.w	80014a6 <SH1106_drawCircle+0x7ea>
			if (y_ + x < sh)
 8001300:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001304:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001308:	441a      	add	r2, r3
 800130a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800130e:	429a      	cmp	r2, r3
 8001310:	da5d      	bge.n	80013ce <SH1106_drawCircle+0x712>
				SH1106_pixel(x_ - y, y_ + x, SH1106_PixelMode);
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001318:	b2db      	uxtb	r3, r3
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	88bb      	ldrh	r3, [r7, #4]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4413      	add	r3, r2
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b5b      	ldr	r3, [pc, #364]	; (8001498 <SH1106_drawCircle+0x7dc>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	77f9      	strb	r1, [r7, #31]
 8001330:	77ba      	strb	r2, [r7, #30]
 8001332:	777b      	strb	r3, [r7, #29]
	if (scr_orientation == SH1106_ORIENT_CW
 8001334:	4b59      	ldr	r3, [pc, #356]	; (800149c <SH1106_drawCircle+0x7e0>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d003      	beq.n	8001344 <SH1106_drawCircle+0x688>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 800133c:	4b57      	ldr	r3, [pc, #348]	; (800149c <SH1106_drawCircle+0x7e0>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d10a      	bne.n	800135a <SH1106_drawCircle+0x69e>
		offset = ((x >> 3) << 7) + y;
 8001344:	7ffb      	ldrb	r3, [r7, #31]
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	01da      	lsls	r2, r3, #7
 800134c:	7fbb      	ldrb	r3, [r7, #30]
 800134e:	4413      	add	r3, r2
 8001350:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001352:	7ffb      	ldrb	r3, [r7, #31]
 8001354:	f003 0507 	and.w	r5, r3, #7
 8001358:	e009      	b.n	800136e <SH1106_drawCircle+0x6b2>
		offset = ((y >> 3) << 7) + x;
 800135a:	7fbb      	ldrb	r3, [r7, #30]
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	01da      	lsls	r2, r3, #7
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	4413      	add	r3, r2
 8001366:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001368:	7fbb      	ldrb	r3, [r7, #30]
 800136a:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 800136e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001372:	d82b      	bhi.n	80013cc <SH1106_drawCircle+0x710>
	switch (Mode) {
 8001374:	7f7b      	ldrb	r3, [r7, #29]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d002      	beq.n	8001380 <SH1106_drawCircle+0x6c4>
 800137a:	2b02      	cmp	r3, #2
 800137c:	d00e      	beq.n	800139c <SH1106_drawCircle+0x6e0>
 800137e:	e019      	b.n	80013b4 <SH1106_drawCircle+0x6f8>
		vRAM[offset] &= ~(1 << bpos);
 8001380:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 8001382:	5d1b      	ldrb	r3, [r3, r4]
 8001384:	b25a      	sxtb	r2, r3
 8001386:	2301      	movs	r3, #1
 8001388:	40ab      	lsls	r3, r5
 800138a:	b25b      	sxtb	r3, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	b25b      	sxtb	r3, r3
 8001390:	4013      	ands	r3, r2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 8001398:	551a      	strb	r2, [r3, r4]
		break;
 800139a:	e018      	b.n	80013ce <SH1106_drawCircle+0x712>
		vRAM[offset] ^= (1 << bpos);
 800139c:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 800139e:	5d1b      	ldrb	r3, [r3, r4]
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	2301      	movs	r3, #1
 80013a4:	40ab      	lsls	r3, r5
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	4053      	eors	r3, r2
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 80013b0:	551a      	strb	r2, [r3, r4]
		break;
 80013b2:	e00c      	b.n	80013ce <SH1106_drawCircle+0x712>
		vRAM[offset] |= (1 << bpos);
 80013b4:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 80013b6:	5d1b      	ldrb	r3, [r3, r4]
 80013b8:	b25a      	sxtb	r2, r3
 80013ba:	2301      	movs	r3, #1
 80013bc:	40ab      	lsls	r3, r5
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 80013c8:	551a      	strb	r2, [r3, r4]
		break;
 80013ca:	e000      	b.n	80013ce <SH1106_drawCircle+0x712>
		return;
 80013cc:	bf00      	nop
			if (y_ - x > -1)
 80013ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013d2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db64      	blt.n	80014a6 <SH1106_drawCircle+0x7ea>
				SH1106_pixel(x_ - y, y_ - x, SH1106_PixelMode);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	b2d9      	uxtb	r1, r3
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b28      	ldr	r3, [pc, #160]	; (8001498 <SH1106_drawCircle+0x7dc>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	7739      	strb	r1, [r7, #28]
 80013fa:	76fa      	strb	r2, [r7, #27]
 80013fc:	76bb      	strb	r3, [r7, #26]
	if (scr_orientation == SH1106_ORIENT_CW
 80013fe:	4b27      	ldr	r3, [pc, #156]	; (800149c <SH1106_drawCircle+0x7e0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d003      	beq.n	800140e <SH1106_drawCircle+0x752>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001406:	4b25      	ldr	r3, [pc, #148]	; (800149c <SH1106_drawCircle+0x7e0>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d10a      	bne.n	8001424 <SH1106_drawCircle+0x768>
		offset = ((x >> 3) << 7) + y;
 800140e:	7f3b      	ldrb	r3, [r7, #28]
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	01da      	lsls	r2, r3, #7
 8001416:	7efb      	ldrb	r3, [r7, #27]
 8001418:	4413      	add	r3, r2
 800141a:	461c      	mov	r4, r3
		bpos = x & 0x07;
 800141c:	7f3b      	ldrb	r3, [r7, #28]
 800141e:	f003 0507 	and.w	r5, r3, #7
 8001422:	e009      	b.n	8001438 <SH1106_drawCircle+0x77c>
		offset = ((y >> 3) << 7) + x;
 8001424:	7efb      	ldrb	r3, [r7, #27]
 8001426:	08db      	lsrs	r3, r3, #3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	01da      	lsls	r2, r3, #7
 800142c:	7f3b      	ldrb	r3, [r7, #28]
 800142e:	4413      	add	r3, r2
 8001430:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001432:	7efb      	ldrb	r3, [r7, #27]
 8001434:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001438:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800143c:	d832      	bhi.n	80014a4 <SH1106_drawCircle+0x7e8>
	switch (Mode) {
 800143e:	7ebb      	ldrb	r3, [r7, #26]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d002      	beq.n	800144a <SH1106_drawCircle+0x78e>
 8001444:	2b02      	cmp	r3, #2
 8001446:	d00e      	beq.n	8001466 <SH1106_drawCircle+0x7aa>
 8001448:	e019      	b.n	800147e <SH1106_drawCircle+0x7c2>
		vRAM[offset] &= ~(1 << bpos);
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 800144c:	5d1b      	ldrb	r3, [r3, r4]
 800144e:	b25a      	sxtb	r2, r3
 8001450:	2301      	movs	r3, #1
 8001452:	40ab      	lsls	r3, r5
 8001454:	b25b      	sxtb	r3, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	b25b      	sxtb	r3, r3
 800145a:	4013      	ands	r3, r2
 800145c:	b25b      	sxtb	r3, r3
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 8001462:	551a      	strb	r2, [r3, r4]
		break;
 8001464:	e01f      	b.n	80014a6 <SH1106_drawCircle+0x7ea>
		vRAM[offset] ^= (1 << bpos);
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 8001468:	5d1b      	ldrb	r3, [r3, r4]
 800146a:	b25a      	sxtb	r2, r3
 800146c:	2301      	movs	r3, #1
 800146e:	40ab      	lsls	r3, r5
 8001470:	b25b      	sxtb	r3, r3
 8001472:	4053      	eors	r3, r2
 8001474:	b25b      	sxtb	r3, r3
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 800147a:	551a      	strb	r2, [r3, r4]
		break;
 800147c:	e013      	b.n	80014a6 <SH1106_drawCircle+0x7ea>
		vRAM[offset] |= (1 << bpos);
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 8001480:	5d1b      	ldrb	r3, [r3, r4]
 8001482:	b25a      	sxtb	r2, r3
 8001484:	2301      	movs	r3, #1
 8001486:	40ab      	lsls	r3, r5
 8001488:	b25b      	sxtb	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b25b      	sxtb	r3, r3
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <SH1106_drawCircle+0x7e4>)
 8001492:	551a      	strb	r2, [r3, r4]
		break;
 8001494:	e007      	b.n	80014a6 <SH1106_drawCircle+0x7ea>
 8001496:	bf00      	nop
 8001498:	200001c0 	.word	0x200001c0
 800149c:	200001c1 	.word	0x200001c1
 80014a0:	200001c4 	.word	0x200001c4
		return;
 80014a4:	bf00      	nop
	while (x < y) {
 80014a6:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80014aa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80014ae:	429a      	cmp	r2, r3
 80014b0:	f6ff ac2c 	blt.w	8000d0c <SH1106_drawCircle+0x50>
		}
	}

	// Vertical and horizontal points
	if (x_ + radius < sw)
 80014b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	441a      	add	r2, r3
 80014bc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80014c0:	429a      	cmp	r2, r3
 80014c2:	da58      	bge.n	8001576 <SH1106_drawCircle+0x8ba>
		SH1106_pixel(x_ + radius, y_, SH1106_PixelMode);
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	4413      	add	r3, r2
 80014cc:	b2d9      	uxtb	r1, r3
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b9b      	ldr	r3, [pc, #620]	; (8001740 <SH1106_drawCircle+0xa84>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	7679      	strb	r1, [r7, #25]
 80014d8:	763a      	strb	r2, [r7, #24]
 80014da:	75fb      	strb	r3, [r7, #23]
	if (scr_orientation == SH1106_ORIENT_CW
 80014dc:	4b99      	ldr	r3, [pc, #612]	; (8001744 <SH1106_drawCircle+0xa88>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d003      	beq.n	80014ec <SH1106_drawCircle+0x830>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 80014e4:	4b97      	ldr	r3, [pc, #604]	; (8001744 <SH1106_drawCircle+0xa88>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d10a      	bne.n	8001502 <SH1106_drawCircle+0x846>
		offset = ((x >> 3) << 7) + y;
 80014ec:	7e7b      	ldrb	r3, [r7, #25]
 80014ee:	08db      	lsrs	r3, r3, #3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	01da      	lsls	r2, r3, #7
 80014f4:	7e3b      	ldrb	r3, [r7, #24]
 80014f6:	4413      	add	r3, r2
 80014f8:	461c      	mov	r4, r3
		bpos = x & 0x07;
 80014fa:	7e7b      	ldrb	r3, [r7, #25]
 80014fc:	f003 0507 	and.w	r5, r3, #7
 8001500:	e009      	b.n	8001516 <SH1106_drawCircle+0x85a>
		offset = ((y >> 3) << 7) + x;
 8001502:	7e3b      	ldrb	r3, [r7, #24]
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	01da      	lsls	r2, r3, #7
 800150a:	7e7b      	ldrb	r3, [r7, #25]
 800150c:	4413      	add	r3, r2
 800150e:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001510:	7e3b      	ldrb	r3, [r7, #24]
 8001512:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001516:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800151a:	d82b      	bhi.n	8001574 <SH1106_drawCircle+0x8b8>
	switch (Mode) {
 800151c:	7dfb      	ldrb	r3, [r7, #23]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d002      	beq.n	8001528 <SH1106_drawCircle+0x86c>
 8001522:	2b02      	cmp	r3, #2
 8001524:	d00e      	beq.n	8001544 <SH1106_drawCircle+0x888>
 8001526:	e019      	b.n	800155c <SH1106_drawCircle+0x8a0>
		vRAM[offset] &= ~(1 << bpos);
 8001528:	4b87      	ldr	r3, [pc, #540]	; (8001748 <SH1106_drawCircle+0xa8c>)
 800152a:	5d1b      	ldrb	r3, [r3, r4]
 800152c:	b25a      	sxtb	r2, r3
 800152e:	2301      	movs	r3, #1
 8001530:	40ab      	lsls	r3, r5
 8001532:	b25b      	sxtb	r3, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	b25b      	sxtb	r3, r3
 8001538:	4013      	ands	r3, r2
 800153a:	b25b      	sxtb	r3, r3
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b82      	ldr	r3, [pc, #520]	; (8001748 <SH1106_drawCircle+0xa8c>)
 8001540:	551a      	strb	r2, [r3, r4]
		break;
 8001542:	e018      	b.n	8001576 <SH1106_drawCircle+0x8ba>
		vRAM[offset] ^= (1 << bpos);
 8001544:	4b80      	ldr	r3, [pc, #512]	; (8001748 <SH1106_drawCircle+0xa8c>)
 8001546:	5d1b      	ldrb	r3, [r3, r4]
 8001548:	b25a      	sxtb	r2, r3
 800154a:	2301      	movs	r3, #1
 800154c:	40ab      	lsls	r3, r5
 800154e:	b25b      	sxtb	r3, r3
 8001550:	4053      	eors	r3, r2
 8001552:	b25b      	sxtb	r3, r3
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b7c      	ldr	r3, [pc, #496]	; (8001748 <SH1106_drawCircle+0xa8c>)
 8001558:	551a      	strb	r2, [r3, r4]
		break;
 800155a:	e00c      	b.n	8001576 <SH1106_drawCircle+0x8ba>
		vRAM[offset] |= (1 << bpos);
 800155c:	4b7a      	ldr	r3, [pc, #488]	; (8001748 <SH1106_drawCircle+0xa8c>)
 800155e:	5d1b      	ldrb	r3, [r3, r4]
 8001560:	b25a      	sxtb	r2, r3
 8001562:	2301      	movs	r3, #1
 8001564:	40ab      	lsls	r3, r5
 8001566:	b25b      	sxtb	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	b25b      	sxtb	r3, r3
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b76      	ldr	r3, [pc, #472]	; (8001748 <SH1106_drawCircle+0xa8c>)
 8001570:	551a      	strb	r2, [r3, r4]
		break;
 8001572:	e000      	b.n	8001576 <SH1106_drawCircle+0x8ba>
		return;
 8001574:	bf00      	nop
	if (x_ - radius > -1)
 8001576:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	db58      	blt.n	8001634 <SH1106_drawCircle+0x978>
		SH1106_pixel(x_ - radius, y_, SH1106_PixelMode);
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	b2d9      	uxtb	r1, r3
 800158c:	88bb      	ldrh	r3, [r7, #4]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b6b      	ldr	r3, [pc, #428]	; (8001740 <SH1106_drawCircle+0xa84>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	75b9      	strb	r1, [r7, #22]
 8001596:	757a      	strb	r2, [r7, #21]
 8001598:	753b      	strb	r3, [r7, #20]
	if (scr_orientation == SH1106_ORIENT_CW
 800159a:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <SH1106_drawCircle+0xa88>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d003      	beq.n	80015aa <SH1106_drawCircle+0x8ee>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 80015a2:	4b68      	ldr	r3, [pc, #416]	; (8001744 <SH1106_drawCircle+0xa88>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d10a      	bne.n	80015c0 <SH1106_drawCircle+0x904>
		offset = ((x >> 3) << 7) + y;
 80015aa:	7dbb      	ldrb	r3, [r7, #22]
 80015ac:	08db      	lsrs	r3, r3, #3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	01da      	lsls	r2, r3, #7
 80015b2:	7d7b      	ldrb	r3, [r7, #21]
 80015b4:	4413      	add	r3, r2
 80015b6:	461c      	mov	r4, r3
		bpos = x & 0x07;
 80015b8:	7dbb      	ldrb	r3, [r7, #22]
 80015ba:	f003 0507 	and.w	r5, r3, #7
 80015be:	e009      	b.n	80015d4 <SH1106_drawCircle+0x918>
		offset = ((y >> 3) << 7) + x;
 80015c0:	7d7b      	ldrb	r3, [r7, #21]
 80015c2:	08db      	lsrs	r3, r3, #3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	01da      	lsls	r2, r3, #7
 80015c8:	7dbb      	ldrb	r3, [r7, #22]
 80015ca:	4413      	add	r3, r2
 80015cc:	461c      	mov	r4, r3
		bpos = y & 0x07;
 80015ce:	7d7b      	ldrb	r3, [r7, #21]
 80015d0:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 80015d4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80015d8:	d82b      	bhi.n	8001632 <SH1106_drawCircle+0x976>
	switch (Mode) {
 80015da:	7d3b      	ldrb	r3, [r7, #20]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d002      	beq.n	80015e6 <SH1106_drawCircle+0x92a>
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d00e      	beq.n	8001602 <SH1106_drawCircle+0x946>
 80015e4:	e019      	b.n	800161a <SH1106_drawCircle+0x95e>
		vRAM[offset] &= ~(1 << bpos);
 80015e6:	4b58      	ldr	r3, [pc, #352]	; (8001748 <SH1106_drawCircle+0xa8c>)
 80015e8:	5d1b      	ldrb	r3, [r3, r4]
 80015ea:	b25a      	sxtb	r2, r3
 80015ec:	2301      	movs	r3, #1
 80015ee:	40ab      	lsls	r3, r5
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	4013      	ands	r3, r2
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b52      	ldr	r3, [pc, #328]	; (8001748 <SH1106_drawCircle+0xa8c>)
 80015fe:	551a      	strb	r2, [r3, r4]
		break;
 8001600:	e018      	b.n	8001634 <SH1106_drawCircle+0x978>
		vRAM[offset] ^= (1 << bpos);
 8001602:	4b51      	ldr	r3, [pc, #324]	; (8001748 <SH1106_drawCircle+0xa8c>)
 8001604:	5d1b      	ldrb	r3, [r3, r4]
 8001606:	b25a      	sxtb	r2, r3
 8001608:	2301      	movs	r3, #1
 800160a:	40ab      	lsls	r3, r5
 800160c:	b25b      	sxtb	r3, r3
 800160e:	4053      	eors	r3, r2
 8001610:	b25b      	sxtb	r3, r3
 8001612:	b2da      	uxtb	r2, r3
 8001614:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <SH1106_drawCircle+0xa8c>)
 8001616:	551a      	strb	r2, [r3, r4]
		break;
 8001618:	e00c      	b.n	8001634 <SH1106_drawCircle+0x978>
		vRAM[offset] |= (1 << bpos);
 800161a:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <SH1106_drawCircle+0xa8c>)
 800161c:	5d1b      	ldrb	r3, [r3, r4]
 800161e:	b25a      	sxtb	r2, r3
 8001620:	2301      	movs	r3, #1
 8001622:	40ab      	lsls	r3, r5
 8001624:	b25b      	sxtb	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b25b      	sxtb	r3, r3
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b46      	ldr	r3, [pc, #280]	; (8001748 <SH1106_drawCircle+0xa8c>)
 800162e:	551a      	strb	r2, [r3, r4]
		break;
 8001630:	e000      	b.n	8001634 <SH1106_drawCircle+0x978>
		return;
 8001632:	bf00      	nop
	if (y_ + radius < sh)
 8001634:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	441a      	add	r2, r3
 800163c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001640:	429a      	cmp	r2, r3
 8001642:	da58      	bge.n	80016f6 <SH1106_drawCircle+0xa3a>
		SH1106_pixel(x_, y_ + radius, SH1106_PixelMode);
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	b2d9      	uxtb	r1, r3
 8001648:	88bb      	ldrh	r3, [r7, #4]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	4413      	add	r3, r2
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <SH1106_drawCircle+0xa84>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	74f9      	strb	r1, [r7, #19]
 8001658:	74ba      	strb	r2, [r7, #18]
 800165a:	747b      	strb	r3, [r7, #17]
	if (scr_orientation == SH1106_ORIENT_CW
 800165c:	4b39      	ldr	r3, [pc, #228]	; (8001744 <SH1106_drawCircle+0xa88>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d003      	beq.n	800166c <SH1106_drawCircle+0x9b0>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001664:	4b37      	ldr	r3, [pc, #220]	; (8001744 <SH1106_drawCircle+0xa88>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d10a      	bne.n	8001682 <SH1106_drawCircle+0x9c6>
		offset = ((x >> 3) << 7) + y;
 800166c:	7cfb      	ldrb	r3, [r7, #19]
 800166e:	08db      	lsrs	r3, r3, #3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	01da      	lsls	r2, r3, #7
 8001674:	7cbb      	ldrb	r3, [r7, #18]
 8001676:	4413      	add	r3, r2
 8001678:	461c      	mov	r4, r3
		bpos = x & 0x07;
 800167a:	7cfb      	ldrb	r3, [r7, #19]
 800167c:	f003 0507 	and.w	r5, r3, #7
 8001680:	e009      	b.n	8001696 <SH1106_drawCircle+0x9da>
		offset = ((y >> 3) << 7) + x;
 8001682:	7cbb      	ldrb	r3, [r7, #18]
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	01da      	lsls	r2, r3, #7
 800168a:	7cfb      	ldrb	r3, [r7, #19]
 800168c:	4413      	add	r3, r2
 800168e:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001690:	7cbb      	ldrb	r3, [r7, #18]
 8001692:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001696:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800169a:	d82b      	bhi.n	80016f4 <SH1106_drawCircle+0xa38>
	switch (Mode) {
 800169c:	7c7b      	ldrb	r3, [r7, #17]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d002      	beq.n	80016a8 <SH1106_drawCircle+0x9ec>
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d00e      	beq.n	80016c4 <SH1106_drawCircle+0xa08>
 80016a6:	e019      	b.n	80016dc <SH1106_drawCircle+0xa20>
		vRAM[offset] &= ~(1 << bpos);
 80016a8:	4b27      	ldr	r3, [pc, #156]	; (8001748 <SH1106_drawCircle+0xa8c>)
 80016aa:	5d1b      	ldrb	r3, [r3, r4]
 80016ac:	b25a      	sxtb	r2, r3
 80016ae:	2301      	movs	r3, #1
 80016b0:	40ab      	lsls	r3, r5
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <SH1106_drawCircle+0xa8c>)
 80016c0:	551a      	strb	r2, [r3, r4]
		break;
 80016c2:	e018      	b.n	80016f6 <SH1106_drawCircle+0xa3a>
		vRAM[offset] ^= (1 << bpos);
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <SH1106_drawCircle+0xa8c>)
 80016c6:	5d1b      	ldrb	r3, [r3, r4]
 80016c8:	b25a      	sxtb	r2, r3
 80016ca:	2301      	movs	r3, #1
 80016cc:	40ab      	lsls	r3, r5
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	4053      	eors	r3, r2
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <SH1106_drawCircle+0xa8c>)
 80016d8:	551a      	strb	r2, [r3, r4]
		break;
 80016da:	e00c      	b.n	80016f6 <SH1106_drawCircle+0xa3a>
		vRAM[offset] |= (1 << bpos);
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <SH1106_drawCircle+0xa8c>)
 80016de:	5d1b      	ldrb	r3, [r3, r4]
 80016e0:	b25a      	sxtb	r2, r3
 80016e2:	2301      	movs	r3, #1
 80016e4:	40ab      	lsls	r3, r5
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <SH1106_drawCircle+0xa8c>)
 80016f0:	551a      	strb	r2, [r3, r4]
		break;
 80016f2:	e000      	b.n	80016f6 <SH1106_drawCircle+0xa3a>
		return;
 80016f4:	bf00      	nop
	if (y_ - radius > -1)
 80016f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db5e      	blt.n	80017c0 <SH1106_drawCircle+0xb04>
		SH1106_pixel(x_, y_ - radius, SH1106_PixelMode);
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	b2d9      	uxtb	r1, r3
 8001706:	88bb      	ldrh	r3, [r7, #4]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	b2da      	uxtb	r2, r3
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <SH1106_drawCircle+0xa84>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	7439      	strb	r1, [r7, #16]
 8001716:	73fa      	strb	r2, [r7, #15]
 8001718:	73bb      	strb	r3, [r7, #14]
	if (scr_orientation == SH1106_ORIENT_CW
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <SH1106_drawCircle+0xa88>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d003      	beq.n	800172a <SH1106_drawCircle+0xa6e>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <SH1106_drawCircle+0xa88>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d110      	bne.n	800174c <SH1106_drawCircle+0xa90>
		offset = ((x >> 3) << 7) + y;
 800172a:	7c3b      	ldrb	r3, [r7, #16]
 800172c:	08db      	lsrs	r3, r3, #3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	01da      	lsls	r2, r3, #7
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	4413      	add	r3, r2
 8001736:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001738:	7c3b      	ldrb	r3, [r7, #16]
 800173a:	f003 0507 	and.w	r5, r3, #7
 800173e:	e00f      	b.n	8001760 <SH1106_drawCircle+0xaa4>
 8001740:	200001c0 	.word	0x200001c0
 8001744:	200001c1 	.word	0x200001c1
 8001748:	200001c4 	.word	0x200001c4
		offset = ((y >> 3) << 7) + x;
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	01da      	lsls	r2, r3, #7
 8001754:	7c3b      	ldrb	r3, [r7, #16]
 8001756:	4413      	add	r3, r2
 8001758:	461c      	mov	r4, r3
		bpos = y & 0x07;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001760:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001764:	d82b      	bhi.n	80017be <SH1106_drawCircle+0xb02>
	switch (Mode) {
 8001766:	7bbb      	ldrb	r3, [r7, #14]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d002      	beq.n	8001772 <SH1106_drawCircle+0xab6>
 800176c:	2b02      	cmp	r3, #2
 800176e:	d00e      	beq.n	800178e <SH1106_drawCircle+0xad2>
 8001770:	e019      	b.n	80017a6 <SH1106_drawCircle+0xaea>
		vRAM[offset] &= ~(1 << bpos);
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <SH1106_drawCircle+0xb10>)
 8001774:	5d1b      	ldrb	r3, [r3, r4]
 8001776:	b25a      	sxtb	r2, r3
 8001778:	2301      	movs	r3, #1
 800177a:	40ab      	lsls	r3, r5
 800177c:	b25b      	sxtb	r3, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	b25b      	sxtb	r3, r3
 8001782:	4013      	ands	r3, r2
 8001784:	b25b      	sxtb	r3, r3
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <SH1106_drawCircle+0xb10>)
 800178a:	551a      	strb	r2, [r3, r4]
		break;
 800178c:	e018      	b.n	80017c0 <SH1106_drawCircle+0xb04>
		vRAM[offset] ^= (1 << bpos);
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <SH1106_drawCircle+0xb10>)
 8001790:	5d1b      	ldrb	r3, [r3, r4]
 8001792:	b25a      	sxtb	r2, r3
 8001794:	2301      	movs	r3, #1
 8001796:	40ab      	lsls	r3, r5
 8001798:	b25b      	sxtb	r3, r3
 800179a:	4053      	eors	r3, r2
 800179c:	b25b      	sxtb	r3, r3
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <SH1106_drawCircle+0xb10>)
 80017a2:	551a      	strb	r2, [r3, r4]
		break;
 80017a4:	e00c      	b.n	80017c0 <SH1106_drawCircle+0xb04>
		vRAM[offset] |= (1 << bpos);
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <SH1106_drawCircle+0xb10>)
 80017a8:	5d1b      	ldrb	r3, [r3, r4]
 80017aa:	b25a      	sxtb	r2, r3
 80017ac:	2301      	movs	r3, #1
 80017ae:	40ab      	lsls	r3, r5
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <SH1106_drawCircle+0xb10>)
 80017ba:	551a      	strb	r2, [r3, r4]
		break;
 80017bc:	e000      	b.n	80017c0 <SH1106_drawCircle+0xb04>
		return;
 80017be:	bf00      	nop
}
 80017c0:	bf00      	nop
 80017c2:	3744      	adds	r7, #68	; 0x44
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bcb0      	pop	{r4, r5, r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200001c4 	.word	0x200001c4

080017d0 <SH1106_drawBitmapFullscreen>:
		}
		p_y += 8;
	}
}

void SH1106_drawBitmapFullscreen(const uint8_t *pBMP) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	memcpy(vRAM, pBMP, (SCR_W * SCR_H ) >> 3);
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <SH1106_drawBitmapFullscreen+0x24>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e4:	461a      	mov	r2, r3
 80017e6:	f002 f8b1 	bl	800394c <memcpy>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200001c4 	.word	0x200001c4

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_Init+0x28>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_Init+0x28>)
 8001802:	f043 0310 	orr.w	r3, r3, #16
 8001806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f000 fb07 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180e:	200f      	movs	r0, #15
 8001810:	f7fe fffe 	bl	8000810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001814:	f7fe ffc2 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40022000 	.word	0x40022000

08001824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_IncTick+0x1c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_IncTick+0x20>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a03      	ldr	r2, [pc, #12]	; (8001844 <HAL_IncTick+0x20>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	200000cc 	.word	0x200000cc
 8001844:	20000644 	.word	0x20000644

08001848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b02      	ldr	r3, [pc, #8]	; (8001858 <HAL_GetTick+0x10>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	20000644 	.word	0x20000644

0800185c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff fff0 	bl	8001848 <HAL_GetTick>
 8001868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001874:	d005      	beq.n	8001882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_Delay+0x44>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001882:	bf00      	nop
 8001884:	f7ff ffe0 	bl	8001848 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	429a      	cmp	r2, r3
 8001892:	d8f7      	bhi.n	8001884 <HAL_Delay+0x28>
  {
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200000cc 	.word	0x200000cc

080018a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0be      	b.n	8001a44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d109      	bne.n	80018e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7fe fc70 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f9ab 	bl	8001c44 <ADC_ConversionStop_Disable>
 80018ee:	4603      	mov	r3, r0
 80018f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 8099 	bne.w	8001a32 <HAL_ADC_Init+0x18e>
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 8095 	bne.w	8001a32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001910:	f023 0302 	bic.w	r3, r3, #2
 8001914:	f043 0202 	orr.w	r2, r3, #2
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001924:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7b1b      	ldrb	r3, [r3, #12]
 800192a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800192c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	4313      	orrs	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800193c:	d003      	beq.n	8001946 <HAL_ADC_Init+0xa2>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d102      	bne.n	800194c <HAL_ADC_Init+0xa8>
 8001946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194a:	e000      	b.n	800194e <HAL_ADC_Init+0xaa>
 800194c:	2300      	movs	r3, #0
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7d1b      	ldrb	r3, [r3, #20]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d119      	bne.n	8001990 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7b1b      	ldrb	r3, [r3, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	3b01      	subs	r3, #1
 800196a:	035a      	lsls	r2, r3, #13
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	e00b      	b.n	8001990 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	f043 0220 	orr.w	r2, r3, #32
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <HAL_ADC_Init+0x1a8>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	68b9      	ldr	r1, [r7, #8]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c0:	d003      	beq.n	80019ca <HAL_ADC_Init+0x126>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d104      	bne.n	80019d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	051b      	lsls	r3, r3, #20
 80019d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_ADC_Init+0x1ac>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d10b      	bne.n	8001a10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	f023 0303 	bic.w	r3, r3, #3
 8001a06:	f043 0201 	orr.w	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a0e:	e018      	b.n	8001a42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	f023 0312 	bic.w	r3, r3, #18
 8001a18:	f043 0210 	orr.w	r2, r3, #16
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a30:	e007      	b.n	8001a42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	f043 0210 	orr.w	r2, r3, #16
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	ffe1f7fd 	.word	0xffe1f7fd
 8001a50:	ff1f0efe 	.word	0xff1f0efe

08001a54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x20>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e0dc      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1da>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b06      	cmp	r3, #6
 8001a82:	d81c      	bhi.n	8001abe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	3b05      	subs	r3, #5
 8001a96:	221f      	movs	r2, #31
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4019      	ands	r1, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	3b05      	subs	r3, #5
 8001ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	635a      	str	r2, [r3, #52]	; 0x34
 8001abc:	e03c      	b.n	8001b38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d81c      	bhi.n	8001b00 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3b23      	subs	r3, #35	; 0x23
 8001ad8:	221f      	movs	r2, #31
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	4019      	ands	r1, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	3b23      	subs	r3, #35	; 0x23
 8001af2:	fa00 f203 	lsl.w	r2, r0, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	631a      	str	r2, [r3, #48]	; 0x30
 8001afe:	e01b      	b.n	8001b38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b41      	subs	r3, #65	; 0x41
 8001b12:	221f      	movs	r2, #31
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4019      	ands	r1, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b41      	subs	r3, #65	; 0x41
 8001b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b09      	cmp	r3, #9
 8001b3e:	d91c      	bls.n	8001b7a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68d9      	ldr	r1, [r3, #12]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	3b1e      	subs	r3, #30
 8001b52:	2207      	movs	r2, #7
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4019      	ands	r1, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6898      	ldr	r0, [r3, #8]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	3b1e      	subs	r3, #30
 8001b6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	e019      	b.n	8001bae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6919      	ldr	r1, [r3, #16]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4019      	ands	r1, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6898      	ldr	r0, [r3, #8]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d003      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bba:	2b11      	cmp	r3, #17
 8001bbc:	d132      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d125      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d126      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001be4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b10      	cmp	r3, #16
 8001bec:	d11a      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_ADC_ConfigChannel+0x1e8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <HAL_ADC_ConfigChannel+0x1ec>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	0c9a      	lsrs	r2, r3, #18
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c04:	e002      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f9      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x1b2>
 8001c12:	e007      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	f043 0220 	orr.w	r2, r3, #32
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	40012400 	.word	0x40012400
 8001c3c:	2000003c 	.word	0x2000003c
 8001c40:	431bde83 	.word	0x431bde83

08001c44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d12e      	bne.n	8001cbc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0201 	bic.w	r2, r2, #1
 8001c6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c6e:	f7ff fdeb 	bl	8001848 <HAL_GetTick>
 8001c72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c74:	e01b      	b.n	8001cae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c76:	f7ff fde7 	bl	8001848 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d914      	bls.n	8001cae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d10d      	bne.n	8001cae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	f043 0210 	orr.w	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	f043 0201 	orr.w	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e007      	b.n	8001cbe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d0dc      	beq.n	8001c76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4906      	ldr	r1, [pc, #24]	; (8001d60 <__NVIC_EnableIRQ+0x34>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	; (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff4f 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff64 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ffb2 	bl	8001db8 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff81 	bl	8001d64 <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff57 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b08b      	sub	sp, #44	; 0x2c
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	e169      	b.n	8002170 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8158 	bne.w	800216a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4a9a      	ldr	r2, [pc, #616]	; (8002128 <HAL_GPIO_Init+0x2a0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d05e      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a98      	ldr	r2, [pc, #608]	; (8002128 <HAL_GPIO_Init+0x2a0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d875      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001eca:	4a98      	ldr	r2, [pc, #608]	; (800212c <HAL_GPIO_Init+0x2a4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d058      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ed0:	4a96      	ldr	r2, [pc, #600]	; (800212c <HAL_GPIO_Init+0x2a4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d86f      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001ed6:	4a96      	ldr	r2, [pc, #600]	; (8002130 <HAL_GPIO_Init+0x2a8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d052      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001edc:	4a94      	ldr	r2, [pc, #592]	; (8002130 <HAL_GPIO_Init+0x2a8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d869      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001ee2:	4a94      	ldr	r2, [pc, #592]	; (8002134 <HAL_GPIO_Init+0x2ac>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d04c      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a92      	ldr	r2, [pc, #584]	; (8002134 <HAL_GPIO_Init+0x2ac>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d863      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001eee:	4a92      	ldr	r2, [pc, #584]	; (8002138 <HAL_GPIO_Init+0x2b0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d046      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ef4:	4a90      	ldr	r2, [pc, #576]	; (8002138 <HAL_GPIO_Init+0x2b0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d85d      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d82a      	bhi.n	8001f54 <HAL_GPIO_Init+0xcc>
 8001efe:	2b12      	cmp	r3, #18
 8001f00:	d859      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001f02:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <HAL_GPIO_Init+0x80>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001f83 	.word	0x08001f83
 8001f0c:	08001f5d 	.word	0x08001f5d
 8001f10:	08001f6f 	.word	0x08001f6f
 8001f14:	08001fb1 	.word	0x08001fb1
 8001f18:	08001fb7 	.word	0x08001fb7
 8001f1c:	08001fb7 	.word	0x08001fb7
 8001f20:	08001fb7 	.word	0x08001fb7
 8001f24:	08001fb7 	.word	0x08001fb7
 8001f28:	08001fb7 	.word	0x08001fb7
 8001f2c:	08001fb7 	.word	0x08001fb7
 8001f30:	08001fb7 	.word	0x08001fb7
 8001f34:	08001fb7 	.word	0x08001fb7
 8001f38:	08001fb7 	.word	0x08001fb7
 8001f3c:	08001fb7 	.word	0x08001fb7
 8001f40:	08001fb7 	.word	0x08001fb7
 8001f44:	08001fb7 	.word	0x08001fb7
 8001f48:	08001fb7 	.word	0x08001fb7
 8001f4c:	08001f65 	.word	0x08001f65
 8001f50:	08001f79 	.word	0x08001f79
 8001f54:	4a79      	ldr	r2, [pc, #484]	; (800213c <HAL_GPIO_Init+0x2b4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f5a:	e02c      	b.n	8001fb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	623b      	str	r3, [r7, #32]
          break;
 8001f62:	e029      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	623b      	str	r3, [r7, #32]
          break;
 8001f6c:	e024      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	3308      	adds	r3, #8
 8001f74:	623b      	str	r3, [r7, #32]
          break;
 8001f76:	e01f      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	330c      	adds	r3, #12
 8001f7e:	623b      	str	r3, [r7, #32]
          break;
 8001f80:	e01a      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e013      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	611a      	str	r2, [r3, #16]
          break;
 8001fa2:	e009      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	615a      	str	r2, [r3, #20]
          break;
 8001fae:	e003      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	623b      	str	r3, [r7, #32]
          break;
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          break;
 8001fb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2bff      	cmp	r3, #255	; 0xff
 8001fbc:	d801      	bhi.n	8001fc2 <HAL_GPIO_Init+0x13a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	e001      	b.n	8001fc6 <HAL_GPIO_Init+0x13e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2bff      	cmp	r3, #255	; 0xff
 8001fcc:	d802      	bhi.n	8001fd4 <HAL_GPIO_Init+0x14c>
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	e002      	b.n	8001fda <HAL_GPIO_Init+0x152>
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	3b08      	subs	r3, #8
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	210f      	movs	r1, #15
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	401a      	ands	r2, r3
 8001fec:	6a39      	ldr	r1, [r7, #32]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80b1 	beq.w	800216a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002008:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <HAL_GPIO_Init+0x2b8>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_GPIO_Init+0x2b8>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_GPIO_Init+0x2b8>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002020:	4a48      	ldr	r2, [pc, #288]	; (8002144 <HAL_GPIO_Init+0x2bc>)
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a40      	ldr	r2, [pc, #256]	; (8002148 <HAL_GPIO_Init+0x2c0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d013      	beq.n	8002074 <HAL_GPIO_Init+0x1ec>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3f      	ldr	r2, [pc, #252]	; (800214c <HAL_GPIO_Init+0x2c4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00d      	beq.n	8002070 <HAL_GPIO_Init+0x1e8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3e      	ldr	r2, [pc, #248]	; (8002150 <HAL_GPIO_Init+0x2c8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d007      	beq.n	800206c <HAL_GPIO_Init+0x1e4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3d      	ldr	r2, [pc, #244]	; (8002154 <HAL_GPIO_Init+0x2cc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_GPIO_Init+0x1e0>
 8002064:	2303      	movs	r3, #3
 8002066:	e006      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 8002068:	2304      	movs	r3, #4
 800206a:	e004      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 800206c:	2302      	movs	r3, #2
 800206e:	e002      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 8002074:	2300      	movs	r3, #0
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	f002 0203 	and.w	r2, r2, #3
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	4093      	lsls	r3, r2
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002086:	492f      	ldr	r1, [pc, #188]	; (8002144 <HAL_GPIO_Init+0x2bc>)
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	3302      	adds	r3, #2
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a0:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	492c      	ldr	r1, [pc, #176]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ae:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	4928      	ldr	r1, [pc, #160]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4922      	ldr	r1, [pc, #136]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	43db      	mvns	r3, r3
 80020de:	491e      	ldr	r1, [pc, #120]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d006      	beq.n	80020fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	4918      	ldr	r1, [pc, #96]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]
 80020fc:	e006      	b.n	800210c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	43db      	mvns	r3, r3
 8002106:	4914      	ldr	r1, [pc, #80]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 8002108:	4013      	ands	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d021      	beq.n	800215c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	490e      	ldr	r1, [pc, #56]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	60cb      	str	r3, [r1, #12]
 8002124:	e021      	b.n	800216a <HAL_GPIO_Init+0x2e2>
 8002126:	bf00      	nop
 8002128:	10320000 	.word	0x10320000
 800212c:	10310000 	.word	0x10310000
 8002130:	10220000 	.word	0x10220000
 8002134:	10210000 	.word	0x10210000
 8002138:	10120000 	.word	0x10120000
 800213c:	10110000 	.word	0x10110000
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000
 8002148:	40010800 	.word	0x40010800
 800214c:	40010c00 	.word	0x40010c00
 8002150:	40011000 	.word	0x40011000
 8002154:	40011400 	.word	0x40011400
 8002158:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_GPIO_Init+0x304>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	43db      	mvns	r3, r3
 8002164:	4909      	ldr	r1, [pc, #36]	; (800218c <HAL_GPIO_Init+0x304>)
 8002166:	4013      	ands	r3, r2
 8002168:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	3301      	adds	r3, #1
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	f47f ae8e 	bne.w	8001e9c <HAL_GPIO_Init+0x14>
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	372c      	adds	r7, #44	; 0x2c
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	40010400 	.word	0x40010400

08002190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
 800219c:	4613      	mov	r3, r2
 800219e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a0:	787b      	ldrb	r3, [r7, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021ac:	e003      	b.n	80021b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	041a      	lsls	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	611a      	str	r2, [r3, #16]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
	/* EXTI line interrupt detected */
	HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f955 	bl	800047c <HAL_GPIO_EXTI_Callback>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e12b      	b.n	8002446 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe f8fc 	bl	8000400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2224      	movs	r2, #36	; 0x24
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800222e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800223e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002240:	f000 ffea 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8002244:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4a81      	ldr	r2, [pc, #516]	; (8002450 <HAL_I2C_Init+0x274>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d807      	bhi.n	8002260 <HAL_I2C_Init+0x84>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a80      	ldr	r2, [pc, #512]	; (8002454 <HAL_I2C_Init+0x278>)
 8002254:	4293      	cmp	r3, r2
 8002256:	bf94      	ite	ls
 8002258:	2301      	movls	r3, #1
 800225a:	2300      	movhi	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	e006      	b.n	800226e <HAL_I2C_Init+0x92>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a7d      	ldr	r2, [pc, #500]	; (8002458 <HAL_I2C_Init+0x27c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	bf94      	ite	ls
 8002268:	2301      	movls	r3, #1
 800226a:	2300      	movhi	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0e7      	b.n	8002446 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a78      	ldr	r2, [pc, #480]	; (800245c <HAL_I2C_Init+0x280>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0c9b      	lsrs	r3, r3, #18
 8002280:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a6a      	ldr	r2, [pc, #424]	; (8002450 <HAL_I2C_Init+0x274>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d802      	bhi.n	80022b0 <HAL_I2C_Init+0xd4>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3301      	adds	r3, #1
 80022ae:	e009      	b.n	80022c4 <HAL_I2C_Init+0xe8>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	4a69      	ldr	r2, [pc, #420]	; (8002460 <HAL_I2C_Init+0x284>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	3301      	adds	r3, #1
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	495c      	ldr	r1, [pc, #368]	; (8002450 <HAL_I2C_Init+0x274>)
 80022e0:	428b      	cmp	r3, r1
 80022e2:	d819      	bhi.n	8002318 <HAL_I2C_Init+0x13c>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1e59      	subs	r1, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f2:	1c59      	adds	r1, r3, #1
 80022f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022f8:	400b      	ands	r3, r1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_I2C_Init+0x138>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1e59      	subs	r1, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fbb1 f3f3 	udiv	r3, r1, r3
 800230c:	3301      	adds	r3, #1
 800230e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002312:	e051      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002314:	2304      	movs	r3, #4
 8002316:	e04f      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d111      	bne.n	8002344 <HAL_I2C_Init+0x168>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e58      	subs	r0, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf0c      	ite	eq
 800233c:	2301      	moveq	r3, #1
 800233e:	2300      	movne	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	e012      	b.n	800236a <HAL_I2C_Init+0x18e>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1e58      	subs	r0, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	0099      	lsls	r1, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	fbb0 f3f3 	udiv	r3, r0, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Init+0x196>
 800236e:	2301      	movs	r3, #1
 8002370:	e022      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10e      	bne.n	8002398 <HAL_I2C_Init+0x1bc>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1e58      	subs	r0, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	440b      	add	r3, r1
 8002388:	fbb0 f3f3 	udiv	r3, r0, r3
 800238c:	3301      	adds	r3, #1
 800238e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002396:	e00f      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1e58      	subs	r0, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	0099      	lsls	r1, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	6809      	ldr	r1, [r1, #0]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69da      	ldr	r2, [r3, #28]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6911      	ldr	r1, [r2, #16]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68d2      	ldr	r2, [r2, #12]
 80023f2:	4311      	orrs	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	000186a0 	.word	0x000186a0
 8002454:	001e847f 	.word	0x001e847f
 8002458:	003d08ff 	.word	0x003d08ff
 800245c:	431bde83 	.word	0x431bde83
 8002460:	10624dd3 	.word	0x10624dd3

08002464 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	461a      	mov	r2, r3
 8002470:	460b      	mov	r3, r1
 8002472:	817b      	strh	r3, [r7, #10]
 8002474:	4613      	mov	r3, r2
 8002476:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff f9e6 	bl	8001848 <HAL_GetTick>
 800247c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b20      	cmp	r3, #32
 8002488:	f040 80e0 	bne.w	800264c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2319      	movs	r3, #25
 8002492:	2201      	movs	r2, #1
 8002494:	4970      	ldr	r1, [pc, #448]	; (8002658 <HAL_I2C_Master_Transmit+0x1f4>)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f964 	bl	8002764 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
 80024a4:	e0d3      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_I2C_Master_Transmit+0x50>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e0cc      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ea>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d007      	beq.n	80024da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2221      	movs	r2, #33	; 0x21
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2210      	movs	r2, #16
 80024f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	893a      	ldrh	r2, [r7, #8]
 800250a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4a50      	ldr	r2, [pc, #320]	; (800265c <HAL_I2C_Master_Transmit+0x1f8>)
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800251c:	8979      	ldrh	r1, [r7, #10]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	6a3a      	ldr	r2, [r7, #32]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f89c 	bl	8002660 <I2C_MasterRequestWrite>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e08d      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002548:	e066      	b.n	8002618 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	6a39      	ldr	r1, [r7, #32]
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f9de 	bl	8002910 <I2C_WaitOnTXEFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00d      	beq.n	8002576 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	2b04      	cmp	r3, #4
 8002560:	d107      	bne.n	8002572 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002570:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e06b      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d11b      	bne.n	80025ec <HAL_I2C_Master_Transmit+0x188>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d017      	beq.n	80025ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	6a39      	ldr	r1, [r7, #32]
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 f9ce 	bl	8002992 <I2C_WaitOnBTFFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00d      	beq.n	8002618 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	2b04      	cmp	r3, #4
 8002602:	d107      	bne.n	8002614 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002612:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e01a      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	d194      	bne.n	800254a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	e000      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800264c:	2302      	movs	r3, #2
  }
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	00100002 	.word	0x00100002
 800265c:	ffff0000 	.word	0xffff0000

08002660 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	460b      	mov	r3, r1
 800266e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b08      	cmp	r3, #8
 800267a:	d006      	beq.n	800268a <I2C_MasterRequestWrite+0x2a>
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d003      	beq.n	800268a <I2C_MasterRequestWrite+0x2a>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002688:	d108      	bne.n	800269c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e00b      	b.n	80026b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	2b12      	cmp	r3, #18
 80026a2:	d107      	bne.n	80026b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f84f 	bl	8002764 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00d      	beq.n	80026e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026da:	d103      	bne.n	80026e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e035      	b.n	8002754 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026f0:	d108      	bne.n	8002704 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026f2:	897b      	ldrh	r3, [r7, #10]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002700:	611a      	str	r2, [r3, #16]
 8002702:	e01b      	b.n	800273c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002704:	897b      	ldrh	r3, [r7, #10]
 8002706:	11db      	asrs	r3, r3, #7
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f003 0306 	and.w	r3, r3, #6
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f063 030f 	orn	r3, r3, #15
 8002714:	b2da      	uxtb	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	490e      	ldr	r1, [pc, #56]	; (800275c <I2C_MasterRequestWrite+0xfc>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f875 	bl	8002812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e010      	b.n	8002754 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002732:	897b      	ldrh	r3, [r7, #10]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4907      	ldr	r1, [pc, #28]	; (8002760 <I2C_MasterRequestWrite+0x100>)
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f865 	bl	8002812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	00010008 	.word	0x00010008
 8002760:	00010002 	.word	0x00010002

08002764 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002774:	e025      	b.n	80027c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d021      	beq.n	80027c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277e:	f7ff f863 	bl	8001848 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <I2C_WaitOnFlagUntilTimeout+0x30>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d116      	bne.n	80027c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f043 0220 	orr.w	r2, r3, #32
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e023      	b.n	800280a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	0c1b      	lsrs	r3, r3, #16
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d10d      	bne.n	80027e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	43da      	mvns	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4013      	ands	r3, r2
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bf0c      	ite	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	2300      	movne	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	e00c      	b.n	8002802 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4013      	ands	r3, r2
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	429a      	cmp	r2, r3
 8002806:	d0b6      	beq.n	8002776 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002820:	e051      	b.n	80028c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002830:	d123      	bne.n	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002840:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800284a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0204 	orr.w	r2, r3, #4
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e046      	b.n	8002908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d021      	beq.n	80028c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002882:	f7fe ffe1 	bl	8001848 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	429a      	cmp	r2, r3
 8002890:	d302      	bcc.n	8002898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d116      	bne.n	80028c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f043 0220 	orr.w	r2, r3, #32
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e020      	b.n	8002908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10c      	bne.n	80028ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4013      	ands	r3, r2
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf14      	ite	ne
 80028e2:	2301      	movne	r3, #1
 80028e4:	2300      	moveq	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	e00b      	b.n	8002902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	43da      	mvns	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4013      	ands	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d18d      	bne.n	8002822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800291c:	e02d      	b.n	800297a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f878 	bl	8002a14 <I2C_IsAcknowledgeFailed>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e02d      	b.n	800298a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d021      	beq.n	800297a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002936:	f7fe ff87 	bl	8001848 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	429a      	cmp	r2, r3
 8002944:	d302      	bcc.n	800294c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d116      	bne.n	800297a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f043 0220 	orr.w	r2, r3, #32
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e007      	b.n	800298a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	2b80      	cmp	r3, #128	; 0x80
 8002986:	d1ca      	bne.n	800291e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800299e:	e02d      	b.n	80029fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f837 	bl	8002a14 <I2C_IsAcknowledgeFailed>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e02d      	b.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d021      	beq.n	80029fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b8:	f7fe ff46 	bl	8001848 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d302      	bcc.n	80029ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d116      	bne.n	80029fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f043 0220 	orr.w	r2, r3, #32
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e007      	b.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d1ca      	bne.n	80029a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2a:	d11b      	bne.n	8002a64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f043 0204 	orr.w	r2, r3, #4
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e272      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 8087 	beq.w	8002b9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a90:	4b92      	ldr	r3, [pc, #584]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a9c:	4b8f      	ldr	r3, [pc, #572]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d112      	bne.n	8002ace <HAL_RCC_OscConfig+0x5e>
 8002aa8:	4b8c      	ldr	r3, [pc, #560]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d10b      	bne.n	8002ace <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab6:	4b89      	ldr	r3, [pc, #548]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d06c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x12c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d168      	bne.n	8002b9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e24c      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x76>
 8002ad8:	4b80      	ldr	r3, [pc, #512]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a7f      	ldr	r2, [pc, #508]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	e02e      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x98>
 8002aee:	4b7b      	ldr	r3, [pc, #492]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a7a      	ldr	r2, [pc, #488]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b78      	ldr	r3, [pc, #480]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a77      	ldr	r2, [pc, #476]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e01d      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0xbc>
 8002b12:	4b72      	ldr	r3, [pc, #456]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a71      	ldr	r2, [pc, #452]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b6f      	ldr	r3, [pc, #444]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002b2c:	4b6b      	ldr	r3, [pc, #428]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6a      	ldr	r2, [pc, #424]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a67      	ldr	r2, [pc, #412]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fe7c 	bl	8001848 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7fe fe78 	bl	8001848 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e200      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b5d      	ldr	r3, [pc, #372]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0xe4>
 8002b72:	e014      	b.n	8002b9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fe68 	bl	8001848 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fe64 	bl	8001848 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1ec      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x10c>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d063      	beq.n	8002c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002baa:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bb6:	4b49      	ldr	r3, [pc, #292]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d11c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x18c>
 8002bc2:	4b46      	ldr	r3, [pc, #280]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x176>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e1c0      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4939      	ldr	r1, [pc, #228]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	e03a      	b.n	8002c72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c04:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fe1d 	bl	8001848 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fe fe19 	bl	8001848 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1a1      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4927      	ldr	r1, [pc, #156]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	e015      	b.n	8002c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fdfc 	bl	8001848 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c54:	f7fe fdf8 	bl	8001848 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e180      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d03a      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d019      	beq.n	8002cba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <HAL_RCC_OscConfig+0x274>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7fe fddc 	bl	8001848 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c94:	f7fe fdd8 	bl	8001848 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e160      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f000 fb08 	bl	80032c8 <RCC_Delay>
 8002cb8:	e01c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc0:	f7fe fdc2 	bl	8001848 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc6:	e00f      	b.n	8002ce8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7fe fdbe 	bl	8001848 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d908      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e146      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	42420000 	.word	0x42420000
 8002ce4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce8:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e9      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80a6 	beq.w	8002e4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d02:	2300      	movs	r3, #0
 8002d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d06:	4b8b      	ldr	r3, [pc, #556]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10d      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4a87      	ldr	r2, [pc, #540]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	61d3      	str	r3, [r2, #28]
 8002d1e:	4b85      	ldr	r3, [pc, #532]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2e:	4b82      	ldr	r3, [pc, #520]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d118      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3a:	4b7f      	ldr	r3, [pc, #508]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7e      	ldr	r2, [pc, #504]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d46:	f7fe fd7f 	bl	8001848 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7fe fd7b 	bl	8001848 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b64      	cmp	r3, #100	; 0x64
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e103      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	4b75      	ldr	r3, [pc, #468]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x312>
 8002d74:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	e02d      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x334>
 8002d8a:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a69      	ldr	r2, [pc, #420]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a66      	ldr	r2, [pc, #408]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	6213      	str	r3, [r2, #32]
 8002da2:	e01c      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d10c      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x356>
 8002dac:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4a60      	ldr	r2, [pc, #384]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	6213      	str	r3, [r2, #32]
 8002db8:	4b5e      	ldr	r3, [pc, #376]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a5d      	ldr	r2, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6213      	str	r3, [r2, #32]
 8002dc4:	e00b      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002dc6:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a5a      	ldr	r2, [pc, #360]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a57      	ldr	r2, [pc, #348]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d015      	beq.n	8002e12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7fe fd2f 	bl	8001848 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fe fd2b 	bl	8001848 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e0b1      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e04:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ee      	beq.n	8002dee <HAL_RCC_OscConfig+0x37e>
 8002e10:	e014      	b.n	8002e3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e12:	f7fe fd19 	bl	8001848 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fe fd15 	bl	8001848 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e09b      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e30:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ee      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d105      	bne.n	8002e4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e42:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4a3b      	ldr	r2, [pc, #236]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8087 	beq.w	8002f66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d061      	beq.n	8002f28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d146      	bne.n	8002efa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6c:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fe fce9 	bl	8001848 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe fce5 	bl	8001848 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e06d      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8c:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	d108      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4921      	ldr	r1, [pc, #132]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a19      	ldr	r1, [r3, #32]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	491b      	ldr	r1, [pc, #108]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fcb9 	bl	8001848 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fe fcb5 	bl	8001848 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e03d      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x46a>
 8002ef8:	e035      	b.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fca2 	bl	8001848 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe fc9e 	bl	8001848 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e026      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x498>
 8002f26:	e01e      	b.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d107      	bne.n	8002f40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e019      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x500>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000

08002f74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0d0      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b67      	ldr	r3, [pc, #412]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	4965      	ldr	r1, [pc, #404]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0b8      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd0:	4b59      	ldr	r3, [pc, #356]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ff2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	494d      	ldr	r1, [pc, #308]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d040      	beq.n	8003094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d115      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07f      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e073      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06b      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4936      	ldr	r1, [pc, #216]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003064:	f7fe fbf0 	bl	8001848 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe fbec 	bl	8001848 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e053      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d210      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	4922      	ldr	r1, [pc, #136]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e032      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4916      	ldr	r1, [pc, #88]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003102:	f000 f821 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8003106:	4602      	mov	r2, r0
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	490a      	ldr	r1, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	5ccb      	ldrb	r3, [r1, r3]
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1cc>)
 800311c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1d0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd fb74 	bl	8000810 <HAL_InitTick>

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40022000 	.word	0x40022000
 8003138:	40021000 	.word	0x40021000
 800313c:	08007618 	.word	0x08007618
 8003140:	2000003c 	.word	0x2000003c
 8003144:	200000c8 	.word	0x200000c8

08003148 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003148:	b490      	push	{r4, r7}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800314e:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003150:	1d3c      	adds	r4, r7, #4
 8003152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003158:	f240 2301 	movw	r3, #513	; 0x201
 800315c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	2300      	movs	r3, #0
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003172:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b04      	cmp	r3, #4
 8003180:	d002      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x40>
 8003182:	2b08      	cmp	r3, #8
 8003184:	d003      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x46>
 8003186:	e02b      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003188:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800318a:	623b      	str	r3, [r7, #32]
      break;
 800318c:	e02b      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	0c9b      	lsrs	r3, r3, #18
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	3328      	adds	r3, #40	; 0x28
 8003198:	443b      	add	r3, r7
 800319a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800319e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d012      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	0c5b      	lsrs	r3, r3, #17
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	3328      	adds	r3, #40	; 0x28
 80031b6:	443b      	add	r3, r7
 80031b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80031c2:	fb03 f202 	mul.w	r2, r3, r2
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
 80031ce:	e004      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	623b      	str	r3, [r7, #32]
      break;
 80031de:	e002      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80031e2:	623b      	str	r3, [r7, #32]
      break;
 80031e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e6:	6a3b      	ldr	r3, [r7, #32]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3728      	adds	r7, #40	; 0x28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc90      	pop	{r4, r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	08003a08 	.word	0x08003a08
 80031f8:	40021000 	.word	0x40021000
 80031fc:	007a1200 	.word	0x007a1200
 8003200:	003d0900 	.word	0x003d0900

08003204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003208:	4b02      	ldr	r3, [pc, #8]	; (8003214 <HAL_RCC_GetHCLKFreq+0x10>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	2000003c 	.word	0x2000003c

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800321c:	f7ff fff2 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4903      	ldr	r1, [pc, #12]	; (800323c <HAL_RCC_GetPCLK1Freq+0x24>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	08007628 	.word	0x08007628

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff ffde 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	0adb      	lsrs	r3, r3, #11
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	08007628 	.word	0x08007628

08003268 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	220f      	movs	r2, #15
 8003276:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003278:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <HAL_RCC_GetClockConfig+0x58>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0203 	and.w	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RCC_GetClockConfig+0x58>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_GetClockConfig+0x58>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800329c:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_RCC_GetClockConfig+0x58>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_GetClockConfig+0x5c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0207 	and.w	r2, r3, #7
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40022000 	.word	0x40022000

080032c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <RCC_Delay+0x34>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <RCC_Delay+0x38>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	0a5b      	lsrs	r3, r3, #9
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032e4:	bf00      	nop
  }
  while (Delay --);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e5a      	subs	r2, r3, #1
 80032ea:	60fa      	str	r2, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f9      	bne.n	80032e4 <RCC_Delay+0x1c>
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	2000003c 	.word	0x2000003c
 8003300:	10624dd3 	.word	0x10624dd3

08003304 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d07d      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003320:	2300      	movs	r3, #0
 8003322:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003324:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10d      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	4b4c      	ldr	r3, [pc, #304]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	4a4b      	ldr	r2, [pc, #300]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333a:	61d3      	str	r3, [r2, #28]
 800333c:	4b49      	ldr	r3, [pc, #292]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003348:	2301      	movs	r3, #1
 800334a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d118      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003358:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a42      	ldr	r2, [pc, #264]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003362:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003364:	f7fe fa70 	bl	8001848 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	e008      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336c:	f7fe fa6c 	bl	8001848 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e06d      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800338a:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003392:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d02e      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d027      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033a8:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033b2:	4b2e      	ldr	r3, [pc, #184]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033b8:	4b2c      	ldr	r3, [pc, #176]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033be:	4a29      	ldr	r2, [pc, #164]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d014      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fe fa3b 	bl	8001848 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fe fa37 	bl	8001848 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e036      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ee      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4917      	ldr	r1, [pc, #92]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003406:	4313      	orrs	r3, r2
 8003408:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	4a13      	ldr	r2, [pc, #76]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003428:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	490b      	ldr	r1, [pc, #44]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003446:	4b07      	ldr	r3, [pc, #28]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	4904      	ldr	r1, [pc, #16]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	40007000 	.word	0x40007000
 800346c:	42420440 	.word	0x42420440

08003470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e041      	b.n	8003506 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f839 	bl	800350e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f000 f9b4 	bl	800381c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	d001      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e03a      	b.n	80035ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <HAL_TIM_Base_Start_IT+0x98>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00e      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x58>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003562:	d009      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x58>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a14      	ldr	r2, [pc, #80]	; (80035bc <HAL_TIM_Base_Start_IT+0x9c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d004      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x58>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a13      	ldr	r2, [pc, #76]	; (80035c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d111      	bne.n	800359c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b06      	cmp	r3, #6
 8003588:	d010      	beq.n	80035ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359a:	e007      	b.n	80035ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40000800 	.word	0x40000800

080035c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d122      	bne.n	8003620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d11b      	bne.n	8003620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0202 	mvn.w	r2, #2
 80035f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f8ed 	bl	80037e6 <HAL_TIM_IC_CaptureCallback>
 800360c:	e005      	b.n	800361a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8e0 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f8ef 	bl	80037f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d122      	bne.n	8003674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d11b      	bne.n	8003674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0204 	mvn.w	r2, #4
 8003644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8c3 	bl	80037e6 <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8b6 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f8c5 	bl	80037f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b08      	cmp	r3, #8
 8003680:	d122      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b08      	cmp	r3, #8
 800368e:	d11b      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0208 	mvn.w	r2, #8
 8003698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2204      	movs	r2, #4
 800369e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f899 	bl	80037e6 <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f88c 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f89b 	bl	80037f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0210 	mvn.w	r2, #16
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2208      	movs	r2, #8
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f86f 	bl	80037e6 <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f862 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f871 	bl	80037f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d10e      	bne.n	8003748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0201 	mvn.w	r2, #1
 8003740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd f812 	bl	800076c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b80      	cmp	r3, #128	; 0x80
 8003754:	d10e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d107      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f8bf 	bl	80038f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f835 	bl	800380a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0220 	mvn.w	r2, #32
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f88a 	bl	80038e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr

080037e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a29      	ldr	r2, [pc, #164]	; (80038d4 <TIM_Base_SetConfig+0xb8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00b      	beq.n	800384c <TIM_Base_SetConfig+0x30>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383a:	d007      	beq.n	800384c <TIM_Base_SetConfig+0x30>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a26      	ldr	r2, [pc, #152]	; (80038d8 <TIM_Base_SetConfig+0xbc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_Base_SetConfig+0x30>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a25      	ldr	r2, [pc, #148]	; (80038dc <TIM_Base_SetConfig+0xc0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d108      	bne.n	800385e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <TIM_Base_SetConfig+0xb8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00b      	beq.n	800387e <TIM_Base_SetConfig+0x62>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d007      	beq.n	800387e <TIM_Base_SetConfig+0x62>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <TIM_Base_SetConfig+0xbc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d003      	beq.n	800387e <TIM_Base_SetConfig+0x62>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a18      	ldr	r2, [pc, #96]	; (80038dc <TIM_Base_SetConfig+0xc0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d108      	bne.n	8003890 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a07      	ldr	r2, [pc, #28]	; (80038d4 <TIM_Base_SetConfig+0xb8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d103      	bne.n	80038c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	615a      	str	r2, [r3, #20]
}
 80038ca:	bf00      	nop
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	40012c00 	.word	0x40012c00
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800

080038e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <__libc_init_array>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	2600      	movs	r6, #0
 8003908:	4d0c      	ldr	r5, [pc, #48]	; (800393c <__libc_init_array+0x38>)
 800390a:	4c0d      	ldr	r4, [pc, #52]	; (8003940 <__libc_init_array+0x3c>)
 800390c:	1b64      	subs	r4, r4, r5
 800390e:	10a4      	asrs	r4, r4, #2
 8003910:	42a6      	cmp	r6, r4
 8003912:	d109      	bne.n	8003928 <__libc_init_array+0x24>
 8003914:	f000 f830 	bl	8003978 <_init>
 8003918:	2600      	movs	r6, #0
 800391a:	4d0a      	ldr	r5, [pc, #40]	; (8003944 <__libc_init_array+0x40>)
 800391c:	4c0a      	ldr	r4, [pc, #40]	; (8003948 <__libc_init_array+0x44>)
 800391e:	1b64      	subs	r4, r4, r5
 8003920:	10a4      	asrs	r4, r4, #2
 8003922:	42a6      	cmp	r6, r4
 8003924:	d105      	bne.n	8003932 <__libc_init_array+0x2e>
 8003926:	bd70      	pop	{r4, r5, r6, pc}
 8003928:	f855 3b04 	ldr.w	r3, [r5], #4
 800392c:	4798      	blx	r3
 800392e:	3601      	adds	r6, #1
 8003930:	e7ee      	b.n	8003910 <__libc_init_array+0xc>
 8003932:	f855 3b04 	ldr.w	r3, [r5], #4
 8003936:	4798      	blx	r3
 8003938:	3601      	adds	r6, #1
 800393a:	e7f2      	b.n	8003922 <__libc_init_array+0x1e>
 800393c:	08007630 	.word	0x08007630
 8003940:	08007630 	.word	0x08007630
 8003944:	08007630 	.word	0x08007630
 8003948:	08007634 	.word	0x08007634

0800394c <memcpy>:
 800394c:	440a      	add	r2, r1
 800394e:	4291      	cmp	r1, r2
 8003950:	f100 33ff 	add.w	r3, r0, #4294967295
 8003954:	d100      	bne.n	8003958 <memcpy+0xc>
 8003956:	4770      	bx	lr
 8003958:	b510      	push	{r4, lr}
 800395a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800395e:	4291      	cmp	r1, r2
 8003960:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003964:	d1f9      	bne.n	800395a <memcpy+0xe>
 8003966:	bd10      	pop	{r4, pc}

08003968 <memset>:
 8003968:	4603      	mov	r3, r0
 800396a:	4402      	add	r2, r0
 800396c:	4293      	cmp	r3, r2
 800396e:	d100      	bne.n	8003972 <memset+0xa>
 8003970:	4770      	bx	lr
 8003972:	f803 1b01 	strb.w	r1, [r3], #1
 8003976:	e7f9      	b.n	800396c <memset+0x4>

08003978 <_init>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	bf00      	nop
 800397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397e:	bc08      	pop	{r3}
 8003980:	469e      	mov	lr, r3
 8003982:	4770      	bx	lr

08003984 <_fini>:
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	bf00      	nop
 8003988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398a:	bc08      	pop	{r3}
 800398c:	469e      	mov	lr, r3
 800398e:	4770      	bx	lr
