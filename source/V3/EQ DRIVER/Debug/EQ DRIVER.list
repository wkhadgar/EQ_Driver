
EQ DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003838  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ca0  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075e4  080075e4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  080075e4  080075e4  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075e4  080075e4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e4  080075e4  000175e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075e8  080075e8  000175e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080075ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  200000d0  080076bc  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  080076bc  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f482  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d9  00000000  00000000  0002f57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00031c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00032b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182f5  00000000  00000000  000339b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b59  00000000  00000000  0004bcad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3a0  00000000  00000000  0005e806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edba6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f30  00000000  00000000  000edbf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800392c 	.word	0x0800392c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	0800392c 	.word	0x0800392c

0800014c <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC2_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC2_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC2_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC2_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC2_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC2_Init+0x74>)
 800018a:	f001 fb65 	bl	8001858 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fad6 	bl	8000744 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000198:	2300      	movs	r3, #0
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC2_Init+0x74>)
 80001aa:	f001 fc2d 	bl	8001a08 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fac6 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	200000ec 	.word	0x200000ec
 80001c4:	40012800 	.word	0x40012800

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC2)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0-WKUP     ------> ADC2_IN0
    */
    GPIO_InitStruct.Pin = V_BATTERY_Pin;
 8000218:	2301      	movs	r3, #1
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_BATTERY_GPIO_Port, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f001 fe08 	bl	8001e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012800 	.word	0x40012800
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0310 	add.w	r3, r7, #16
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000254:	4b4e      	ldr	r3, [pc, #312]	; (8000390 <MX_GPIO_Init+0x150>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a4d      	ldr	r2, [pc, #308]	; (8000390 <MX_GPIO_Init+0x150>)
 800025a:	f043 0310 	orr.w	r3, r3, #16
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b4b      	ldr	r3, [pc, #300]	; (8000390 <MX_GPIO_Init+0x150>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0310 	and.w	r3, r3, #16
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800026c:	4b48      	ldr	r3, [pc, #288]	; (8000390 <MX_GPIO_Init+0x150>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a47      	ldr	r2, [pc, #284]	; (8000390 <MX_GPIO_Init+0x150>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b45      	ldr	r3, [pc, #276]	; (8000390 <MX_GPIO_Init+0x150>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0320 	and.w	r3, r3, #32
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000284:	4b42      	ldr	r3, [pc, #264]	; (8000390 <MX_GPIO_Init+0x150>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a41      	ldr	r2, [pc, #260]	; (8000390 <MX_GPIO_Init+0x150>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b3f      	ldr	r3, [pc, #252]	; (8000390 <MX_GPIO_Init+0x150>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0304 	and.w	r3, r3, #4
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029c:	4b3c      	ldr	r3, [pc, #240]	; (8000390 <MX_GPIO_Init+0x150>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a3b      	ldr	r2, [pc, #236]	; (8000390 <MX_GPIO_Init+0x150>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b39      	ldr	r3, [pc, #228]	; (8000390 <MX_GPIO_Init+0x150>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0308 	and.w	r3, r3, #8
 80002b0:	603b      	str	r3, [r7, #0]
 80002b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M1_STEP_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	21e0      	movs	r1, #224	; 0xe0
 80002b8:	4836      	ldr	r0, [pc, #216]	; (8000394 <MX_GPIO_Init+0x154>)
 80002ba:	f001 ff43 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_STEP_GPIO_Port, M2_STEP_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	2101      	movs	r1, #1
 80002c2:	4835      	ldr	r0, [pc, #212]	; (8000398 <MX_GPIO_Init+0x158>)
 80002c4:	f001 ff3e 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80002c8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80002cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ce:	2303      	movs	r3, #3
 80002d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	4619      	mov	r1, r3
 80002d8:	4830      	ldr	r0, [pc, #192]	; (800039c <MX_GPIO_Init+0x15c>)
 80002da:	f001 fdaf 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80002de:	f649 731e 	movw	r3, #40734	; 0x9f1e
 80002e2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e4:	2303      	movs	r3, #3
 80002e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e8:	f107 0310 	add.w	r3, r7, #16
 80002ec:	4619      	mov	r1, r3
 80002ee:	4829      	ldr	r0, [pc, #164]	; (8000394 <MX_GPIO_Init+0x154>)
 80002f0:	f001 fda4 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M1_STEP_Pin|M2_DIR_Pin;
 80002f4:	23e0      	movs	r3, #224	; 0xe0
 80002f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2302      	movs	r3, #2
 8000302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	4619      	mov	r1, r3
 800030a:	4822      	ldr	r0, [pc, #136]	; (8000394 <MX_GPIO_Init+0x154>)
 800030c:	f001 fd96 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_STEP_Pin;
 8000310:	2301      	movs	r3, #1
 8000312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	2301      	movs	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	2300      	movs	r3, #0
 800031a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031c:	2302      	movs	r3, #2
 800031e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_STEP_GPIO_Port, &GPIO_InitStruct);
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	4619      	mov	r1, r3
 8000326:	481c      	ldr	r0, [pc, #112]	; (8000398 <MX_GPIO_Init+0x158>)
 8000328:	f001 fd88 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800032c:	f648 733e 	movw	r3, #36670	; 0x8f3e
 8000330:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000332:	2303      	movs	r3, #3
 8000334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	4816      	ldr	r0, [pc, #88]	; (8000398 <MX_GPIO_Init+0x158>)
 800033e:	f001 fd7d 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SELECT_Pin|ROTARY_TRIG_Pin;
 8000342:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_GPIO_Init+0x160>)
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034c:	2301      	movs	r3, #1
 800034e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	4810      	ldr	r0, [pc, #64]	; (8000398 <MX_GPIO_Init+0x158>)
 8000358:	f001 fd70 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROTARY_CLKW_Pin;
 800035c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROTARY_CLKW_GPIO_Port, &GPIO_InitStruct);
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	4619      	mov	r1, r3
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <MX_GPIO_Init+0x158>)
 8000372:	f001 fd63 	bl	8001e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2100      	movs	r1, #0
 800037a:	2028      	movs	r0, #40	; 0x28
 800037c:	f001 fd33 	bl	8001de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000380:	2028      	movs	r0, #40	; 0x28
 8000382:	f001 fd4c 	bl	8001e1e <HAL_NVIC_EnableIRQ>

}
 8000386:	bf00      	nop
 8000388:	3720      	adds	r7, #32
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	40010800 	.word	0x40010800
 8000398:	40010c00 	.word	0x40010c00
 800039c:	40011000 	.word	0x40011000
 80003a0:	10210000 	.word	0x10210000

080003a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003aa:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <MX_I2C1_Init+0x54>)
 80003ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003b0:	4a12      	ldr	r2, [pc, #72]	; (80003fc <MX_I2C1_Init+0x58>)
 80003b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 120;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003bc:	2278      	movs	r2, #120	; 0x78
 80003be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c8:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003dc:	2280      	movs	r2, #128	; 0x80
 80003de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <MX_I2C1_Init+0x50>)
 80003e2:	f001 fed5 	bl	8002190 <HAL_I2C_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003ec:	f000 f9aa 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	2000011c 	.word	0x2000011c
 80003f8:	40005400 	.word	0x40005400
 80003fc:	00061a80 	.word	0x00061a80

08000400 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b088      	sub	sp, #32
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <HAL_I2C_MspInit+0x70>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d123      	bne.n	8000468 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <HAL_I2C_MspInit+0x74>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a13      	ldr	r2, [pc, #76]	; (8000474 <HAL_I2C_MspInit+0x74>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <HAL_I2C_MspInit+0x74>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0308 	and.w	r3, r3, #8
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000438:	23c0      	movs	r3, #192	; 0xc0
 800043a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800043c:	2312      	movs	r3, #18
 800043e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000440:	2303      	movs	r3, #3
 8000442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	480b      	ldr	r0, [pc, #44]	; (8000478 <HAL_I2C_MspInit+0x78>)
 800044c:	f001 fcf6 	bl	8001e3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <HAL_I2C_MspInit+0x74>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	4a07      	ldr	r2, [pc, #28]	; (8000474 <HAL_I2C_MspInit+0x74>)
 8000456:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800045a:	61d3      	str	r3, [r2, #28]
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <HAL_I2C_MspInit+0x74>)
 800045e:	69db      	ldr	r3, [r3, #28]
 8000460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000468:	bf00      	nop
 800046a:	3720      	adds	r7, #32
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40005400 	.word	0x40005400
 8000474:	40021000 	.word	0x40021000
 8000478:	40010c00 	.word	0x40010c00

0800047c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ROTARY_TRIG_Pin) {
 8000486:	88fb      	ldrh	r3, [r7, #6]
 8000488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800048c:	d10c      	bne.n	80004a8 <HAL_GPIO_EXTI_Callback+0x2c>
    set_flag(rotary_triggered);
 800048e:	2001      	movs	r0, #1
 8000490:	f000 fa6c 	bl	800096c <set_flag>
    if (ROTARY_CLKW_GPIO_Port->IDR & ROTARY_CLKW_Pin)
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <HAL_GPIO_EXTI_Callback+0x44>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800049c:	2b00      	cmp	r3, #0
 800049e:	d00a      	beq.n	80004b6 <HAL_GPIO_EXTI_Callback+0x3a>
      set_flag(ccw);
 80004a0:	2002      	movs	r0, #2
 80004a2:	f000 fa63 	bl	800096c <set_flag>
  } else if (GPIO_Pin == SELECT_Pin) {
    set_flag(selected);
  }
}
 80004a6:	e006      	b.n	80004b6 <HAL_GPIO_EXTI_Callback+0x3a>
  } else if (GPIO_Pin == SELECT_Pin) {
 80004a8:	88fb      	ldrh	r3, [r7, #6]
 80004aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004ae:	d102      	bne.n	80004b6 <HAL_GPIO_EXTI_Callback+0x3a>
    set_flag(selected);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 fa5b 	bl	800096c <set_flag>
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40010c00 	.word	0x40010c00

080004c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b092      	sub	sp, #72	; 0x48
 80004c8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80004ca:	f001 f96f 	bl	80017ac <HAL_Init>
      brilho_tela,
      tempo_tela,
      save_configs,
      MENU_SIZE //must be the last value
  };
  const char* menu_str[] = {
 80004ce:	4b64      	ldr	r3, [pc, #400]	; (8000660 <main+0x19c>)
 80004d0:	f107 0410 	add.w	r4, r7, #16
 80004d4:	461d      	mov	r5, r3
 80004d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      "Modo manual",
      "Contraste",
      "Luz da tela",
      "Salvar configs"
  };
  uint16_t menu_op_value[MENU_SIZE] = {0};
 80004e2:	463b      	mov	r3, r7
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
  const uint8_t SCREEN_ROWS = 5;
 80004ee:	2305      	movs	r3, #5
 80004f0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

  uint32_t lock_value;

  uint32_t last_move_ticks = 0; // to track time passed in ms with HAL_GetTick()
 80004f4:	2300      	movs	r3, #0
 80004f6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t ra_last_tick = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	63fb      	str	r3, [r7, #60]	; 0x3c

  uint8_t actual_menu_top_row = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  uint8_t arrow_row = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  uint8_t current_selection;

  bool_t wake_flag     = False;
 8000508:	2300      	movs	r3, #0
 800050a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  bool_t select_pressed = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  bool_t sleeping = False;
 8000514:	2300      	movs	r3, #0
 8000516:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  bool_t on_menu = 1;
 800051a:	2301      	movs	r3, #1
 800051c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  bool_t low_battery_flag = False;
 8000520:	2300      	movs	r3, #0
 8000522:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  bool_t toggle_horse = False;
 8000526:	2300      	movs	r3, #0
 8000528:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  uint8_t frame = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  uint16_t rot_val = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	867b      	strh	r3, [r7, #50]	; 0x32


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f897 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f7ff fe81 	bl	8000240 <MX_GPIO_Init>
  MX_I2C1_Init();
 800053e:	f7ff ff31 	bl	80003a4 <MX_I2C1_Init>
  MX_ADC2_Init();
 8000542:	f7ff fe03 	bl	800014c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  SH1106_cleanInit();
 8000546:	f000 fb85 	bl	8000c54 <SH1106_cleanInit>
  uint16_t data_readed = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	863b      	strh	r3, [r7, #48]	; 0x30
  while (1) {
    /* USER CODE END WHILE */

	//data_readed = (DRx->DR1 << 16) >> 16;
    /* USER CODE BEGIN 3 */
    rot_val = incremented_var(rot_value, 0);
 800054e:	2100      	movs	r1, #0
 8000550:	2000      	movs	r0, #0
 8000552:	f000 fa3b 	bl	80009cc <incremented_var>
 8000556:	4603      	mov	r3, r0
 8000558:	867b      	strh	r3, [r7, #50]	; 0x32

    if (toggle_horse) {
 800055a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800055e:	2b00      	cmp	r3, #0
 8000560:	d017      	beq.n	8000592 <main+0xce>
      if (frame > 14)
 8000562:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000566:	2b0e      	cmp	r3, #14
 8000568:	d902      	bls.n	8000570 <main+0xac>
        frame = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      SH1106_drawBitmapFullscreen(horse_running[frame++]);
 8000570:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000574:	1c5a      	adds	r2, r3, #1
 8000576:	f887 2042 	strb.w	r2, [r7, #66]	; 0x42
 800057a:	461a      	mov	r2, r3
 800057c:	4b39      	ldr	r3, [pc, #228]	; (8000664 <main+0x1a0>)
 800057e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000582:	4618      	mov	r0, r3
 8000584:	f001 f8fe 	bl	8001784 <SH1106_drawBitmapFullscreen>
      SH1106_flush();
 8000588:	f000 fb30 	bl	8000bec <SH1106_flush>
      HAL_Delay(2);
 800058c:	2002      	movs	r0, #2
 800058e:	f001 f93f 	bl	8001810 <HAL_Delay>
    }

    SH1106_clear();
 8000592:	f000 fb09 	bl	8000ba8 <SH1106_clear>

    if (get_flag(rotary_triggered)) { // rotary encoder triggered
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fa08 	bl	80009ac <get_flag>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d02d      	beq.n	80005fe <main+0x13a>
      reset_flag(rotary_triggered);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f000 f9f2 	bl	800098c <reset_flag>
      if ((TICKS_NOW - last_move_ticks) >= ROT_DEBOUNCE_DELAY_MS) {
 80005a8:	f001 f928 	bl	80017fc <HAL_GetTick>
 80005ac:	4602      	mov	r2, r0
 80005ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	2b09      	cmp	r3, #9
 80005b4:	d946      	bls.n	8000644 <main+0x180>

        set_flag(update_display);
 80005b6:	2003      	movs	r0, #3
 80005b8:	f000 f9d8 	bl	800096c <set_flag>
        // digitalToggle(OUT_RA_DIR);

        if (get_flag(ccw)) {
 80005bc:	2002      	movs	r0, #2
 80005be:	f000 f9f5 	bl	80009ac <get_flag>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00b      	beq.n	80005e0 <main+0x11c>
          reset_flag(ccw);
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 f9df 	bl	800098c <reset_flag>

          if (rot_val > 0) {
 80005ce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d009      	beq.n	80005e8 <main+0x124>
            incremented_var(rot_value, -1);
 80005d4:	f04f 31ff 	mov.w	r1, #4294967295
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 f9f7 	bl	80009cc <incremented_var>
 80005de:	e003      	b.n	80005e8 <main+0x124>
          }
        } else { // clockwise rotation
          incremented_var(rot_value, 1);
 80005e0:	2101      	movs	r1, #1
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f9f2 	bl	80009cc <incremented_var>
        }
        SH1106_drawCircle(63, 31, rot_val);
 80005e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	461a      	mov	r2, r3
 80005ee:	211f      	movs	r1, #31
 80005f0:	203f      	movs	r0, #63	; 0x3f
 80005f2:	f000 fb3d 	bl	8000c70 <SH1106_drawCircle>

        last_move_ticks = TICKS_NOW;
 80005f6:	f001 f901 	bl	80017fc <HAL_GetTick>
 80005fa:	6478      	str	r0, [r7, #68]	; 0x44
 80005fc:	e022      	b.n	8000644 <main+0x180>
      }
    }

    else if (get_flag(selected)) { // rotary encoder trigged
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 f9d4 	bl	80009ac <get_flag>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d01c      	beq.n	8000644 <main+0x180>
      reset_flag(selected);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 f9be 	bl	800098c <reset_flag>
      if ((TICKS_NOW - last_move_ticks) >= PUSH_DEBOUNCE_DELAY_MS) {
 8000610:	f001 f8f4 	bl	80017fc <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800061e:	d311      	bcc.n	8000644 <main+0x180>

        SH1106_setContrast(255);
 8000620:	20ff      	movs	r0, #255	; 0xff
 8000622:	f000 fa9f 	bl	8000b64 <SH1106_setContrast>
        set_flag(update_display);
 8000626:	2003      	movs	r0, #3
 8000628:	f000 f9a0 	bl	800096c <set_flag>
        toggle_horse = !toggle_horse;
 800062c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf0c      	ite	eq
 8000634:	2301      	moveq	r3, #1
 8000636:	2300      	movne	r3, #0
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

        //DRx->DR1 &= ~0b1010;

        last_move_ticks = TICKS_NOW;
 800063e:	f001 f8dd 	bl	80017fc <HAL_GetTick>
 8000642:	6478      	str	r0, [r7, #68]	; 0x44
      }
    }

    if (get_flag(update_display)) {
 8000644:	2003      	movs	r0, #3
 8000646:	f000 f9b1 	bl	80009ac <get_flag>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	f43f af7e 	beq.w	800054e <main+0x8a>
      reset_flag(update_display);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 f99a 	bl	800098c <reset_flag>
      SH1106_flush();
 8000658:	f000 fac8 	bl	8000bec <SH1106_flush>
    rot_val = incremented_var(rot_value, 0);
 800065c:	e777      	b.n	800054e <main+0x8a>
 800065e:	bf00      	nop
 8000660:	0800399c 	.word	0x0800399c
 8000664:	20000000 	.word	0x20000000

08000668 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000672:	2228      	movs	r2, #40	; 0x28
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 f950 	bl	800391c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 f9b0 	bl	8002a24 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x66>
    Error_Handler();
 80006ca:	f000 f83b 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80006ce:	230f      	movs	r3, #15
 80006d0:	617b      	str	r3, [r7, #20]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2102      	movs	r1, #2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fc1c 	bl	8002f28 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x92>
    Error_Handler();
 80006f6:	f000 f825 	bl	8000744 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006fa:	2302      	movs	r3, #2
 80006fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000702:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fdd6 	bl	80032b8 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xae>
    Error_Handler();
 8000712:	f000 f817 	bl	8000744 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d101      	bne.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000732:	f001 f851 	bl	80017d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40012c00 	.word	0x40012c00

08000744 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <HAL_MspInit+0x6c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <HAL_MspInit+0x6c>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6193      	str	r3, [r2, #24]
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <HAL_MspInit+0x6c>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <HAL_MspInit+0x6c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <HAL_MspInit+0x6c>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_MspInit+0x6c>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2005      	movs	r0, #5
 800078c:	f001 fb2b 	bl	8001de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000790:	2005      	movs	r0, #5
 8000792:	f001 fb44 	bl	8001e1e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_MspInit+0x70>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <HAL_MspInit+0x70>)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40010000 	.word	0x40010000

080007c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007da:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <HAL_InitTick+0xd0>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a2d      	ldr	r2, [pc, #180]	; (8000894 <HAL_InitTick+0xd0>)
 80007e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <HAL_InitTick+0xd0>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007f2:	f107 020c 	add.w	r2, r7, #12
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fd0d 	bl	800321c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000802:	f002 fcf7 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8000806:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800080a:	4a23      	ldr	r2, [pc, #140]	; (8000898 <HAL_InitTick+0xd4>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	0c9b      	lsrs	r3, r3, #18
 8000812:	3b01      	subs	r3, #1
 8000814:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000816:	4b21      	ldr	r3, [pc, #132]	; (800089c <HAL_InitTick+0xd8>)
 8000818:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <HAL_InitTick+0xdc>)
 800081a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <HAL_InitTick+0xd8>)
 800081e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000822:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000824:	4a1d      	ldr	r2, [pc, #116]	; (800089c <HAL_InitTick+0xd8>)
 8000826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000828:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <HAL_InitTick+0xd8>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <HAL_InitTick+0xd8>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <HAL_InitTick+0xd8>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800083c:	4817      	ldr	r0, [pc, #92]	; (800089c <HAL_InitTick+0xd8>)
 800083e:	f002 fdf1 	bl	8003424 <HAL_TIM_Base_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800084c:	2b00      	cmp	r3, #0
 800084e:	d11b      	bne.n	8000888 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <HAL_InitTick+0xd8>)
 8000852:	f002 fe3f 	bl	80034d4 <HAL_TIM_Base_Start_IT>
 8000856:	4603      	mov	r3, r0
 8000858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800085c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000860:	2b00      	cmp	r3, #0
 8000862:	d111      	bne.n	8000888 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000864:	2019      	movs	r0, #25
 8000866:	f001 fada 	bl	8001e1e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b0f      	cmp	r3, #15
 800086e:	d808      	bhi.n	8000882 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000870:	2200      	movs	r2, #0
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	2019      	movs	r0, #25
 8000876:	f001 fab6 	bl	8001de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_InitTick+0xe0>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	e002      	b.n	8000888 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800088c:	4618      	mov	r0, r3
 800088e:	3730      	adds	r7, #48	; 0x30
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	431bde83 	.word	0x431bde83
 800089c:	20000170 	.word	0x20000170
 80008a0:	40012c00 	.word	0x40012c00
 80008a4:	200000c8 	.word	0x200000c8

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
	...

08000904 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM1_UP_IRQHandler+0x10>)
 800090a:	f002 fe35 	bl	8003578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000170 	.word	0x20000170

08000918 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (EXTI->PR & SELECT_Pin) {
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <EXTI15_10_IRQHandler+0x44>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000924:	2b00      	cmp	r3, #0
 8000926:	d008      	beq.n	800093a <EXTI15_10_IRQHandler+0x22>
		/* Clear bit */
		EXTI->PR = SELECT_Pin;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <EXTI15_10_IRQHandler+0x44>)
 800092a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800092e:	615a      	str	r2, [r3, #20]
		/* Call global function */
		HAL_GPIO_EXTI_IRQHandler(SELECT_Pin);
 8000930:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000934:	f001 fc1e 	bl	8002174 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000938:	e00d      	b.n	8000956 <EXTI15_10_IRQHandler+0x3e>
	else if (EXTI->PR & ROTARY_TRIG_Pin) {
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <EXTI15_10_IRQHandler+0x44>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	2b00      	cmp	r3, #0
 8000944:	d007      	beq.n	8000956 <EXTI15_10_IRQHandler+0x3e>
		EXTI->PR = ROTARY_TRIG_Pin;
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <EXTI15_10_IRQHandler+0x44>)
 8000948:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800094c:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_IRQHandler(ROTARY_TRIG_Pin);
 800094e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000952:	f001 fc0f 	bl	8002174 <HAL_GPIO_EXTI_IRQHandler>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40010400 	.word	0x40010400

08000960 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <set_flag>:
#include "variables.h"

void set_flag(bool_var_t bool_var) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	boolVariables[bool_var] = 1;
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a03      	ldr	r2, [pc, #12]	; (8000988 <set_flag+0x1c>)
 800097a:	2101      	movs	r1, #1
 800097c:	54d1      	strb	r1, [r2, r3]
	return;
 800097e:	bf00      	nop
}
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	200001b8 	.word	0x200001b8

0800098c <reset_flag>:

void reset_flag(bool_var_t bool_var) {
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	boolVariables[bool_var] = 0;
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <reset_flag+0x1c>)
 800099a:	2100      	movs	r1, #0
 800099c:	54d1      	strb	r1, [r2, r3]
	return;
 800099e:	bf00      	nop
}
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	200001b8 	.word	0x200001b8

080009ac <get_flag>:

bool_t get_flag(bool_var_t bool_var) {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	return boolVariables[bool_var];
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4a03      	ldr	r2, [pc, #12]	; (80009c8 <get_flag+0x1c>)
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	b2db      	uxtb	r3, r3
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	200001b8 	.word	0x200001b8

080009cc <incremented_var>:

int incremented_var(int_var_t int_var, int8_t increment) {
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	460a      	mov	r2, r1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4613      	mov	r3, r2
 80009da:	71bb      	strb	r3, [r7, #6]
	return (intVariables[int_var] += increment);
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	4a07      	ldr	r2, [pc, #28]	; (80009fc <incremented_var+0x30>)
 80009e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80009e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009e8:	79fa      	ldrb	r2, [r7, #7]
 80009ea:	440b      	add	r3, r1
 80009ec:	4903      	ldr	r1, [pc, #12]	; (80009fc <incremented_var+0x30>)
 80009ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	200001bc 	.word	0x200001bc

08000a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	; (8000a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	; (8000a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a26:	f7ff ff9b 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f002 ff45 	bl	80038b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2e:	f7ff fd49 	bl	80004c4 <main>
  bx lr
 8000a32:	4770      	bx	lr
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8000a3c:	080075ec 	.word	0x080075ec
  ldr r2, =_sbss
 8000a40:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8000a44:	20000648 	.word	0x20000648

08000a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_2_IRQHandler>
	...

08000a4c <SH1106_cmd>:
		{ 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

// Send single byte command to display
// input:
//   cmd - display command
static void SH1106_cmd(uint8_t cmd) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	// Send command to display
	uint8_t command[] = {0x00, cmd};
 8000a56:	2300      	movs	r3, #0
 8000a58:	733b      	strb	r3, [r7, #12]
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, command,
 8000a5e:	f107 020c 	add.w	r2, r7, #12
 8000a62:	230a      	movs	r3, #10
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2302      	movs	r3, #2
 8000a68:	2178      	movs	r1, #120	; 0x78
 8000a6a:	4803      	ldr	r0, [pc, #12]	; (8000a78 <SH1106_cmd+0x2c>)
 8000a6c:	f001 fcd4 	bl	8002418 <HAL_I2C_Master_Transmit>
			sizeof(command), 10);
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000011c 	.word	0x2000011c

08000a7c <SH1106_data>:

// Send double byte command to display
// input:
//   data - page buffer data with 0x40 blocks
//   num_bytes - number of bytes to display in the page
static void SH1106_data(uint8_t* data, uint8_t num_bytes) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af02      	add	r7, sp, #8
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]
	// Send double byte command to display
	HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, data,
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	220a      	movs	r2, #10
 8000a8e:	9200      	str	r2, [sp, #0]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	2178      	movs	r1, #120	; 0x78
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <SH1106_data+0x28>)
 8000a96:	f001 fcbf 	bl	8002418 <HAL_I2C_Master_Transmit>
			num_bytes, 10);
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000011c 	.word	0x2000011c

08000aa8 <SH1106_Init>:

// Initialize SDA peripheral and SH1106 display
// note: SDA peripheral must be initialized before
void SH1106_Init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	// Initial display configuration
	HAL_Delay(100);
 8000aac:	2064      	movs	r0, #100	; 0x64
 8000aae:	f000 feaf 	bl	8001810 <HAL_Delay>

	SH1106_cmd(SH1106_CMD_DISP_OFF);
 8000ab2:	20ae      	movs	r0, #174	; 0xae
 8000ab4:	f7ff ffca 	bl	8000a4c <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_COL_LOW);
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f7ff ffc7 	bl	8000a4c <SH1106_cmd>
	SH1106_cmd(SH1106_CMD_COL_HIGH);
 8000abe:	2010      	movs	r0, #16
 8000ac0:	f7ff ffc4 	bl	8000a4c <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_STARTLINE);
 8000ac4:	2040      	movs	r0, #64	; 0x40
 8000ac6:	f7ff ffc1 	bl	8000a4c <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_PAGE_ADDR);
 8000aca:	20b0      	movs	r0, #176	; 0xb0
 8000acc:	f7ff ffbe 	bl	8000a4c <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_CONTRAST);
 8000ad0:	2081      	movs	r0, #129	; 0x81
 8000ad2:	f7ff ffbb 	bl	8000a4c <SH1106_cmd>
	SH1106_cmd(0x00); // 0x00...0xff
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff ffb8 	bl	8000a4c <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SEG_NORM + 1);
 8000adc:	20a1      	movs	r0, #161	; 0xa1
 8000ade:	f7ff ffb5 	bl	8000a4c <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_EDOFF); // Display follows RAM content
 8000ae2:	20a4      	movs	r0, #164	; 0xa4
 8000ae4:	f7ff ffb2 	bl	8000a4c <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_INV_OFF); // Normal display mode
 8000ae8:	20a6      	movs	r0, #166	; 0xa6
 8000aea:	f7ff ffaf 	bl	8000a4c <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SETMUX);
 8000aee:	20a8      	movs	r0, #168	; 0xa8
 8000af0:	f7ff ffac 	bl	8000a4c <SH1106_cmd>
	SH1106_cmd(0x3F); // 63 -> 64mux
 8000af4:	203f      	movs	r0, #63	; 0x3f
 8000af6:	f7ff ffa9 	bl	8000a4c <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_DC_DC_SET);
 8000afa:	20ad      	movs	r0, #173	; 0xad
 8000afc:	f7ff ffa6 	bl	8000a4c <SH1106_cmd>
	SH1106_cmd(0x8B); // on
 8000b00:	208b      	movs	r0, #139	; 0x8b
 8000b02:	f7ff ffa3 	bl	8000a4c <SH1106_cmd>
	SH1106_cmd(0x32); // 8v
 8000b06:	2032      	movs	r0, #50	; 0x32
 8000b08:	f7ff ffa0 	bl	8000a4c <SH1106_cmd>


	SH1106_cmd(SH1106_CMD_COM_INV);
 8000b0c:	20c8      	movs	r0, #200	; 0xc8
 8000b0e:	f7ff ff9d 	bl	8000a4c <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SETOFFS);
 8000b12:	20d3      	movs	r0, #211	; 0xd3
 8000b14:	f7ff ff9a 	bl	8000a4c <SH1106_cmd>
	SH1106_cmd(0x00); // 0px
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff ff97 	bl	8000a4c <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_CLOCKDIV);
 8000b1e:	20d5      	movs	r0, #213	; 0xd5
 8000b20:	f7ff ff94 	bl	8000a4c <SH1106_cmd>
	SH1106_cmd(0xF0); // ~100Hz
 8000b24:	20f0      	movs	r0, #240	; 0xf0
 8000b26:	f7ff ff91 	bl	8000a4c <SH1106_cmd>

	SH1106_cmd(SH1106_CMD_SET_CHARGE);
 8000b2a:	20d9      	movs	r0, #217	; 0xd9
 8000b2c:	f7ff ff8e 	bl	8000a4c <SH1106_cmd>
	SH1106_cmd(0x2A); //4MSb are discharge ticks and 4LSb are pre charge ticks
 8000b30:	202a      	movs	r0, #42	; 0x2a
 8000b32:	f7ff ff8b 	bl	8000a4c <SH1106_cmd>
	// Set COM pins hardware configuration
	// bit[4]: reset - sequential COM pin configuration
	//         set   - alternative COM pin configuration (reset value)
	// bit[5]: reset - disable COM left/right remap (reset value)
	//         set   - enable COM left/right remap
	SH1106_cmd(SH1106_CMD_COM_HW);
 8000b36:	20da      	movs	r0, #218	; 0xda
 8000b38:	f7ff ff88 	bl	8000a4c <SH1106_cmd>
	SH1106_cmd(0x12);
 8000b3c:	2012      	movs	r0, #18
 8000b3e:	f7ff ff85 	bl	8000a4c <SH1106_cmd>

	SH1106_cmd(0xDB);
 8000b42:	20db      	movs	r0, #219	; 0xdb
 8000b44:	f7ff ff82 	bl	8000a4c <SH1106_cmd>
	SH1106_cmd(0x40);
 8000b48:	2040      	movs	r0, #64	; 0x40
 8000b4a:	f7ff ff7f 	bl	8000a4c <SH1106_cmd>

	HAL_Delay(100);
 8000b4e:	2064      	movs	r0, #100	; 0x64
 8000b50:	f000 fe5e 	bl	8001810 <HAL_Delay>

	SH1106_cmd(SH1106_CMD_DISP_ON); // Display enabled
 8000b54:	20af      	movs	r0, #175	; 0xaf
 8000b56:	f7ff ff79 	bl	8000a4c <SH1106_cmd>

	HAL_Delay(100);
 8000b5a:	2064      	movs	r0, #100	; 0x64
 8000b5c:	f000 fe58 	bl	8001810 <HAL_Delay>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <SH1106_setContrast>:

// set display contrast
// input:
//   contrast - new contrast value (0x00..0xff)
void SH1106_setContrast(uint8_t contrast) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	SH1106_cmd(SH1106_CMD_CONTRAST);
 8000b6e:	2081      	movs	r0, #129	; 0x81
 8000b70:	f7ff ff6c 	bl	8000a4c <SH1106_cmd>
	SH1106_cmd(contrast);
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff68 	bl	8000a4c <SH1106_cmd>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <SH1106_setAllPixelsOn>:
// set entire LCD pixels on or off
// input:
//   eon_state - new pixels state (one of SH1106_ENTIRE_PIXELS_XXX values)
// note: SH1106_ENTIRE_PIXELS_ON means what all pixels on display will be on
//       without regard of display memory contents
void SH1106_setAllPixelsOn(uint8_t eon_state) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	SH1106_cmd(eon_state ? SH1106_CMD_EDON : SH1106_CMD_EDOFF);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SH1106_setAllPixelsOn+0x14>
 8000b94:	23a5      	movs	r3, #165	; 0xa5
 8000b96:	e000      	b.n	8000b9a <SH1106_setAllPixelsOn+0x16>
 8000b98:	23a4      	movs	r3, #164	; 0xa4
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff56 	bl	8000a4c <SH1106_cmd>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <SH1106_clear>:
	// Store orientation
	scr_orientation = orientation;
}

// clear vRAM buffer
void SH1106_clear(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	uint8_t page;
	static uint8_t null_buff[SCR_W] = {0x00};
	for (page = 0; page < 8; page++)	{
 8000bae:	2300      	movs	r3, #0
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	e00e      	b.n	8000bd2 <SH1106_clear+0x2a>
		memcpy(vRAM + (page << 7), null_buff, SCR_W);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	01db      	lsls	r3, r3, #7
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <SH1106_clear+0x3c>)
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <SH1106_clear+0x40>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	f002 fe9a 	bl	8003900 <memcpy>
	for (page = 0; page < 8; page++)	{
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b07      	cmp	r3, #7
 8000bd6:	d9ed      	bls.n	8000bb4 <SH1106_clear+0xc>
	}
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200001c4 	.word	0x200001c4
 8000be8:	200005c4 	.word	0x200005c4

08000bec <SH1106_flush>:

// Send vRAM buffer into display
void SH1106_flush(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	uint8_t page;
	static uint8_t screen_buffer[SCR_W + 1] = {0x40};
	for (page = 0; page < 8; page++) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	71fb      	strb	r3, [r7, #7]
 8000bf6:	e01e      	b.n	8000c36 <SH1106_flush+0x4a>

		uint8_t* page_content = vRAM + (page << 7);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	01db      	lsls	r3, r3, #7
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <SH1106_flush+0x5c>)
 8000c00:	4413      	add	r3, r2
 8000c02:	603b      	str	r3, [r7, #0]
		memcpy(screen_buffer + 1, page_content, SCR_W);
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <SH1106_flush+0x60>)
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	6839      	ldr	r1, [r7, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 fe78 	bl	8003900 <memcpy>

		SH1106_cmd(SH1106_CMD_PAGE_ADDR + page);
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	3b50      	subs	r3, #80	; 0x50
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff18 	bl	8000a4c <SH1106_cmd>
		SH1106_cmd(SH1106_CMD_COL_LOW);
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f7ff ff15 	bl	8000a4c <SH1106_cmd>
		SH1106_cmd(SH1106_CMD_COL_HIGH);
 8000c22:	2010      	movs	r0, #16
 8000c24:	f7ff ff12 	bl	8000a4c <SH1106_cmd>

		SH1106_data(screen_buffer, sizeof(screen_buffer));
 8000c28:	2181      	movs	r1, #129	; 0x81
 8000c2a:	4809      	ldr	r0, [pc, #36]	; (8000c50 <SH1106_flush+0x64>)
 8000c2c:	f7ff ff26 	bl	8000a7c <SH1106_data>
	for (page = 0; page < 8; page++) {
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	3301      	adds	r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b07      	cmp	r3, #7
 8000c3a:	d9dd      	bls.n	8000bf8 <SH1106_flush+0xc>
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001c4 	.word	0x200001c4
 8000c4c:	20000045 	.word	0x20000045
 8000c50:	20000044 	.word	0x20000044

08000c54 <SH1106_cleanInit>:
		memcpy(vRAM + (page << 7), fill_buff, SCR_W);
	}
}

//init routine grouped in one function
void SH1106_cleanInit(void)	{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	SH1106_Init();
 8000c58:	f7ff ff26 	bl	8000aa8 <SH1106_Init>
	SH1106_setAllPixelsOn(0);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff ff91 	bl	8000b84 <SH1106_setAllPixelsOn>
	SH1106_clear();
 8000c62:	f7ff ffa1 	bl	8000ba8 <SH1106_clear>
	SH1106_flush();
 8000c66:	f7ff ffc1 	bl	8000bec <SH1106_flush>
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <SH1106_drawCircle>:

// Draw circle
// input:
//   x_,x_ - circle center coordinates
//   radius - circle radius
void SH1106_drawCircle(int16_t x_, int16_t y_, uint8_t radius) {
 8000c70:	b4b0      	push	{r4, r5, r7}
 8000c72:	b091      	sub	sp, #68	; 0x44
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	80bb      	strh	r3, [r7, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	70fb      	strb	r3, [r7, #3]
	int16_t err = 1 - radius;
 8000c82:	78fb      	ldrb	r3, [r7, #3]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	f1c3 0301 	rsb	r3, r3, #1
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	int16_t dx = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	87bb      	strh	r3, [r7, #60]	; 0x3c
	int16_t dy = -2 * radius;
 8000c92:	78fb      	ldrb	r3, [r7, #3]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	461a      	mov	r2, r3
 8000c98:	03d2      	lsls	r2, r2, #15
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	877b      	strh	r3, [r7, #58]	; 0x3a
	int16_t x = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	873b      	strh	r3, [r7, #56]	; 0x38
	int16_t y = radius;
 8000ca6:	78fb      	ldrb	r3, [r7, #3]
 8000ca8:	86fb      	strh	r3, [r7, #54]	; 0x36
	// Screen width and height for less calculations
	int16_t sh = scr_height - 1;
 8000caa:	4b8c      	ldr	r3, [pc, #560]	; (8000edc <SH1106_drawCircle+0x26c>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	86bb      	strh	r3, [r7, #52]	; 0x34
	int16_t sw = scr_width - 1;
 8000cb4:	4b8a      	ldr	r3, [pc, #552]	; (8000ee0 <SH1106_drawCircle+0x270>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	867b      	strh	r3, [r7, #50]	; 0x32

	while (x < y) {
 8000cbe:	e3cc      	b.n	800145a <SH1106_drawCircle+0x7ea>
		if (err >= 0) {
 8000cc0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0e      	blt.n	8000ce6 <SH1106_drawCircle+0x76>
			dy += 2;
 8000cc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000cca:	3302      	adds	r3, #2
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	877b      	strh	r3, [r7, #58]	; 0x3a
			err += dy;
 8000cd0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000cd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	87fb      	strh	r3, [r7, #62]	; 0x3e
			y--;
 8000cda:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		dx += 2;
 8000ce6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ce8:	3302      	adds	r3, #2
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	87bb      	strh	r3, [r7, #60]	; 0x3c
		err += dx + 1;
 8000cee:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000cf0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	87fb      	strh	r3, [r7, #62]	; 0x3e
		x++;
 8000cfc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	3301      	adds	r3, #1
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	873b      	strh	r3, [r7, #56]	; 0x38

		// Draw eight pixels of each octant
		if (x_ + x < sw) {
 8000d08:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d0c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000d10:	441a      	add	r2, r3
 8000d12:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8000d16:	429a      	cmp	r2, r3
 8000d18:	f280 80eb 	bge.w	8000ef2 <SH1106_drawCircle+0x282>
			if (y_ + y < sh)
 8000d1c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d20:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000d24:	441a      	add	r2, r3
 8000d26:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	da67      	bge.n	8000dfe <SH1106_drawCircle+0x18e>
				SH1106_pixel(x_ + x, y_ + y, SH1106_PixelMode);
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4413      	add	r3, r2
 8000d38:	b2d9      	uxtb	r1, r3
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4413      	add	r3, r2
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b67      	ldr	r3, [pc, #412]	; (8000ee4 <SH1106_drawCircle+0x274>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	f887 1031 	strb.w	r1, [r7, #49]	; 0x31
 8000d4e:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8000d52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (scr_orientation == SH1106_ORIENT_CW
 8000d56:	4b64      	ldr	r3, [pc, #400]	; (8000ee8 <SH1106_drawCircle+0x278>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d003      	beq.n	8000d66 <SH1106_drawCircle+0xf6>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8000d5e:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <SH1106_drawCircle+0x278>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d10d      	bne.n	8000d82 <SH1106_drawCircle+0x112>
		offset = ((x >> 3) << 7) + y;
 8000d66:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000d6a:	08db      	lsrs	r3, r3, #3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	01da      	lsls	r2, r3, #7
 8000d70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d74:	4413      	add	r3, r2
 8000d76:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8000d78:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000d7c:	f003 0507 	and.w	r5, r3, #7
 8000d80:	e00c      	b.n	8000d9c <SH1106_drawCircle+0x12c>
		offset = ((y >> 3) << 7) + x;
 8000d82:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	01da      	lsls	r2, r3, #7
 8000d8c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000d90:	4413      	add	r3, r2
 8000d92:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8000d94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d98:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8000d9c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8000da0:	d82c      	bhi.n	8000dfc <SH1106_drawCircle+0x18c>
	switch (Mode) {
 8000da2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d002      	beq.n	8000db0 <SH1106_drawCircle+0x140>
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d00e      	beq.n	8000dcc <SH1106_drawCircle+0x15c>
 8000dae:	e019      	b.n	8000de4 <SH1106_drawCircle+0x174>
		vRAM[offset] &= ~(1 << bpos);
 8000db0:	4b4e      	ldr	r3, [pc, #312]	; (8000eec <SH1106_drawCircle+0x27c>)
 8000db2:	5d1b      	ldrb	r3, [r3, r4]
 8000db4:	b25a      	sxtb	r2, r3
 8000db6:	2301      	movs	r3, #1
 8000db8:	40ab      	lsls	r3, r5
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b49      	ldr	r3, [pc, #292]	; (8000eec <SH1106_drawCircle+0x27c>)
 8000dc8:	551a      	strb	r2, [r3, r4]
		break;
 8000dca:	e018      	b.n	8000dfe <SH1106_drawCircle+0x18e>
		vRAM[offset] ^= (1 << bpos);
 8000dcc:	4b47      	ldr	r3, [pc, #284]	; (8000eec <SH1106_drawCircle+0x27c>)
 8000dce:	5d1b      	ldrb	r3, [r3, r4]
 8000dd0:	b25a      	sxtb	r2, r3
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	40ab      	lsls	r3, r5
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	4053      	eors	r3, r2
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b43      	ldr	r3, [pc, #268]	; (8000eec <SH1106_drawCircle+0x27c>)
 8000de0:	551a      	strb	r2, [r3, r4]
		break;
 8000de2:	e00c      	b.n	8000dfe <SH1106_drawCircle+0x18e>
		vRAM[offset] |= (1 << bpos);
 8000de4:	4b41      	ldr	r3, [pc, #260]	; (8000eec <SH1106_drawCircle+0x27c>)
 8000de6:	5d1b      	ldrb	r3, [r3, r4]
 8000de8:	b25a      	sxtb	r2, r3
 8000dea:	2301      	movs	r3, #1
 8000dec:	40ab      	lsls	r3, r5
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <SH1106_drawCircle+0x27c>)
 8000df8:	551a      	strb	r2, [r3, r4]
		break;
 8000dfa:	e000      	b.n	8000dfe <SH1106_drawCircle+0x18e>
		return;
 8000dfc:	bf00      	nop
			if (y_ - y > -1)
 8000dfe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e02:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db72      	blt.n	8000ef2 <SH1106_drawCircle+0x282>
				SH1106_pixel(x_ + x, y_ - y, SH1106_PixelMode);
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b2d9      	uxtb	r1, r3
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <SH1106_drawCircle+0x274>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	f887 102e 	strb.w	r1, [r7, #46]	; 0x2e
 8000e2c:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8000e30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	if (scr_orientation == SH1106_ORIENT_CW
 8000e34:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <SH1106_drawCircle+0x278>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d003      	beq.n	8000e44 <SH1106_drawCircle+0x1d4>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <SH1106_drawCircle+0x278>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d10d      	bne.n	8000e60 <SH1106_drawCircle+0x1f0>
		offset = ((x >> 3) << 7) + y;
 8000e44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	01da      	lsls	r2, r3, #7
 8000e4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e52:	4413      	add	r3, r2
 8000e54:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8000e56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e5a:	f003 0507 	and.w	r5, r3, #7
 8000e5e:	e00c      	b.n	8000e7a <SH1106_drawCircle+0x20a>
		offset = ((y >> 3) << 7) + x;
 8000e60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e64:	08db      	lsrs	r3, r3, #3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	01da      	lsls	r2, r3, #7
 8000e6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e6e:	4413      	add	r3, r2
 8000e70:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8000e72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e76:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8000e7a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8000e7e:	d837      	bhi.n	8000ef0 <SH1106_drawCircle+0x280>
	switch (Mode) {
 8000e80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d002      	beq.n	8000e8e <SH1106_drawCircle+0x21e>
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d00e      	beq.n	8000eaa <SH1106_drawCircle+0x23a>
 8000e8c:	e019      	b.n	8000ec2 <SH1106_drawCircle+0x252>
		vRAM[offset] &= ~(1 << bpos);
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <SH1106_drawCircle+0x27c>)
 8000e90:	5d1b      	ldrb	r3, [r3, r4]
 8000e92:	b25a      	sxtb	r2, r3
 8000e94:	2301      	movs	r3, #1
 8000e96:	40ab      	lsls	r3, r5
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <SH1106_drawCircle+0x27c>)
 8000ea6:	551a      	strb	r2, [r3, r4]
		break;
 8000ea8:	e023      	b.n	8000ef2 <SH1106_drawCircle+0x282>
		vRAM[offset] ^= (1 << bpos);
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <SH1106_drawCircle+0x27c>)
 8000eac:	5d1b      	ldrb	r3, [r3, r4]
 8000eae:	b25a      	sxtb	r2, r3
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	40ab      	lsls	r3, r5
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	4053      	eors	r3, r2
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <SH1106_drawCircle+0x27c>)
 8000ebe:	551a      	strb	r2, [r3, r4]
		break;
 8000ec0:	e017      	b.n	8000ef2 <SH1106_drawCircle+0x282>
		vRAM[offset] |= (1 << bpos);
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <SH1106_drawCircle+0x27c>)
 8000ec4:	5d1b      	ldrb	r3, [r3, r4]
 8000ec6:	b25a      	sxtb	r2, r3
 8000ec8:	2301      	movs	r3, #1
 8000eca:	40ab      	lsls	r3, r5
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <SH1106_drawCircle+0x27c>)
 8000ed6:	551a      	strb	r2, [r3, r4]
		break;
 8000ed8:	e00b      	b.n	8000ef2 <SH1106_drawCircle+0x282>
 8000eda:	bf00      	nop
 8000edc:	20000042 	.word	0x20000042
 8000ee0:	20000040 	.word	0x20000040
 8000ee4:	200001c0 	.word	0x200001c0
 8000ee8:	200001c1 	.word	0x200001c1
 8000eec:	200001c4 	.word	0x200001c4
		return;
 8000ef0:	bf00      	nop
		}
		if (x_ - x > -1) {
 8000ef2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ef6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f2c0 80e0 	blt.w	80010c2 <SH1106_drawCircle+0x452>
			if (y_ + y < sh)
 8000f02:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f06:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000f0a:	441a      	add	r2, r3
 8000f0c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000f10:	429a      	cmp	r2, r3
 8000f12:	da67      	bge.n	8000fe4 <SH1106_drawCircle+0x374>
				SH1106_pixel(x_ - x, y_ + y, SH1106_PixelMode);
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	b2d9      	uxtb	r1, r3
 8000f20:	88bb      	ldrh	r3, [r7, #4]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4413      	add	r3, r2
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4ba2      	ldr	r3, [pc, #648]	; (80011b8 <SH1106_drawCircle+0x548>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
 8000f34:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
 8000f38:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	if (scr_orientation == SH1106_ORIENT_CW
 8000f3c:	4b9f      	ldr	r3, [pc, #636]	; (80011bc <SH1106_drawCircle+0x54c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d003      	beq.n	8000f4c <SH1106_drawCircle+0x2dc>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8000f44:	4b9d      	ldr	r3, [pc, #628]	; (80011bc <SH1106_drawCircle+0x54c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d10d      	bne.n	8000f68 <SH1106_drawCircle+0x2f8>
		offset = ((x >> 3) << 7) + y;
 8000f4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	01da      	lsls	r2, r3, #7
 8000f56:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f5a:	4413      	add	r3, r2
 8000f5c:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8000f5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f62:	f003 0507 	and.w	r5, r3, #7
 8000f66:	e00c      	b.n	8000f82 <SH1106_drawCircle+0x312>
		offset = ((y >> 3) << 7) + x;
 8000f68:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f6c:	08db      	lsrs	r3, r3, #3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	01da      	lsls	r2, r3, #7
 8000f72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f76:	4413      	add	r3, r2
 8000f78:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8000f7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f7e:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8000f82:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8000f86:	d82c      	bhi.n	8000fe2 <SH1106_drawCircle+0x372>
	switch (Mode) {
 8000f88:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d002      	beq.n	8000f96 <SH1106_drawCircle+0x326>
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d00e      	beq.n	8000fb2 <SH1106_drawCircle+0x342>
 8000f94:	e019      	b.n	8000fca <SH1106_drawCircle+0x35a>
		vRAM[offset] &= ~(1 << bpos);
 8000f96:	4b8a      	ldr	r3, [pc, #552]	; (80011c0 <SH1106_drawCircle+0x550>)
 8000f98:	5d1b      	ldrb	r3, [r3, r4]
 8000f9a:	b25a      	sxtb	r2, r3
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	40ab      	lsls	r3, r5
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b84      	ldr	r3, [pc, #528]	; (80011c0 <SH1106_drawCircle+0x550>)
 8000fae:	551a      	strb	r2, [r3, r4]
		break;
 8000fb0:	e018      	b.n	8000fe4 <SH1106_drawCircle+0x374>
		vRAM[offset] ^= (1 << bpos);
 8000fb2:	4b83      	ldr	r3, [pc, #524]	; (80011c0 <SH1106_drawCircle+0x550>)
 8000fb4:	5d1b      	ldrb	r3, [r3, r4]
 8000fb6:	b25a      	sxtb	r2, r3
 8000fb8:	2301      	movs	r3, #1
 8000fba:	40ab      	lsls	r3, r5
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	4053      	eors	r3, r2
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b7e      	ldr	r3, [pc, #504]	; (80011c0 <SH1106_drawCircle+0x550>)
 8000fc6:	551a      	strb	r2, [r3, r4]
		break;
 8000fc8:	e00c      	b.n	8000fe4 <SH1106_drawCircle+0x374>
		vRAM[offset] |= (1 << bpos);
 8000fca:	4b7d      	ldr	r3, [pc, #500]	; (80011c0 <SH1106_drawCircle+0x550>)
 8000fcc:	5d1b      	ldrb	r3, [r3, r4]
 8000fce:	b25a      	sxtb	r2, r3
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	40ab      	lsls	r3, r5
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b78      	ldr	r3, [pc, #480]	; (80011c0 <SH1106_drawCircle+0x550>)
 8000fde:	551a      	strb	r2, [r3, r4]
		break;
 8000fe0:	e000      	b.n	8000fe4 <SH1106_drawCircle+0x374>
		return;
 8000fe2:	bf00      	nop
			if (y_ - y > -1)
 8000fe4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000fe8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db67      	blt.n	80010c2 <SH1106_drawCircle+0x452>
				SH1106_pixel(x_ - x, y_ - y, SH1106_PixelMode);
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	b2d9      	uxtb	r1, r3
 8000ffe:	88bb      	ldrh	r3, [r7, #4]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001004:	b2db      	uxtb	r3, r3
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b6b      	ldr	r3, [pc, #428]	; (80011b8 <SH1106_drawCircle+0x548>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
 8001012:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001016:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (scr_orientation == SH1106_ORIENT_CW
 800101a:	4b68      	ldr	r3, [pc, #416]	; (80011bc <SH1106_drawCircle+0x54c>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d003      	beq.n	800102a <SH1106_drawCircle+0x3ba>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001022:	4b66      	ldr	r3, [pc, #408]	; (80011bc <SH1106_drawCircle+0x54c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d10d      	bne.n	8001046 <SH1106_drawCircle+0x3d6>
		offset = ((x >> 3) << 7) + y;
 800102a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800102e:	08db      	lsrs	r3, r3, #3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	01da      	lsls	r2, r3, #7
 8001034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001038:	4413      	add	r3, r2
 800103a:	461c      	mov	r4, r3
		bpos = x & 0x07;
 800103c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001040:	f003 0507 	and.w	r5, r3, #7
 8001044:	e00c      	b.n	8001060 <SH1106_drawCircle+0x3f0>
		offset = ((y >> 3) << 7) + x;
 8001046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800104a:	08db      	lsrs	r3, r3, #3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	01da      	lsls	r2, r3, #7
 8001050:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001054:	4413      	add	r3, r2
 8001056:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800105c:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001060:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001064:	d82c      	bhi.n	80010c0 <SH1106_drawCircle+0x450>
	switch (Mode) {
 8001066:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800106a:	2b01      	cmp	r3, #1
 800106c:	d002      	beq.n	8001074 <SH1106_drawCircle+0x404>
 800106e:	2b02      	cmp	r3, #2
 8001070:	d00e      	beq.n	8001090 <SH1106_drawCircle+0x420>
 8001072:	e019      	b.n	80010a8 <SH1106_drawCircle+0x438>
		vRAM[offset] &= ~(1 << bpos);
 8001074:	4b52      	ldr	r3, [pc, #328]	; (80011c0 <SH1106_drawCircle+0x550>)
 8001076:	5d1b      	ldrb	r3, [r3, r4]
 8001078:	b25a      	sxtb	r2, r3
 800107a:	2301      	movs	r3, #1
 800107c:	40ab      	lsls	r3, r5
 800107e:	b25b      	sxtb	r3, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	b25b      	sxtb	r3, r3
 8001084:	4013      	ands	r3, r2
 8001086:	b25b      	sxtb	r3, r3
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <SH1106_drawCircle+0x550>)
 800108c:	551a      	strb	r2, [r3, r4]
		break;
 800108e:	e018      	b.n	80010c2 <SH1106_drawCircle+0x452>
		vRAM[offset] ^= (1 << bpos);
 8001090:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <SH1106_drawCircle+0x550>)
 8001092:	5d1b      	ldrb	r3, [r3, r4]
 8001094:	b25a      	sxtb	r2, r3
 8001096:	2301      	movs	r3, #1
 8001098:	40ab      	lsls	r3, r5
 800109a:	b25b      	sxtb	r3, r3
 800109c:	4053      	eors	r3, r2
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <SH1106_drawCircle+0x550>)
 80010a4:	551a      	strb	r2, [r3, r4]
		break;
 80010a6:	e00c      	b.n	80010c2 <SH1106_drawCircle+0x452>
		vRAM[offset] |= (1 << bpos);
 80010a8:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <SH1106_drawCircle+0x550>)
 80010aa:	5d1b      	ldrb	r3, [r3, r4]
 80010ac:	b25a      	sxtb	r2, r3
 80010ae:	2301      	movs	r3, #1
 80010b0:	40ab      	lsls	r3, r5
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <SH1106_drawCircle+0x550>)
 80010bc:	551a      	strb	r2, [r3, r4]
		break;
 80010be:	e000      	b.n	80010c2 <SH1106_drawCircle+0x452>
		return;
 80010c0:	bf00      	nop
		}
		if (x_ + y < sw) {
 80010c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010c6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80010ca:	441a      	add	r2, r3
 80010cc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f280 80e7 	bge.w	80012a4 <SH1106_drawCircle+0x634>
			if (y_ + x < sh)
 80010d6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010da:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80010de:	441a      	add	r2, r3
 80010e0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80010e4:	429a      	cmp	r2, r3
 80010e6:	da6e      	bge.n	80011c6 <SH1106_drawCircle+0x556>
				SH1106_pixel(x_ + y, y_ + x, SH1106_PixelMode);
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4413      	add	r3, r2
 80010f2:	b2d9      	uxtb	r1, r3
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <SH1106_drawCircle+0x548>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 8001108:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 800110c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (scr_orientation == SH1106_ORIENT_CW
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <SH1106_drawCircle+0x54c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d003      	beq.n	8001120 <SH1106_drawCircle+0x4b0>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <SH1106_drawCircle+0x54c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d10d      	bne.n	800113c <SH1106_drawCircle+0x4cc>
		offset = ((x >> 3) << 7) + y;
 8001120:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	01da      	lsls	r2, r3, #7
 800112a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800112e:	4413      	add	r3, r2
 8001130:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001132:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001136:	f003 0507 	and.w	r5, r3, #7
 800113a:	e00c      	b.n	8001156 <SH1106_drawCircle+0x4e6>
		offset = ((y >> 3) << 7) + x;
 800113c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	01da      	lsls	r2, r3, #7
 8001146:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800114a:	4413      	add	r3, r2
 800114c:	461c      	mov	r4, r3
		bpos = y & 0x07;
 800114e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001152:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001156:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800115a:	d833      	bhi.n	80011c4 <SH1106_drawCircle+0x554>
	switch (Mode) {
 800115c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001160:	2b01      	cmp	r3, #1
 8001162:	d002      	beq.n	800116a <SH1106_drawCircle+0x4fa>
 8001164:	2b02      	cmp	r3, #2
 8001166:	d00e      	beq.n	8001186 <SH1106_drawCircle+0x516>
 8001168:	e019      	b.n	800119e <SH1106_drawCircle+0x52e>
		vRAM[offset] &= ~(1 << bpos);
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <SH1106_drawCircle+0x550>)
 800116c:	5d1b      	ldrb	r3, [r3, r4]
 800116e:	b25a      	sxtb	r2, r3
 8001170:	2301      	movs	r3, #1
 8001172:	40ab      	lsls	r3, r5
 8001174:	b25b      	sxtb	r3, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	b25b      	sxtb	r3, r3
 800117a:	4013      	ands	r3, r2
 800117c:	b25b      	sxtb	r3, r3
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <SH1106_drawCircle+0x550>)
 8001182:	551a      	strb	r2, [r3, r4]
		break;
 8001184:	e01f      	b.n	80011c6 <SH1106_drawCircle+0x556>
		vRAM[offset] ^= (1 << bpos);
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <SH1106_drawCircle+0x550>)
 8001188:	5d1b      	ldrb	r3, [r3, r4]
 800118a:	b25a      	sxtb	r2, r3
 800118c:	2301      	movs	r3, #1
 800118e:	40ab      	lsls	r3, r5
 8001190:	b25b      	sxtb	r3, r3
 8001192:	4053      	eors	r3, r2
 8001194:	b25b      	sxtb	r3, r3
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <SH1106_drawCircle+0x550>)
 800119a:	551a      	strb	r2, [r3, r4]
		break;
 800119c:	e013      	b.n	80011c6 <SH1106_drawCircle+0x556>
		vRAM[offset] |= (1 << bpos);
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <SH1106_drawCircle+0x550>)
 80011a0:	5d1b      	ldrb	r3, [r3, r4]
 80011a2:	b25a      	sxtb	r2, r3
 80011a4:	2301      	movs	r3, #1
 80011a6:	40ab      	lsls	r3, r5
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <SH1106_drawCircle+0x550>)
 80011b2:	551a      	strb	r2, [r3, r4]
		break;
 80011b4:	e007      	b.n	80011c6 <SH1106_drawCircle+0x556>
 80011b6:	bf00      	nop
 80011b8:	200001c0 	.word	0x200001c0
 80011bc:	200001c1 	.word	0x200001c1
 80011c0:	200001c4 	.word	0x200001c4
		return;
 80011c4:	bf00      	nop
			if (y_ - x > -1)
 80011c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011ca:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db67      	blt.n	80012a4 <SH1106_drawCircle+0x634>
				SH1106_pixel(x_ + y, y_ - x, SH1106_PixelMode);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4413      	add	r3, r2
 80011de:	b2d9      	uxtb	r1, r3
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b97      	ldr	r3, [pc, #604]	; (800144c <SH1106_drawCircle+0x7dc>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
 80011f4:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 80011f8:	f887 3020 	strb.w	r3, [r7, #32]
	if (scr_orientation == SH1106_ORIENT_CW
 80011fc:	4b94      	ldr	r3, [pc, #592]	; (8001450 <SH1106_drawCircle+0x7e0>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d003      	beq.n	800120c <SH1106_drawCircle+0x59c>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001204:	4b92      	ldr	r3, [pc, #584]	; (8001450 <SH1106_drawCircle+0x7e0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d10d      	bne.n	8001228 <SH1106_drawCircle+0x5b8>
		offset = ((x >> 3) << 7) + y;
 800120c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001210:	08db      	lsrs	r3, r3, #3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	01da      	lsls	r2, r3, #7
 8001216:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800121a:	4413      	add	r3, r2
 800121c:	461c      	mov	r4, r3
		bpos = x & 0x07;
 800121e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001222:	f003 0507 	and.w	r5, r3, #7
 8001226:	e00c      	b.n	8001242 <SH1106_drawCircle+0x5d2>
		offset = ((y >> 3) << 7) + x;
 8001228:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800122c:	08db      	lsrs	r3, r3, #3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	01da      	lsls	r2, r3, #7
 8001232:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001236:	4413      	add	r3, r2
 8001238:	461c      	mov	r4, r3
		bpos = y & 0x07;
 800123a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800123e:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001242:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001246:	d82c      	bhi.n	80012a2 <SH1106_drawCircle+0x632>
	switch (Mode) {
 8001248:	f897 3020 	ldrb.w	r3, [r7, #32]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d002      	beq.n	8001256 <SH1106_drawCircle+0x5e6>
 8001250:	2b02      	cmp	r3, #2
 8001252:	d00e      	beq.n	8001272 <SH1106_drawCircle+0x602>
 8001254:	e019      	b.n	800128a <SH1106_drawCircle+0x61a>
		vRAM[offset] &= ~(1 << bpos);
 8001256:	4b7f      	ldr	r3, [pc, #508]	; (8001454 <SH1106_drawCircle+0x7e4>)
 8001258:	5d1b      	ldrb	r3, [r3, r4]
 800125a:	b25a      	sxtb	r2, r3
 800125c:	2301      	movs	r3, #1
 800125e:	40ab      	lsls	r3, r5
 8001260:	b25b      	sxtb	r3, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	b25b      	sxtb	r3, r3
 8001266:	4013      	ands	r3, r2
 8001268:	b25b      	sxtb	r3, r3
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b79      	ldr	r3, [pc, #484]	; (8001454 <SH1106_drawCircle+0x7e4>)
 800126e:	551a      	strb	r2, [r3, r4]
		break;
 8001270:	e018      	b.n	80012a4 <SH1106_drawCircle+0x634>
		vRAM[offset] ^= (1 << bpos);
 8001272:	4b78      	ldr	r3, [pc, #480]	; (8001454 <SH1106_drawCircle+0x7e4>)
 8001274:	5d1b      	ldrb	r3, [r3, r4]
 8001276:	b25a      	sxtb	r2, r3
 8001278:	2301      	movs	r3, #1
 800127a:	40ab      	lsls	r3, r5
 800127c:	b25b      	sxtb	r3, r3
 800127e:	4053      	eors	r3, r2
 8001280:	b25b      	sxtb	r3, r3
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b73      	ldr	r3, [pc, #460]	; (8001454 <SH1106_drawCircle+0x7e4>)
 8001286:	551a      	strb	r2, [r3, r4]
		break;
 8001288:	e00c      	b.n	80012a4 <SH1106_drawCircle+0x634>
		vRAM[offset] |= (1 << bpos);
 800128a:	4b72      	ldr	r3, [pc, #456]	; (8001454 <SH1106_drawCircle+0x7e4>)
 800128c:	5d1b      	ldrb	r3, [r3, r4]
 800128e:	b25a      	sxtb	r2, r3
 8001290:	2301      	movs	r3, #1
 8001292:	40ab      	lsls	r3, r5
 8001294:	b25b      	sxtb	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	b25b      	sxtb	r3, r3
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b6d      	ldr	r3, [pc, #436]	; (8001454 <SH1106_drawCircle+0x7e4>)
 800129e:	551a      	strb	r2, [r3, r4]
		break;
 80012a0:	e000      	b.n	80012a4 <SH1106_drawCircle+0x634>
		return;
 80012a2:	bf00      	nop
		}
		if (x_ - y > -1) {
 80012a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012a8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f2c0 80d3 	blt.w	800145a <SH1106_drawCircle+0x7ea>
			if (y_ + x < sh)
 80012b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012b8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80012bc:	441a      	add	r2, r3
 80012be:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80012c2:	429a      	cmp	r2, r3
 80012c4:	da5d      	bge.n	8001382 <SH1106_drawCircle+0x712>
				SH1106_pixel(x_ - y, y_ + x, SH1106_PixelMode);
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	b2d9      	uxtb	r1, r3
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4413      	add	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b5b      	ldr	r3, [pc, #364]	; (800144c <SH1106_drawCircle+0x7dc>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	77f9      	strb	r1, [r7, #31]
 80012e4:	77ba      	strb	r2, [r7, #30]
 80012e6:	777b      	strb	r3, [r7, #29]
	if (scr_orientation == SH1106_ORIENT_CW
 80012e8:	4b59      	ldr	r3, [pc, #356]	; (8001450 <SH1106_drawCircle+0x7e0>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d003      	beq.n	80012f8 <SH1106_drawCircle+0x688>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 80012f0:	4b57      	ldr	r3, [pc, #348]	; (8001450 <SH1106_drawCircle+0x7e0>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d10a      	bne.n	800130e <SH1106_drawCircle+0x69e>
		offset = ((x >> 3) << 7) + y;
 80012f8:	7ffb      	ldrb	r3, [r7, #31]
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	01da      	lsls	r2, r3, #7
 8001300:	7fbb      	ldrb	r3, [r7, #30]
 8001302:	4413      	add	r3, r2
 8001304:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	f003 0507 	and.w	r5, r3, #7
 800130c:	e009      	b.n	8001322 <SH1106_drawCircle+0x6b2>
		offset = ((y >> 3) << 7) + x;
 800130e:	7fbb      	ldrb	r3, [r7, #30]
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	01da      	lsls	r2, r3, #7
 8001316:	7ffb      	ldrb	r3, [r7, #31]
 8001318:	4413      	add	r3, r2
 800131a:	461c      	mov	r4, r3
		bpos = y & 0x07;
 800131c:	7fbb      	ldrb	r3, [r7, #30]
 800131e:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001322:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001326:	d82b      	bhi.n	8001380 <SH1106_drawCircle+0x710>
	switch (Mode) {
 8001328:	7f7b      	ldrb	r3, [r7, #29]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d002      	beq.n	8001334 <SH1106_drawCircle+0x6c4>
 800132e:	2b02      	cmp	r3, #2
 8001330:	d00e      	beq.n	8001350 <SH1106_drawCircle+0x6e0>
 8001332:	e019      	b.n	8001368 <SH1106_drawCircle+0x6f8>
		vRAM[offset] &= ~(1 << bpos);
 8001334:	4b47      	ldr	r3, [pc, #284]	; (8001454 <SH1106_drawCircle+0x7e4>)
 8001336:	5d1b      	ldrb	r3, [r3, r4]
 8001338:	b25a      	sxtb	r2, r3
 800133a:	2301      	movs	r3, #1
 800133c:	40ab      	lsls	r3, r5
 800133e:	b25b      	sxtb	r3, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	b25b      	sxtb	r3, r3
 8001344:	4013      	ands	r3, r2
 8001346:	b25b      	sxtb	r3, r3
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b42      	ldr	r3, [pc, #264]	; (8001454 <SH1106_drawCircle+0x7e4>)
 800134c:	551a      	strb	r2, [r3, r4]
		break;
 800134e:	e018      	b.n	8001382 <SH1106_drawCircle+0x712>
		vRAM[offset] ^= (1 << bpos);
 8001350:	4b40      	ldr	r3, [pc, #256]	; (8001454 <SH1106_drawCircle+0x7e4>)
 8001352:	5d1b      	ldrb	r3, [r3, r4]
 8001354:	b25a      	sxtb	r2, r3
 8001356:	2301      	movs	r3, #1
 8001358:	40ab      	lsls	r3, r5
 800135a:	b25b      	sxtb	r3, r3
 800135c:	4053      	eors	r3, r2
 800135e:	b25b      	sxtb	r3, r3
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <SH1106_drawCircle+0x7e4>)
 8001364:	551a      	strb	r2, [r3, r4]
		break;
 8001366:	e00c      	b.n	8001382 <SH1106_drawCircle+0x712>
		vRAM[offset] |= (1 << bpos);
 8001368:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <SH1106_drawCircle+0x7e4>)
 800136a:	5d1b      	ldrb	r3, [r3, r4]
 800136c:	b25a      	sxtb	r2, r3
 800136e:	2301      	movs	r3, #1
 8001370:	40ab      	lsls	r3, r5
 8001372:	b25b      	sxtb	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b25b      	sxtb	r3, r3
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <SH1106_drawCircle+0x7e4>)
 800137c:	551a      	strb	r2, [r3, r4]
		break;
 800137e:	e000      	b.n	8001382 <SH1106_drawCircle+0x712>
		return;
 8001380:	bf00      	nop
			if (y_ - x > -1)
 8001382:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001386:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	db64      	blt.n	800145a <SH1106_drawCircle+0x7ea>
				SH1106_pixel(x_ - y, y_ - x, SH1106_PixelMode);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001396:	b2db      	uxtb	r3, r3
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b2d9      	uxtb	r1, r3
 800139c:	88bb      	ldrh	r3, [r7, #4]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <SH1106_drawCircle+0x7dc>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	7739      	strb	r1, [r7, #28]
 80013ae:	76fa      	strb	r2, [r7, #27]
 80013b0:	76bb      	strb	r3, [r7, #26]
	if (scr_orientation == SH1106_ORIENT_CW
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <SH1106_drawCircle+0x7e0>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d003      	beq.n	80013c2 <SH1106_drawCircle+0x752>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <SH1106_drawCircle+0x7e0>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d10a      	bne.n	80013d8 <SH1106_drawCircle+0x768>
		offset = ((x >> 3) << 7) + y;
 80013c2:	7f3b      	ldrb	r3, [r7, #28]
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	01da      	lsls	r2, r3, #7
 80013ca:	7efb      	ldrb	r3, [r7, #27]
 80013cc:	4413      	add	r3, r2
 80013ce:	461c      	mov	r4, r3
		bpos = x & 0x07;
 80013d0:	7f3b      	ldrb	r3, [r7, #28]
 80013d2:	f003 0507 	and.w	r5, r3, #7
 80013d6:	e009      	b.n	80013ec <SH1106_drawCircle+0x77c>
		offset = ((y >> 3) << 7) + x;
 80013d8:	7efb      	ldrb	r3, [r7, #27]
 80013da:	08db      	lsrs	r3, r3, #3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	01da      	lsls	r2, r3, #7
 80013e0:	7f3b      	ldrb	r3, [r7, #28]
 80013e2:	4413      	add	r3, r2
 80013e4:	461c      	mov	r4, r3
		bpos = y & 0x07;
 80013e6:	7efb      	ldrb	r3, [r7, #27]
 80013e8:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 80013ec:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80013f0:	d832      	bhi.n	8001458 <SH1106_drawCircle+0x7e8>
	switch (Mode) {
 80013f2:	7ebb      	ldrb	r3, [r7, #26]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d002      	beq.n	80013fe <SH1106_drawCircle+0x78e>
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d00e      	beq.n	800141a <SH1106_drawCircle+0x7aa>
 80013fc:	e019      	b.n	8001432 <SH1106_drawCircle+0x7c2>
		vRAM[offset] &= ~(1 << bpos);
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <SH1106_drawCircle+0x7e4>)
 8001400:	5d1b      	ldrb	r3, [r3, r4]
 8001402:	b25a      	sxtb	r2, r3
 8001404:	2301      	movs	r3, #1
 8001406:	40ab      	lsls	r3, r5
 8001408:	b25b      	sxtb	r3, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	b25b      	sxtb	r3, r3
 800140e:	4013      	ands	r3, r2
 8001410:	b25b      	sxtb	r3, r3
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <SH1106_drawCircle+0x7e4>)
 8001416:	551a      	strb	r2, [r3, r4]
		break;
 8001418:	e01f      	b.n	800145a <SH1106_drawCircle+0x7ea>
		vRAM[offset] ^= (1 << bpos);
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <SH1106_drawCircle+0x7e4>)
 800141c:	5d1b      	ldrb	r3, [r3, r4]
 800141e:	b25a      	sxtb	r2, r3
 8001420:	2301      	movs	r3, #1
 8001422:	40ab      	lsls	r3, r5
 8001424:	b25b      	sxtb	r3, r3
 8001426:	4053      	eors	r3, r2
 8001428:	b25b      	sxtb	r3, r3
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <SH1106_drawCircle+0x7e4>)
 800142e:	551a      	strb	r2, [r3, r4]
		break;
 8001430:	e013      	b.n	800145a <SH1106_drawCircle+0x7ea>
		vRAM[offset] |= (1 << bpos);
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <SH1106_drawCircle+0x7e4>)
 8001434:	5d1b      	ldrb	r3, [r3, r4]
 8001436:	b25a      	sxtb	r2, r3
 8001438:	2301      	movs	r3, #1
 800143a:	40ab      	lsls	r3, r5
 800143c:	b25b      	sxtb	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b25b      	sxtb	r3, r3
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <SH1106_drawCircle+0x7e4>)
 8001446:	551a      	strb	r2, [r3, r4]
		break;
 8001448:	e007      	b.n	800145a <SH1106_drawCircle+0x7ea>
 800144a:	bf00      	nop
 800144c:	200001c0 	.word	0x200001c0
 8001450:	200001c1 	.word	0x200001c1
 8001454:	200001c4 	.word	0x200001c4
		return;
 8001458:	bf00      	nop
	while (x < y) {
 800145a:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800145e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001462:	429a      	cmp	r2, r3
 8001464:	f6ff ac2c 	blt.w	8000cc0 <SH1106_drawCircle+0x50>
		}
	}

	// Vertical and horizontal points
	if (x_ + radius < sw)
 8001468:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	441a      	add	r2, r3
 8001470:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001474:	429a      	cmp	r2, r3
 8001476:	da58      	bge.n	800152a <SH1106_drawCircle+0x8ba>
		SH1106_pixel(x_ + radius, y_, SH1106_PixelMode);
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	4413      	add	r3, r2
 8001480:	b2d9      	uxtb	r1, r3
 8001482:	88bb      	ldrh	r3, [r7, #4]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b9b      	ldr	r3, [pc, #620]	; (80016f4 <SH1106_drawCircle+0xa84>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	7679      	strb	r1, [r7, #25]
 800148c:	763a      	strb	r2, [r7, #24]
 800148e:	75fb      	strb	r3, [r7, #23]
	if (scr_orientation == SH1106_ORIENT_CW
 8001490:	4b99      	ldr	r3, [pc, #612]	; (80016f8 <SH1106_drawCircle+0xa88>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d003      	beq.n	80014a0 <SH1106_drawCircle+0x830>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001498:	4b97      	ldr	r3, [pc, #604]	; (80016f8 <SH1106_drawCircle+0xa88>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d10a      	bne.n	80014b6 <SH1106_drawCircle+0x846>
		offset = ((x >> 3) << 7) + y;
 80014a0:	7e7b      	ldrb	r3, [r7, #25]
 80014a2:	08db      	lsrs	r3, r3, #3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	01da      	lsls	r2, r3, #7
 80014a8:	7e3b      	ldrb	r3, [r7, #24]
 80014aa:	4413      	add	r3, r2
 80014ac:	461c      	mov	r4, r3
		bpos = x & 0x07;
 80014ae:	7e7b      	ldrb	r3, [r7, #25]
 80014b0:	f003 0507 	and.w	r5, r3, #7
 80014b4:	e009      	b.n	80014ca <SH1106_drawCircle+0x85a>
		offset = ((y >> 3) << 7) + x;
 80014b6:	7e3b      	ldrb	r3, [r7, #24]
 80014b8:	08db      	lsrs	r3, r3, #3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	01da      	lsls	r2, r3, #7
 80014be:	7e7b      	ldrb	r3, [r7, #25]
 80014c0:	4413      	add	r3, r2
 80014c2:	461c      	mov	r4, r3
		bpos = y & 0x07;
 80014c4:	7e3b      	ldrb	r3, [r7, #24]
 80014c6:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 80014ca:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80014ce:	d82b      	bhi.n	8001528 <SH1106_drawCircle+0x8b8>
	switch (Mode) {
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d002      	beq.n	80014dc <SH1106_drawCircle+0x86c>
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d00e      	beq.n	80014f8 <SH1106_drawCircle+0x888>
 80014da:	e019      	b.n	8001510 <SH1106_drawCircle+0x8a0>
		vRAM[offset] &= ~(1 << bpos);
 80014dc:	4b87      	ldr	r3, [pc, #540]	; (80016fc <SH1106_drawCircle+0xa8c>)
 80014de:	5d1b      	ldrb	r3, [r3, r4]
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	2301      	movs	r3, #1
 80014e4:	40ab      	lsls	r3, r5
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	4013      	ands	r3, r2
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b82      	ldr	r3, [pc, #520]	; (80016fc <SH1106_drawCircle+0xa8c>)
 80014f4:	551a      	strb	r2, [r3, r4]
		break;
 80014f6:	e018      	b.n	800152a <SH1106_drawCircle+0x8ba>
		vRAM[offset] ^= (1 << bpos);
 80014f8:	4b80      	ldr	r3, [pc, #512]	; (80016fc <SH1106_drawCircle+0xa8c>)
 80014fa:	5d1b      	ldrb	r3, [r3, r4]
 80014fc:	b25a      	sxtb	r2, r3
 80014fe:	2301      	movs	r3, #1
 8001500:	40ab      	lsls	r3, r5
 8001502:	b25b      	sxtb	r3, r3
 8001504:	4053      	eors	r3, r2
 8001506:	b25b      	sxtb	r3, r3
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b7c      	ldr	r3, [pc, #496]	; (80016fc <SH1106_drawCircle+0xa8c>)
 800150c:	551a      	strb	r2, [r3, r4]
		break;
 800150e:	e00c      	b.n	800152a <SH1106_drawCircle+0x8ba>
		vRAM[offset] |= (1 << bpos);
 8001510:	4b7a      	ldr	r3, [pc, #488]	; (80016fc <SH1106_drawCircle+0xa8c>)
 8001512:	5d1b      	ldrb	r3, [r3, r4]
 8001514:	b25a      	sxtb	r2, r3
 8001516:	2301      	movs	r3, #1
 8001518:	40ab      	lsls	r3, r5
 800151a:	b25b      	sxtb	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b25b      	sxtb	r3, r3
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b76      	ldr	r3, [pc, #472]	; (80016fc <SH1106_drawCircle+0xa8c>)
 8001524:	551a      	strb	r2, [r3, r4]
		break;
 8001526:	e000      	b.n	800152a <SH1106_drawCircle+0x8ba>
		return;
 8001528:	bf00      	nop
	if (x_ - radius > -1)
 800152a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	db58      	blt.n	80015e8 <SH1106_drawCircle+0x978>
		SH1106_pixel(x_ - radius, y_, SH1106_PixelMode);
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	b2d9      	uxtb	r1, r3
 8001540:	88bb      	ldrh	r3, [r7, #4]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b6b      	ldr	r3, [pc, #428]	; (80016f4 <SH1106_drawCircle+0xa84>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	75b9      	strb	r1, [r7, #22]
 800154a:	757a      	strb	r2, [r7, #21]
 800154c:	753b      	strb	r3, [r7, #20]
	if (scr_orientation == SH1106_ORIENT_CW
 800154e:	4b6a      	ldr	r3, [pc, #424]	; (80016f8 <SH1106_drawCircle+0xa88>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d003      	beq.n	800155e <SH1106_drawCircle+0x8ee>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001556:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <SH1106_drawCircle+0xa88>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d10a      	bne.n	8001574 <SH1106_drawCircle+0x904>
		offset = ((x >> 3) << 7) + y;
 800155e:	7dbb      	ldrb	r3, [r7, #22]
 8001560:	08db      	lsrs	r3, r3, #3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	01da      	lsls	r2, r3, #7
 8001566:	7d7b      	ldrb	r3, [r7, #21]
 8001568:	4413      	add	r3, r2
 800156a:	461c      	mov	r4, r3
		bpos = x & 0x07;
 800156c:	7dbb      	ldrb	r3, [r7, #22]
 800156e:	f003 0507 	and.w	r5, r3, #7
 8001572:	e009      	b.n	8001588 <SH1106_drawCircle+0x918>
		offset = ((y >> 3) << 7) + x;
 8001574:	7d7b      	ldrb	r3, [r7, #21]
 8001576:	08db      	lsrs	r3, r3, #3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	01da      	lsls	r2, r3, #7
 800157c:	7dbb      	ldrb	r3, [r7, #22]
 800157e:	4413      	add	r3, r2
 8001580:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001582:	7d7b      	ldrb	r3, [r7, #21]
 8001584:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001588:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800158c:	d82b      	bhi.n	80015e6 <SH1106_drawCircle+0x976>
	switch (Mode) {
 800158e:	7d3b      	ldrb	r3, [r7, #20]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d002      	beq.n	800159a <SH1106_drawCircle+0x92a>
 8001594:	2b02      	cmp	r3, #2
 8001596:	d00e      	beq.n	80015b6 <SH1106_drawCircle+0x946>
 8001598:	e019      	b.n	80015ce <SH1106_drawCircle+0x95e>
		vRAM[offset] &= ~(1 << bpos);
 800159a:	4b58      	ldr	r3, [pc, #352]	; (80016fc <SH1106_drawCircle+0xa8c>)
 800159c:	5d1b      	ldrb	r3, [r3, r4]
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	2301      	movs	r3, #1
 80015a2:	40ab      	lsls	r3, r5
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	4013      	ands	r3, r2
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	4b52      	ldr	r3, [pc, #328]	; (80016fc <SH1106_drawCircle+0xa8c>)
 80015b2:	551a      	strb	r2, [r3, r4]
		break;
 80015b4:	e018      	b.n	80015e8 <SH1106_drawCircle+0x978>
		vRAM[offset] ^= (1 << bpos);
 80015b6:	4b51      	ldr	r3, [pc, #324]	; (80016fc <SH1106_drawCircle+0xa8c>)
 80015b8:	5d1b      	ldrb	r3, [r3, r4]
 80015ba:	b25a      	sxtb	r2, r3
 80015bc:	2301      	movs	r3, #1
 80015be:	40ab      	lsls	r3, r5
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	4053      	eors	r3, r2
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <SH1106_drawCircle+0xa8c>)
 80015ca:	551a      	strb	r2, [r3, r4]
		break;
 80015cc:	e00c      	b.n	80015e8 <SH1106_drawCircle+0x978>
		vRAM[offset] |= (1 << bpos);
 80015ce:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <SH1106_drawCircle+0xa8c>)
 80015d0:	5d1b      	ldrb	r3, [r3, r4]
 80015d2:	b25a      	sxtb	r2, r3
 80015d4:	2301      	movs	r3, #1
 80015d6:	40ab      	lsls	r3, r5
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b46      	ldr	r3, [pc, #280]	; (80016fc <SH1106_drawCircle+0xa8c>)
 80015e2:	551a      	strb	r2, [r3, r4]
		break;
 80015e4:	e000      	b.n	80015e8 <SH1106_drawCircle+0x978>
		return;
 80015e6:	bf00      	nop
	if (y_ + radius < sh)
 80015e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	441a      	add	r2, r3
 80015f0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80015f4:	429a      	cmp	r2, r3
 80015f6:	da58      	bge.n	80016aa <SH1106_drawCircle+0xa3a>
		SH1106_pixel(x_, y_ + radius, SH1106_PixelMode);
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	b2d9      	uxtb	r1, r3
 80015fc:	88bb      	ldrh	r3, [r7, #4]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	4413      	add	r3, r2
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <SH1106_drawCircle+0xa84>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	74f9      	strb	r1, [r7, #19]
 800160c:	74ba      	strb	r2, [r7, #18]
 800160e:	747b      	strb	r3, [r7, #17]
	if (scr_orientation == SH1106_ORIENT_CW
 8001610:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <SH1106_drawCircle+0xa88>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d003      	beq.n	8001620 <SH1106_drawCircle+0x9b0>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 8001618:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <SH1106_drawCircle+0xa88>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d10a      	bne.n	8001636 <SH1106_drawCircle+0x9c6>
		offset = ((x >> 3) << 7) + y;
 8001620:	7cfb      	ldrb	r3, [r7, #19]
 8001622:	08db      	lsrs	r3, r3, #3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	01da      	lsls	r2, r3, #7
 8001628:	7cbb      	ldrb	r3, [r7, #18]
 800162a:	4413      	add	r3, r2
 800162c:	461c      	mov	r4, r3
		bpos = x & 0x07;
 800162e:	7cfb      	ldrb	r3, [r7, #19]
 8001630:	f003 0507 	and.w	r5, r3, #7
 8001634:	e009      	b.n	800164a <SH1106_drawCircle+0x9da>
		offset = ((y >> 3) << 7) + x;
 8001636:	7cbb      	ldrb	r3, [r7, #18]
 8001638:	08db      	lsrs	r3, r3, #3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	01da      	lsls	r2, r3, #7
 800163e:	7cfb      	ldrb	r3, [r7, #19]
 8001640:	4413      	add	r3, r2
 8001642:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8001644:	7cbb      	ldrb	r3, [r7, #18]
 8001646:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 800164a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800164e:	d82b      	bhi.n	80016a8 <SH1106_drawCircle+0xa38>
	switch (Mode) {
 8001650:	7c7b      	ldrb	r3, [r7, #17]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d002      	beq.n	800165c <SH1106_drawCircle+0x9ec>
 8001656:	2b02      	cmp	r3, #2
 8001658:	d00e      	beq.n	8001678 <SH1106_drawCircle+0xa08>
 800165a:	e019      	b.n	8001690 <SH1106_drawCircle+0xa20>
		vRAM[offset] &= ~(1 << bpos);
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <SH1106_drawCircle+0xa8c>)
 800165e:	5d1b      	ldrb	r3, [r3, r4]
 8001660:	b25a      	sxtb	r2, r3
 8001662:	2301      	movs	r3, #1
 8001664:	40ab      	lsls	r3, r5
 8001666:	b25b      	sxtb	r3, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	b25b      	sxtb	r3, r3
 800166c:	4013      	ands	r3, r2
 800166e:	b25b      	sxtb	r3, r3
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <SH1106_drawCircle+0xa8c>)
 8001674:	551a      	strb	r2, [r3, r4]
		break;
 8001676:	e018      	b.n	80016aa <SH1106_drawCircle+0xa3a>
		vRAM[offset] ^= (1 << bpos);
 8001678:	4b20      	ldr	r3, [pc, #128]	; (80016fc <SH1106_drawCircle+0xa8c>)
 800167a:	5d1b      	ldrb	r3, [r3, r4]
 800167c:	b25a      	sxtb	r2, r3
 800167e:	2301      	movs	r3, #1
 8001680:	40ab      	lsls	r3, r5
 8001682:	b25b      	sxtb	r3, r3
 8001684:	4053      	eors	r3, r2
 8001686:	b25b      	sxtb	r3, r3
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <SH1106_drawCircle+0xa8c>)
 800168c:	551a      	strb	r2, [r3, r4]
		break;
 800168e:	e00c      	b.n	80016aa <SH1106_drawCircle+0xa3a>
		vRAM[offset] |= (1 << bpos);
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <SH1106_drawCircle+0xa8c>)
 8001692:	5d1b      	ldrb	r3, [r3, r4]
 8001694:	b25a      	sxtb	r2, r3
 8001696:	2301      	movs	r3, #1
 8001698:	40ab      	lsls	r3, r5
 800169a:	b25b      	sxtb	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <SH1106_drawCircle+0xa8c>)
 80016a4:	551a      	strb	r2, [r3, r4]
		break;
 80016a6:	e000      	b.n	80016aa <SH1106_drawCircle+0xa3a>
		return;
 80016a8:	bf00      	nop
	if (y_ - radius > -1)
 80016aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db5e      	blt.n	8001774 <SH1106_drawCircle+0xb04>
		SH1106_pixel(x_, y_ - radius, SH1106_PixelMode);
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	b2d9      	uxtb	r1, r3
 80016ba:	88bb      	ldrh	r3, [r7, #4]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <SH1106_drawCircle+0xa84>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	7439      	strb	r1, [r7, #16]
 80016ca:	73fa      	strb	r2, [r7, #15]
 80016cc:	73bb      	strb	r3, [r7, #14]
	if (scr_orientation == SH1106_ORIENT_CW
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <SH1106_drawCircle+0xa88>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d003      	beq.n	80016de <SH1106_drawCircle+0xa6e>
			|| scr_orientation == SH1106_ORIENT_CCW) {
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <SH1106_drawCircle+0xa88>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d110      	bne.n	8001700 <SH1106_drawCircle+0xa90>
		offset = ((x >> 3) << 7) + y;
 80016de:	7c3b      	ldrb	r3, [r7, #16]
 80016e0:	08db      	lsrs	r3, r3, #3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	01da      	lsls	r2, r3, #7
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	4413      	add	r3, r2
 80016ea:	461c      	mov	r4, r3
		bpos = x & 0x07;
 80016ec:	7c3b      	ldrb	r3, [r7, #16]
 80016ee:	f003 0507 	and.w	r5, r3, #7
 80016f2:	e00f      	b.n	8001714 <SH1106_drawCircle+0xaa4>
 80016f4:	200001c0 	.word	0x200001c0
 80016f8:	200001c1 	.word	0x200001c1
 80016fc:	200001c4 	.word	0x200001c4
		offset = ((y >> 3) << 7) + x;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	01da      	lsls	r2, r3, #7
 8001708:	7c3b      	ldrb	r3, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	461c      	mov	r4, r3
		bpos = y & 0x07;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	f003 0507 	and.w	r5, r3, #7
	if (offset > ((SCR_W * SCR_H ) >> 3)) {
 8001714:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001718:	d82b      	bhi.n	8001772 <SH1106_drawCircle+0xb02>
	switch (Mode) {
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d002      	beq.n	8001726 <SH1106_drawCircle+0xab6>
 8001720:	2b02      	cmp	r3, #2
 8001722:	d00e      	beq.n	8001742 <SH1106_drawCircle+0xad2>
 8001724:	e019      	b.n	800175a <SH1106_drawCircle+0xaea>
		vRAM[offset] &= ~(1 << bpos);
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <SH1106_drawCircle+0xb10>)
 8001728:	5d1b      	ldrb	r3, [r3, r4]
 800172a:	b25a      	sxtb	r2, r3
 800172c:	2301      	movs	r3, #1
 800172e:	40ab      	lsls	r3, r5
 8001730:	b25b      	sxtb	r3, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	b25b      	sxtb	r3, r3
 8001736:	4013      	ands	r3, r2
 8001738:	b25b      	sxtb	r3, r3
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <SH1106_drawCircle+0xb10>)
 800173e:	551a      	strb	r2, [r3, r4]
		break;
 8001740:	e018      	b.n	8001774 <SH1106_drawCircle+0xb04>
		vRAM[offset] ^= (1 << bpos);
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <SH1106_drawCircle+0xb10>)
 8001744:	5d1b      	ldrb	r3, [r3, r4]
 8001746:	b25a      	sxtb	r2, r3
 8001748:	2301      	movs	r3, #1
 800174a:	40ab      	lsls	r3, r5
 800174c:	b25b      	sxtb	r3, r3
 800174e:	4053      	eors	r3, r2
 8001750:	b25b      	sxtb	r3, r3
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <SH1106_drawCircle+0xb10>)
 8001756:	551a      	strb	r2, [r3, r4]
		break;
 8001758:	e00c      	b.n	8001774 <SH1106_drawCircle+0xb04>
		vRAM[offset] |= (1 << bpos);
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <SH1106_drawCircle+0xb10>)
 800175c:	5d1b      	ldrb	r3, [r3, r4]
 800175e:	b25a      	sxtb	r2, r3
 8001760:	2301      	movs	r3, #1
 8001762:	40ab      	lsls	r3, r5
 8001764:	b25b      	sxtb	r3, r3
 8001766:	4313      	orrs	r3, r2
 8001768:	b25b      	sxtb	r3, r3
 800176a:	b2da      	uxtb	r2, r3
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <SH1106_drawCircle+0xb10>)
 800176e:	551a      	strb	r2, [r3, r4]
		break;
 8001770:	e000      	b.n	8001774 <SH1106_drawCircle+0xb04>
		return;
 8001772:	bf00      	nop
}
 8001774:	bf00      	nop
 8001776:	3744      	adds	r7, #68	; 0x44
 8001778:	46bd      	mov	sp, r7
 800177a:	bcb0      	pop	{r4, r5, r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	200001c4 	.word	0x200001c4

08001784 <SH1106_drawBitmapFullscreen>:
		}
		p_y += 8;
	}
}

void SH1106_drawBitmapFullscreen(const uint8_t *pBMP) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	memcpy(vRAM, pBMP, (SCR_W * SCR_H ) >> 3);
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <SH1106_drawBitmapFullscreen+0x24>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001798:	461a      	mov	r2, r3
 800179a:	f002 f8b1 	bl	8003900 <memcpy>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001c4 	.word	0x200001c4

080017ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_Init+0x28>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_Init+0x28>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 fb07 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	200f      	movs	r0, #15
 80017c4:	f7fe fffe 	bl	80007c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7fe ffc2 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40022000 	.word	0x40022000

080017d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_IncTick+0x1c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_IncTick+0x20>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a03      	ldr	r2, [pc, #12]	; (80017f8 <HAL_IncTick+0x20>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	200000cc 	.word	0x200000cc
 80017f8:	20000644 	.word	0x20000644

080017fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b02      	ldr	r3, [pc, #8]	; (800180c <HAL_GetTick+0x10>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000644 	.word	0x20000644

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff fff0 	bl	80017fc <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_Delay+0x44>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffe0 	bl	80017fc <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200000cc 	.word	0x200000cc

08001858 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0be      	b.n	80019f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7fe fc96 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f9ab 	bl	8001bf8 <ADC_ConversionStop_Disable>
 80018a2:	4603      	mov	r3, r0
 80018a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 8099 	bne.w	80019e6 <HAL_ADC_Init+0x18e>
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 8095 	bne.w	80019e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018c4:	f023 0302 	bic.w	r3, r3, #2
 80018c8:	f043 0202 	orr.w	r2, r3, #2
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7b1b      	ldrb	r3, [r3, #12]
 80018de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f0:	d003      	beq.n	80018fa <HAL_ADC_Init+0xa2>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d102      	bne.n	8001900 <HAL_ADC_Init+0xa8>
 80018fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fe:	e000      	b.n	8001902 <HAL_ADC_Init+0xaa>
 8001900:	2300      	movs	r3, #0
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7d1b      	ldrb	r3, [r3, #20]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d119      	bne.n	8001944 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7b1b      	ldrb	r3, [r3, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d109      	bne.n	800192c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	3b01      	subs	r3, #1
 800191e:	035a      	lsls	r2, r3, #13
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	e00b      	b.n	8001944 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	f043 0220 	orr.w	r2, r3, #32
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	f043 0201 	orr.w	r2, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <HAL_ADC_Init+0x1a8>)
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	430b      	orrs	r3, r1
 800196a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001974:	d003      	beq.n	800197e <HAL_ADC_Init+0x126>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d104      	bne.n	8001988 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	3b01      	subs	r3, #1
 8001984:	051b      	lsls	r3, r3, #20
 8001986:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	430a      	orrs	r2, r1
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_ADC_Init+0x1ac>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d10b      	bne.n	80019c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	f023 0303 	bic.w	r3, r3, #3
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019c2:	e018      	b.n	80019f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	f023 0312 	bic.w	r3, r3, #18
 80019cc:	f043 0210 	orr.w	r2, r3, #16
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019e4:	e007      	b.n	80019f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	f043 0210 	orr.w	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	ffe1f7fd 	.word	0xffe1f7fd
 8001a04:	ff1f0efe 	.word	0xff1f0efe

08001a08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x20>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e0dc      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1da>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b06      	cmp	r3, #6
 8001a36:	d81c      	bhi.n	8001a72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	3b05      	subs	r3, #5
 8001a4a:	221f      	movs	r2, #31
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	4019      	ands	r1, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	3b05      	subs	r3, #5
 8001a64:	fa00 f203 	lsl.w	r2, r0, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a70:	e03c      	b.n	8001aec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d81c      	bhi.n	8001ab4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	3b23      	subs	r3, #35	; 0x23
 8001a8c:	221f      	movs	r2, #31
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	4019      	ands	r1, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3b23      	subs	r3, #35	; 0x23
 8001aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ab2:	e01b      	b.n	8001aec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3b41      	subs	r3, #65	; 0x41
 8001ac6:	221f      	movs	r2, #31
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	4019      	ands	r1, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	3b41      	subs	r3, #65	; 0x41
 8001ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b09      	cmp	r3, #9
 8001af2:	d91c      	bls.n	8001b2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68d9      	ldr	r1, [r3, #12]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	3b1e      	subs	r3, #30
 8001b06:	2207      	movs	r2, #7
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4019      	ands	r1, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6898      	ldr	r0, [r3, #8]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3b1e      	subs	r3, #30
 8001b20:	fa00 f203 	lsl.w	r2, r0, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	e019      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6919      	ldr	r1, [r3, #16]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	2207      	movs	r2, #7
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	4019      	ands	r1, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6898      	ldr	r0, [r3, #8]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	d003      	beq.n	8001b72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b6e:	2b11      	cmp	r3, #17
 8001b70:	d132      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_ADC_ConfigChannel+0x1e4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d125      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d126      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b98:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b10      	cmp	r3, #16
 8001ba0:	d11a      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bac:	0c9a      	lsrs	r2, r3, #18
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bb8:	e002      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f9      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x1b2>
 8001bc6:	e007      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	40012400 	.word	0x40012400
 8001bf0:	2000003c 	.word	0x2000003c
 8001bf4:	431bde83 	.word	0x431bde83

08001bf8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d12e      	bne.n	8001c70 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0201 	bic.w	r2, r2, #1
 8001c20:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c22:	f7ff fdeb 	bl	80017fc <HAL_GetTick>
 8001c26:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c28:	e01b      	b.n	8001c62 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c2a:	f7ff fde7 	bl	80017fc <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d914      	bls.n	8001c62 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d10d      	bne.n	8001c62 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	f043 0210 	orr.w	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	f043 0201 	orr.w	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e007      	b.n	8001c72 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d0dc      	beq.n	8001c2a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4906      	ldr	r1, [pc, #24]	; (8001d14 <__NVIC_EnableIRQ+0x34>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	; (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	; (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff4f 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff64 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ffb2 	bl	8001d6c <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff81 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff57 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b08b      	sub	sp, #44	; 0x2c
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	e169      	b.n	8002124 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e50:	2201      	movs	r2, #1
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 8158 	bne.w	800211e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a9a      	ldr	r2, [pc, #616]	; (80020dc <HAL_GPIO_Init+0x2a0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d05e      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e78:	4a98      	ldr	r2, [pc, #608]	; (80020dc <HAL_GPIO_Init+0x2a0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d875      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e7e:	4a98      	ldr	r2, [pc, #608]	; (80020e0 <HAL_GPIO_Init+0x2a4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d058      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e84:	4a96      	ldr	r2, [pc, #600]	; (80020e0 <HAL_GPIO_Init+0x2a4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d86f      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e8a:	4a96      	ldr	r2, [pc, #600]	; (80020e4 <HAL_GPIO_Init+0x2a8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d052      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e90:	4a94      	ldr	r2, [pc, #592]	; (80020e4 <HAL_GPIO_Init+0x2a8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d869      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e96:	4a94      	ldr	r2, [pc, #592]	; (80020e8 <HAL_GPIO_Init+0x2ac>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d04c      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e9c:	4a92      	ldr	r2, [pc, #584]	; (80020e8 <HAL_GPIO_Init+0x2ac>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d863      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001ea2:	4a92      	ldr	r2, [pc, #584]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d046      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a90      	ldr	r2, [pc, #576]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d85d      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d82a      	bhi.n	8001f08 <HAL_GPIO_Init+0xcc>
 8001eb2:	2b12      	cmp	r3, #18
 8001eb4:	d859      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001eb6:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <HAL_GPIO_Init+0x80>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001f37 	.word	0x08001f37
 8001ec0:	08001f11 	.word	0x08001f11
 8001ec4:	08001f23 	.word	0x08001f23
 8001ec8:	08001f65 	.word	0x08001f65
 8001ecc:	08001f6b 	.word	0x08001f6b
 8001ed0:	08001f6b 	.word	0x08001f6b
 8001ed4:	08001f6b 	.word	0x08001f6b
 8001ed8:	08001f6b 	.word	0x08001f6b
 8001edc:	08001f6b 	.word	0x08001f6b
 8001ee0:	08001f6b 	.word	0x08001f6b
 8001ee4:	08001f6b 	.word	0x08001f6b
 8001ee8:	08001f6b 	.word	0x08001f6b
 8001eec:	08001f6b 	.word	0x08001f6b
 8001ef0:	08001f6b 	.word	0x08001f6b
 8001ef4:	08001f6b 	.word	0x08001f6b
 8001ef8:	08001f6b 	.word	0x08001f6b
 8001efc:	08001f6b 	.word	0x08001f6b
 8001f00:	08001f19 	.word	0x08001f19
 8001f04:	08001f2d 	.word	0x08001f2d
 8001f08:	4a79      	ldr	r2, [pc, #484]	; (80020f0 <HAL_GPIO_Init+0x2b4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f0e:	e02c      	b.n	8001f6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	623b      	str	r3, [r7, #32]
          break;
 8001f16:	e029      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	623b      	str	r3, [r7, #32]
          break;
 8001f20:	e024      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	3308      	adds	r3, #8
 8001f28:	623b      	str	r3, [r7, #32]
          break;
 8001f2a:	e01f      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	330c      	adds	r3, #12
 8001f32:	623b      	str	r3, [r7, #32]
          break;
 8001f34:	e01a      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f3e:	2304      	movs	r3, #4
 8001f40:	623b      	str	r3, [r7, #32]
          break;
 8001f42:	e013      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	611a      	str	r2, [r3, #16]
          break;
 8001f56:	e009      	b.n	8001f6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	615a      	str	r2, [r3, #20]
          break;
 8001f62:	e003      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
          break;
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          break;
 8001f6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2bff      	cmp	r3, #255	; 0xff
 8001f70:	d801      	bhi.n	8001f76 <HAL_GPIO_Init+0x13a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	e001      	b.n	8001f7a <HAL_GPIO_Init+0x13e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2bff      	cmp	r3, #255	; 0xff
 8001f80:	d802      	bhi.n	8001f88 <HAL_GPIO_Init+0x14c>
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	e002      	b.n	8001f8e <HAL_GPIO_Init+0x152>
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	3b08      	subs	r3, #8
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	210f      	movs	r1, #15
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	6a39      	ldr	r1, [r7, #32]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80b1 	beq.w	800211e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fbc:	4b4d      	ldr	r3, [pc, #308]	; (80020f4 <HAL_GPIO_Init+0x2b8>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a4c      	ldr	r2, [pc, #304]	; (80020f4 <HAL_GPIO_Init+0x2b8>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_GPIO_Init+0x2b8>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fd4:	4a48      	ldr	r2, [pc, #288]	; (80020f8 <HAL_GPIO_Init+0x2bc>)
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	3302      	adds	r3, #2
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a40      	ldr	r2, [pc, #256]	; (80020fc <HAL_GPIO_Init+0x2c0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d013      	beq.n	8002028 <HAL_GPIO_Init+0x1ec>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3f      	ldr	r2, [pc, #252]	; (8002100 <HAL_GPIO_Init+0x2c4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00d      	beq.n	8002024 <HAL_GPIO_Init+0x1e8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3e      	ldr	r2, [pc, #248]	; (8002104 <HAL_GPIO_Init+0x2c8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d007      	beq.n	8002020 <HAL_GPIO_Init+0x1e4>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a3d      	ldr	r2, [pc, #244]	; (8002108 <HAL_GPIO_Init+0x2cc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_GPIO_Init+0x1e0>
 8002018:	2303      	movs	r3, #3
 800201a:	e006      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 800201c:	2304      	movs	r3, #4
 800201e:	e004      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 8002020:	2302      	movs	r3, #2
 8002022:	e002      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 8002028:	2300      	movs	r3, #0
 800202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202c:	f002 0203 	and.w	r2, r2, #3
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	4093      	lsls	r3, r2
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800203a:	492f      	ldr	r1, [pc, #188]	; (80020f8 <HAL_GPIO_Init+0x2bc>)
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002054:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_GPIO_Init+0x2d0>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	492c      	ldr	r1, [pc, #176]	; (800210c <HAL_GPIO_Init+0x2d0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <HAL_GPIO_Init+0x2d0>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	4928      	ldr	r1, [pc, #160]	; (800210c <HAL_GPIO_Init+0x2d0>)
 800206c:	4013      	ands	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_GPIO_Init+0x2d0>)
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4922      	ldr	r1, [pc, #136]	; (800210c <HAL_GPIO_Init+0x2d0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800208a:	4b20      	ldr	r3, [pc, #128]	; (800210c <HAL_GPIO_Init+0x2d0>)
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	491e      	ldr	r1, [pc, #120]	; (800210c <HAL_GPIO_Init+0x2d0>)
 8002094:	4013      	ands	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	4918      	ldr	r1, [pc, #96]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	4914      	ldr	r1, [pc, #80]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d021      	beq.n	8002110 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	490e      	ldr	r1, [pc, #56]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60cb      	str	r3, [r1, #12]
 80020d8:	e021      	b.n	800211e <HAL_GPIO_Init+0x2e2>
 80020da:	bf00      	nop
 80020dc:	10320000 	.word	0x10320000
 80020e0:	10310000 	.word	0x10310000
 80020e4:	10220000 	.word	0x10220000
 80020e8:	10210000 	.word	0x10210000
 80020ec:	10120000 	.word	0x10120000
 80020f0:	10110000 	.word	0x10110000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40010800 	.word	0x40010800
 8002100:	40010c00 	.word	0x40010c00
 8002104:	40011000 	.word	0x40011000
 8002108:	40011400 	.word	0x40011400
 800210c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_GPIO_Init+0x304>)
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	43db      	mvns	r3, r3
 8002118:	4909      	ldr	r1, [pc, #36]	; (8002140 <HAL_GPIO_Init+0x304>)
 800211a:	4013      	ands	r3, r2
 800211c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	3301      	adds	r3, #1
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	f47f ae8e 	bne.w	8001e50 <HAL_GPIO_Init+0x14>
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	372c      	adds	r7, #44	; 0x2c
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	40010400 	.word	0x40010400

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002160:	e003      	b.n	800216a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	611a      	str	r2, [r3, #16]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
	/* EXTI line interrupt detected */
	HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f97b 	bl	800047c <HAL_GPIO_EXTI_Callback>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e12b      	b.n	80023fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe f922 	bl	8000400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2224      	movs	r2, #36	; 0x24
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021f4:	f000 ffea 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 80021f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a81      	ldr	r2, [pc, #516]	; (8002404 <HAL_I2C_Init+0x274>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d807      	bhi.n	8002214 <HAL_I2C_Init+0x84>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a80      	ldr	r2, [pc, #512]	; (8002408 <HAL_I2C_Init+0x278>)
 8002208:	4293      	cmp	r3, r2
 800220a:	bf94      	ite	ls
 800220c:	2301      	movls	r3, #1
 800220e:	2300      	movhi	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	e006      	b.n	8002222 <HAL_I2C_Init+0x92>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4a7d      	ldr	r2, [pc, #500]	; (800240c <HAL_I2C_Init+0x27c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	bf94      	ite	ls
 800221c:	2301      	movls	r3, #1
 800221e:	2300      	movhi	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e0e7      	b.n	80023fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4a78      	ldr	r2, [pc, #480]	; (8002410 <HAL_I2C_Init+0x280>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	0c9b      	lsrs	r3, r3, #18
 8002234:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a6a      	ldr	r2, [pc, #424]	; (8002404 <HAL_I2C_Init+0x274>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d802      	bhi.n	8002264 <HAL_I2C_Init+0xd4>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3301      	adds	r3, #1
 8002262:	e009      	b.n	8002278 <HAL_I2C_Init+0xe8>
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	4a69      	ldr	r2, [pc, #420]	; (8002414 <HAL_I2C_Init+0x284>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	099b      	lsrs	r3, r3, #6
 8002276:	3301      	adds	r3, #1
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	430b      	orrs	r3, r1
 800227e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800228a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	495c      	ldr	r1, [pc, #368]	; (8002404 <HAL_I2C_Init+0x274>)
 8002294:	428b      	cmp	r3, r1
 8002296:	d819      	bhi.n	80022cc <HAL_I2C_Init+0x13c>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1e59      	subs	r1, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a6:	1c59      	adds	r1, r3, #1
 80022a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022ac:	400b      	ands	r3, r1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_I2C_Init+0x138>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1e59      	subs	r1, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c6:	e051      	b.n	800236c <HAL_I2C_Init+0x1dc>
 80022c8:	2304      	movs	r3, #4
 80022ca:	e04f      	b.n	800236c <HAL_I2C_Init+0x1dc>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d111      	bne.n	80022f8 <HAL_I2C_Init+0x168>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1e58      	subs	r0, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	440b      	add	r3, r1
 80022e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e6:	3301      	adds	r3, #1
 80022e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e012      	b.n	800231e <HAL_I2C_Init+0x18e>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1e58      	subs	r0, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	0099      	lsls	r1, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	fbb0 f3f3 	udiv	r3, r0, r3
 800230e:	3301      	adds	r3, #1
 8002310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf0c      	ite	eq
 8002318:	2301      	moveq	r3, #1
 800231a:	2300      	movne	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Init+0x196>
 8002322:	2301      	movs	r3, #1
 8002324:	e022      	b.n	800236c <HAL_I2C_Init+0x1dc>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10e      	bne.n	800234c <HAL_I2C_Init+0x1bc>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1e58      	subs	r0, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6859      	ldr	r1, [r3, #4]
 8002336:	460b      	mov	r3, r1
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	440b      	add	r3, r1
 800233c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002340:	3301      	adds	r3, #1
 8002342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800234a:	e00f      	b.n	800236c <HAL_I2C_Init+0x1dc>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1e58      	subs	r0, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	0099      	lsls	r1, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002362:	3301      	adds	r3, #1
 8002364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002368:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	6809      	ldr	r1, [r1, #0]
 8002370:	4313      	orrs	r3, r2
 8002372:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800239a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6911      	ldr	r1, [r2, #16]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68d2      	ldr	r2, [r2, #12]
 80023a6:	4311      	orrs	r1, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	430b      	orrs	r3, r1
 80023ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	000186a0 	.word	0x000186a0
 8002408:	001e847f 	.word	0x001e847f
 800240c:	003d08ff 	.word	0x003d08ff
 8002410:	431bde83 	.word	0x431bde83
 8002414:	10624dd3 	.word	0x10624dd3

08002418 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af02      	add	r7, sp, #8
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	461a      	mov	r2, r3
 8002424:	460b      	mov	r3, r1
 8002426:	817b      	strh	r3, [r7, #10]
 8002428:	4613      	mov	r3, r2
 800242a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff f9e6 	bl	80017fc <HAL_GetTick>
 8002430:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b20      	cmp	r3, #32
 800243c:	f040 80e0 	bne.w	8002600 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2319      	movs	r3, #25
 8002446:	2201      	movs	r2, #1
 8002448:	4970      	ldr	r1, [pc, #448]	; (800260c <HAL_I2C_Master_Transmit+0x1f4>)
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f964 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002456:	2302      	movs	r3, #2
 8002458:	e0d3      	b.n	8002602 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_I2C_Master_Transmit+0x50>
 8002464:	2302      	movs	r3, #2
 8002466:	e0cc      	b.n	8002602 <HAL_I2C_Master_Transmit+0x1ea>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b01      	cmp	r3, #1
 800247c:	d007      	beq.n	800248e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0201 	orr.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800249c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2221      	movs	r2, #33	; 0x21
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2210      	movs	r2, #16
 80024aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	893a      	ldrh	r2, [r7, #8]
 80024be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4a50      	ldr	r2, [pc, #320]	; (8002610 <HAL_I2C_Master_Transmit+0x1f8>)
 80024ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024d0:	8979      	ldrh	r1, [r7, #10]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	6a3a      	ldr	r2, [r7, #32]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f89c 	bl	8002614 <I2C_MasterRequestWrite>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e08d      	b.n	8002602 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024fc:	e066      	b.n	80025cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	6a39      	ldr	r1, [r7, #32]
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f9de 	bl	80028c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00d      	beq.n	800252a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	2b04      	cmp	r3, #4
 8002514:	d107      	bne.n	8002526 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002524:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e06b      	b.n	8002602 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b04      	cmp	r3, #4
 8002566:	d11b      	bne.n	80025a0 <HAL_I2C_Master_Transmit+0x188>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	d017      	beq.n	80025a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	6a39      	ldr	r1, [r7, #32]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f9ce 	bl	8002946 <I2C_WaitOnBTFFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00d      	beq.n	80025cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d107      	bne.n	80025c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e01a      	b.n	8002602 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d194      	bne.n	80024fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
     return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	00100002 	.word	0x00100002
 8002610:	ffff0000 	.word	0xffff0000

08002614 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	460b      	mov	r3, r1
 8002622:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d006      	beq.n	800263e <I2C_MasterRequestWrite+0x2a>
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d003      	beq.n	800263e <I2C_MasterRequestWrite+0x2a>
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800263c:	d108      	bne.n	8002650 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e00b      	b.n	8002668 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	2b12      	cmp	r3, #18
 8002656:	d107      	bne.n	8002668 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002666:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f84f 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00d      	beq.n	800269c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268e:	d103      	bne.n	8002698 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e035      	b.n	8002708 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a4:	d108      	bne.n	80026b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026a6:	897b      	ldrh	r3, [r7, #10]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026b4:	611a      	str	r2, [r3, #16]
 80026b6:	e01b      	b.n	80026f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026b8:	897b      	ldrh	r3, [r7, #10]
 80026ba:	11db      	asrs	r3, r3, #7
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f003 0306 	and.w	r3, r3, #6
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f063 030f 	orn	r3, r3, #15
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	490e      	ldr	r1, [pc, #56]	; (8002710 <I2C_MasterRequestWrite+0xfc>)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f875 	bl	80027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e010      	b.n	8002708 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026e6:	897b      	ldrh	r3, [r7, #10]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <I2C_MasterRequestWrite+0x100>)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f865 	bl	80027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	00010008 	.word	0x00010008
 8002714:	00010002 	.word	0x00010002

08002718 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002728:	e025      	b.n	8002776 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d021      	beq.n	8002776 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7ff f863 	bl	80017fc <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d116      	bne.n	8002776 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f043 0220 	orr.w	r2, r3, #32
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e023      	b.n	80027be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	0c1b      	lsrs	r3, r3, #16
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d10d      	bne.n	800279c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	43da      	mvns	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4013      	ands	r3, r2
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	bf0c      	ite	eq
 8002792:	2301      	moveq	r3, #1
 8002794:	2300      	movne	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	e00c      	b.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4013      	ands	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf0c      	ite	eq
 80027ae:	2301      	moveq	r3, #1
 80027b0:	2300      	movne	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d0b6      	beq.n	800272a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027d4:	e051      	b.n	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e4:	d123      	bne.n	800282e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f043 0204 	orr.w	r2, r3, #4
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e046      	b.n	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d021      	beq.n	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002836:	f7fe ffe1 	bl	80017fc <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	429a      	cmp	r2, r3
 8002844:	d302      	bcc.n	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d116      	bne.n	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e020      	b.n	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d10c      	bne.n	800289e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4013      	ands	r3, r2
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf14      	ite	ne
 8002896:	2301      	movne	r3, #1
 8002898:	2300      	moveq	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	e00b      	b.n	80028b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	43da      	mvns	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4013      	ands	r3, r2
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf14      	ite	ne
 80028b0:	2301      	movne	r3, #1
 80028b2:	2300      	moveq	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d18d      	bne.n	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028d0:	e02d      	b.n	800292e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f878 	bl	80029c8 <I2C_IsAcknowledgeFailed>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e02d      	b.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d021      	beq.n	800292e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7fe ff87 	bl	80017fc <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d116      	bne.n	800292e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f043 0220 	orr.w	r2, r3, #32
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e007      	b.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	2b80      	cmp	r3, #128	; 0x80
 800293a:	d1ca      	bne.n	80028d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002952:	e02d      	b.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f837 	bl	80029c8 <I2C_IsAcknowledgeFailed>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e02d      	b.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296a:	d021      	beq.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296c:	f7fe ff46 	bl	80017fc <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	d302      	bcc.n	8002982 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e007      	b.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d1ca      	bne.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029de:	d11b      	bne.n	8002a18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f043 0204 	orr.w	r2, r3, #4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e272      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8087 	beq.w	8002b52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a44:	4b92      	ldr	r3, [pc, #584]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d00c      	beq.n	8002a6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a50:	4b8f      	ldr	r3, [pc, #572]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d112      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5e>
 8002a5c:	4b8c      	ldr	r3, [pc, #560]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d10b      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6a:	4b89      	ldr	r3, [pc, #548]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d06c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x12c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d168      	bne.n	8002b50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e24c      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x76>
 8002a8c:	4b80      	ldr	r3, [pc, #512]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a7f      	ldr	r2, [pc, #508]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e02e      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x98>
 8002aa2:	4b7b      	ldr	r3, [pc, #492]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7a      	ldr	r2, [pc, #488]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b78      	ldr	r3, [pc, #480]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a77      	ldr	r2, [pc, #476]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e01d      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xbc>
 8002ac6:	4b72      	ldr	r3, [pc, #456]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a71      	ldr	r2, [pc, #452]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b6f      	ldr	r3, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6e      	ldr	r2, [pc, #440]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002ae0:	4b6b      	ldr	r3, [pc, #428]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a6a      	ldr	r2, [pc, #424]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b68      	ldr	r3, [pc, #416]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a67      	ldr	r2, [pc, #412]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe fe7c 	bl	80017fc <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b08:	f7fe fe78 	bl	80017fc <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e200      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe4>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7fe fe68 	bl	80017fc <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7fe fe64 	bl	80017fc <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e1ec      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x10c>
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d063      	beq.n	8002c26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d11c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x18c>
 8002b76:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d116      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_RCC_OscConfig+0x176>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e1c0      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4939      	ldr	r1, [pc, #228]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bae:	e03a      	b.n	8002c26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d020      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb8:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fe1d 	bl	80017fc <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7fe fe19 	bl	80017fc <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e1a1      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4927      	ldr	r1, [pc, #156]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]
 8002bf8:	e015      	b.n	8002c26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fe fdfc 	bl	80017fc <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c08:	f7fe fdf8 	bl	80017fc <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e180      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d03a      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c40:	f7fe fddc 	bl	80017fc <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c48:	f7fe fdd8 	bl	80017fc <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e160      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c66:	2001      	movs	r0, #1
 8002c68:	f000 fb08 	bl	800327c <RCC_Delay>
 8002c6c:	e01c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fe fdc2 	bl	80017fc <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7a:	e00f      	b.n	8002c9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fdbe 	bl	80017fc <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d908      	bls.n	8002c9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e146      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	42420000 	.word	0x42420000
 8002c98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b92      	ldr	r3, [pc, #584]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e9      	bne.n	8002c7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a6 	beq.w	8002e02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b8b      	ldr	r3, [pc, #556]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4a87      	ldr	r2, [pc, #540]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	61d3      	str	r3, [r2, #28]
 8002cd2:	4b85      	ldr	r3, [pc, #532]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	4b82      	ldr	r3, [pc, #520]	; (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cee:	4b7f      	ldr	r3, [pc, #508]	; (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7e      	ldr	r2, [pc, #504]	; (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe fd7f 	bl	80017fc <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7fe fd7b 	bl	80017fc <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	; 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e103      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	4b75      	ldr	r3, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x312>
 8002d28:	4b6f      	ldr	r3, [pc, #444]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4a6e      	ldr	r2, [pc, #440]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6213      	str	r3, [r2, #32]
 8002d34:	e02d      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x334>
 8002d3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4a69      	ldr	r2, [pc, #420]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6213      	str	r3, [r2, #32]
 8002d4a:	4b67      	ldr	r3, [pc, #412]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4a66      	ldr	r2, [pc, #408]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	6213      	str	r3, [r2, #32]
 8002d56:	e01c      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x356>
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4a60      	ldr	r2, [pc, #384]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6213      	str	r3, [r2, #32]
 8002d6c:	4b5e      	ldr	r3, [pc, #376]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4a5d      	ldr	r2, [pc, #372]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6213      	str	r3, [r2, #32]
 8002d78:	e00b      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a5a      	ldr	r2, [pc, #360]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6213      	str	r3, [r2, #32]
 8002d86:	4b58      	ldr	r3, [pc, #352]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a57      	ldr	r2, [pc, #348]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fd2f 	bl	80017fc <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe fd2b 	bl	80017fc <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0b1      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	4b4b      	ldr	r3, [pc, #300]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ee      	beq.n	8002da2 <HAL_RCC_OscConfig+0x37e>
 8002dc4:	e014      	b.n	8002df0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fd19 	bl	80017fc <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe fd15 	bl	80017fc <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e09b      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	4b40      	ldr	r3, [pc, #256]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ee      	bne.n	8002dce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8087 	beq.w	8002f1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0c:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d061      	beq.n	8002edc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d146      	bne.n	8002eae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b33      	ldr	r3, [pc, #204]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7fe fce9 	bl	80017fc <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fe fce5 	bl	80017fc <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e06d      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e40:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e54:	d108      	bne.n	8002e68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e56:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	4921      	ldr	r1, [pc, #132]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e68:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a19      	ldr	r1, [r3, #32]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	491b      	ldr	r1, [pc, #108]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fe fcb9 	bl	80017fc <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7fe fcb5 	bl	80017fc <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e03d      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x46a>
 8002eac:	e035      	b.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fca2 	bl	80017fc <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fe fc9e 	bl	80017fc <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e026      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x498>
 8002eda:	e01e      	b.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e019      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_OscConfig+0x500>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000

08002f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0d0      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b6a      	ldr	r3, [pc, #424]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d910      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b67      	ldr	r3, [pc, #412]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 0207 	bic.w	r2, r3, #7
 8002f52:	4965      	ldr	r1, [pc, #404]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b63      	ldr	r3, [pc, #396]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0b8      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f84:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a58      	ldr	r2, [pc, #352]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f9c:	4b53      	ldr	r3, [pc, #332]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a52      	ldr	r2, [pc, #328]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b50      	ldr	r3, [pc, #320]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	494d      	ldr	r1, [pc, #308]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d040      	beq.n	8003048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d115      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07f      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b41      	ldr	r3, [pc, #260]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e073      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e06b      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b39      	ldr	r3, [pc, #228]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4936      	ldr	r1, [pc, #216]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7fe fbf0 	bl	80017fc <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7fe fbec 	bl	80017fc <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e053      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d210      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0207 	bic.w	r2, r3, #7
 800305e:	4922      	ldr	r1, [pc, #136]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e032      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4916      	ldr	r1, [pc, #88]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	490e      	ldr	r1, [pc, #56]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030b6:	f000 f821 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030ba:	4602      	mov	r2, r0
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	490a      	ldr	r1, [pc, #40]	; (80030f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	5ccb      	ldrb	r3, [r1, r3]
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x1cc>)
 80030d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_RCC_ClockConfig+0x1d0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd fb74 	bl	80007c4 <HAL_InitTick>

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40022000 	.word	0x40022000
 80030ec:	40021000 	.word	0x40021000
 80030f0:	080075cc 	.word	0x080075cc
 80030f4:	2000003c 	.word	0x2000003c
 80030f8:	200000c8 	.word	0x200000c8

080030fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	b490      	push	{r4, r7}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003102:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003104:	1d3c      	adds	r4, r7, #4
 8003106:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800310c:	f240 2301 	movw	r3, #513	; 0x201
 8003110:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003126:	4b21      	ldr	r3, [pc, #132]	; (80031ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b04      	cmp	r3, #4
 8003134:	d002      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x40>
 8003136:	2b08      	cmp	r3, #8
 8003138:	d003      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x46>
 800313a:	e02b      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800313c:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800313e:	623b      	str	r3, [r7, #32]
      break;
 8003140:	e02b      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	0c9b      	lsrs	r3, r3, #18
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	3328      	adds	r3, #40	; 0x28
 800314c:	443b      	add	r3, r7
 800314e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003152:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d012      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800315e:	4b13      	ldr	r3, [pc, #76]	; (80031ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0c5b      	lsrs	r3, r3, #17
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	3328      	adds	r3, #40	; 0x28
 800316a:	443b      	add	r3, r7
 800316c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003170:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003176:	fb03 f202 	mul.w	r2, r3, r2
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
 8003182:	e004      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	623b      	str	r3, [r7, #32]
      break;
 8003192:	e002      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003196:	623b      	str	r3, [r7, #32]
      break;
 8003198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319a:	6a3b      	ldr	r3, [r7, #32]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3728      	adds	r7, #40	; 0x28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc90      	pop	{r4, r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	080039bc 	.word	0x080039bc
 80031ac:	40021000 	.word	0x40021000
 80031b0:	007a1200 	.word	0x007a1200
 80031b4:	003d0900 	.word	0x003d0900

080031b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031bc:	4b02      	ldr	r3, [pc, #8]	; (80031c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	2000003c 	.word	0x2000003c

080031cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d0:	f7ff fff2 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4903      	ldr	r1, [pc, #12]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	080075dc 	.word	0x080075dc

080031f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f8:	f7ff ffde 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	0adb      	lsrs	r3, r3, #11
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	4903      	ldr	r1, [pc, #12]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800320a:	5ccb      	ldrb	r3, [r1, r3]
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	080075dc 	.word	0x080075dc

0800321c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	220f      	movs	r2, #15
 800322a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_RCC_GetClockConfig+0x58>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0203 	and.w	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003238:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_RCC_GetClockConfig+0x58>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_GetClockConfig+0x58>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_RCC_GetClockConfig+0x58>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	08db      	lsrs	r3, r3, #3
 8003256:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_RCC_GetClockConfig+0x5c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0207 	and.w	r2, r3, #7
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	40021000 	.word	0x40021000
 8003278:	40022000 	.word	0x40022000

0800327c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <RCC_Delay+0x34>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <RCC_Delay+0x38>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	0a5b      	lsrs	r3, r3, #9
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003298:	bf00      	nop
  }
  while (Delay --);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1e5a      	subs	r2, r3, #1
 800329e:	60fa      	str	r2, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f9      	bne.n	8003298 <RCC_Delay+0x1c>
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	2000003c 	.word	0x2000003c
 80032b4:	10624dd3 	.word	0x10624dd3

080032b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d07d      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032d4:	2300      	movs	r3, #0
 80032d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d8:	4b4f      	ldr	r3, [pc, #316]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10d      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e4:	4b4c      	ldr	r3, [pc, #304]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	4a4b      	ldr	r2, [pc, #300]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ee:	61d3      	str	r3, [r2, #28]
 80032f0:	4b49      	ldr	r3, [pc, #292]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fc:	2301      	movs	r3, #1
 80032fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	4b46      	ldr	r3, [pc, #280]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d118      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330c:	4b43      	ldr	r3, [pc, #268]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a42      	ldr	r2, [pc, #264]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003316:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003318:	f7fe fa70 	bl	80017fc <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	e008      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003320:	f7fe fa6c 	bl	80017fc <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	; 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e06d      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b3a      	ldr	r3, [pc, #232]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800333e:	4b36      	ldr	r3, [pc, #216]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003346:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d02e      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	429a      	cmp	r2, r3
 800335a:	d027      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800335c:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003364:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003366:	4b2e      	ldr	r3, [pc, #184]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800336c:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003372:	4a29      	ldr	r2, [pc, #164]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d014      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7fe fa3b 	bl	80017fc <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	e00a      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7fe fa37 	bl	80017fc <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f241 3288 	movw	r2, #5000	; 0x1388
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e036      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a0:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ee      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ac:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	4917      	ldr	r1, [pc, #92]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d105      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	4a13      	ldr	r2, [pc, #76]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	490b      	ldr	r1, [pc, #44]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	4904      	ldr	r1, [pc, #16]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003408:	4313      	orrs	r3, r2
 800340a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	40007000 	.word	0x40007000
 8003420:	42420440 	.word	0x42420440

08003424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e041      	b.n	80034ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f839 	bl	80034c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3304      	adds	r3, #4
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f000 f9b4 	bl	80037d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d001      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e03a      	b.n	8003562 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a18      	ldr	r2, [pc, #96]	; (800356c <HAL_TIM_Base_Start_IT+0x98>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00e      	beq.n	800352c <HAL_TIM_Base_Start_IT+0x58>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003516:	d009      	beq.n	800352c <HAL_TIM_Base_Start_IT+0x58>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a14      	ldr	r2, [pc, #80]	; (8003570 <HAL_TIM_Base_Start_IT+0x9c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_TIM_Base_Start_IT+0x58>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a13      	ldr	r2, [pc, #76]	; (8003574 <HAL_TIM_Base_Start_IT+0xa0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d111      	bne.n	8003550 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b06      	cmp	r3, #6
 800353c:	d010      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354e:	e007      	b.n	8003560 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40000400 	.word	0x40000400
 8003574:	40000800 	.word	0x40000800

08003578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b02      	cmp	r3, #2
 800358c:	d122      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b02      	cmp	r3, #2
 800359a:	d11b      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0202 	mvn.w	r2, #2
 80035a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f8ed 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8e0 	bl	8003788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f8ef 	bl	80037ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d122      	bne.n	8003628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d11b      	bne.n	8003628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0204 	mvn.w	r2, #4
 80035f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8c3 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8b6 	bl	8003788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f8c5 	bl	80037ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b08      	cmp	r3, #8
 8003634:	d122      	bne.n	800367c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b08      	cmp	r3, #8
 8003642:	d11b      	bne.n	800367c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0208 	mvn.w	r2, #8
 800364c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2204      	movs	r2, #4
 8003652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f899 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f88c 	bl	8003788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f89b 	bl	80037ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b10      	cmp	r3, #16
 8003688:	d122      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b10      	cmp	r3, #16
 8003696:	d11b      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0210 	mvn.w	r2, #16
 80036a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2208      	movs	r2, #8
 80036a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f86f 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f862 	bl	8003788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f871 	bl	80037ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d10e      	bne.n	80036fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d107      	bne.n	80036fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0201 	mvn.w	r2, #1
 80036f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fd f812 	bl	8000720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003706:	2b80      	cmp	r3, #128	; 0x80
 8003708:	d10e      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b80      	cmp	r3, #128	; 0x80
 8003716:	d107      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8bf 	bl	80038a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d10e      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d107      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f835 	bl	80037be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b20      	cmp	r3, #32
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b20      	cmp	r3, #32
 800376e:	d107      	bne.n	8003780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0220 	mvn.w	r2, #32
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f88a 	bl	8003894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a29      	ldr	r2, [pc, #164]	; (8003888 <TIM_Base_SetConfig+0xb8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00b      	beq.n	8003800 <TIM_Base_SetConfig+0x30>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ee:	d007      	beq.n	8003800 <TIM_Base_SetConfig+0x30>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a26      	ldr	r2, [pc, #152]	; (800388c <TIM_Base_SetConfig+0xbc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_Base_SetConfig+0x30>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a25      	ldr	r2, [pc, #148]	; (8003890 <TIM_Base_SetConfig+0xc0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d108      	bne.n	8003812 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <TIM_Base_SetConfig+0xb8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00b      	beq.n	8003832 <TIM_Base_SetConfig+0x62>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003820:	d007      	beq.n	8003832 <TIM_Base_SetConfig+0x62>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a19      	ldr	r2, [pc, #100]	; (800388c <TIM_Base_SetConfig+0xbc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d003      	beq.n	8003832 <TIM_Base_SetConfig+0x62>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a18      	ldr	r2, [pc, #96]	; (8003890 <TIM_Base_SetConfig+0xc0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d108      	bne.n	8003844 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a07      	ldr	r2, [pc, #28]	; (8003888 <TIM_Base_SetConfig+0xb8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d103      	bne.n	8003878 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	615a      	str	r2, [r3, #20]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40000400 	.word	0x40000400
 8003890:	40000800 	.word	0x40000800

08003894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <__libc_init_array>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	2600      	movs	r6, #0
 80038bc:	4d0c      	ldr	r5, [pc, #48]	; (80038f0 <__libc_init_array+0x38>)
 80038be:	4c0d      	ldr	r4, [pc, #52]	; (80038f4 <__libc_init_array+0x3c>)
 80038c0:	1b64      	subs	r4, r4, r5
 80038c2:	10a4      	asrs	r4, r4, #2
 80038c4:	42a6      	cmp	r6, r4
 80038c6:	d109      	bne.n	80038dc <__libc_init_array+0x24>
 80038c8:	f000 f830 	bl	800392c <_init>
 80038cc:	2600      	movs	r6, #0
 80038ce:	4d0a      	ldr	r5, [pc, #40]	; (80038f8 <__libc_init_array+0x40>)
 80038d0:	4c0a      	ldr	r4, [pc, #40]	; (80038fc <__libc_init_array+0x44>)
 80038d2:	1b64      	subs	r4, r4, r5
 80038d4:	10a4      	asrs	r4, r4, #2
 80038d6:	42a6      	cmp	r6, r4
 80038d8:	d105      	bne.n	80038e6 <__libc_init_array+0x2e>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e0:	4798      	blx	r3
 80038e2:	3601      	adds	r6, #1
 80038e4:	e7ee      	b.n	80038c4 <__libc_init_array+0xc>
 80038e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ea:	4798      	blx	r3
 80038ec:	3601      	adds	r6, #1
 80038ee:	e7f2      	b.n	80038d6 <__libc_init_array+0x1e>
 80038f0:	080075e4 	.word	0x080075e4
 80038f4:	080075e4 	.word	0x080075e4
 80038f8:	080075e4 	.word	0x080075e4
 80038fc:	080075e8 	.word	0x080075e8

08003900 <memcpy>:
 8003900:	440a      	add	r2, r1
 8003902:	4291      	cmp	r1, r2
 8003904:	f100 33ff 	add.w	r3, r0, #4294967295
 8003908:	d100      	bne.n	800390c <memcpy+0xc>
 800390a:	4770      	bx	lr
 800390c:	b510      	push	{r4, lr}
 800390e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003912:	4291      	cmp	r1, r2
 8003914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003918:	d1f9      	bne.n	800390e <memcpy+0xe>
 800391a:	bd10      	pop	{r4, pc}

0800391c <memset>:
 800391c:	4603      	mov	r3, r0
 800391e:	4402      	add	r2, r0
 8003920:	4293      	cmp	r3, r2
 8003922:	d100      	bne.n	8003926 <memset+0xa>
 8003924:	4770      	bx	lr
 8003926:	f803 1b01 	strb.w	r1, [r3], #1
 800392a:	e7f9      	b.n	8003920 <memset+0x4>

0800392c <_init>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	bf00      	nop
 8003930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003932:	bc08      	pop	{r3}
 8003934:	469e      	mov	lr, r3
 8003936:	4770      	bx	lr

08003938 <_fini>:
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	bf00      	nop
 800393c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393e:	bc08      	pop	{r3}
 8003940:	469e      	mov	lr, r3
 8003942:	4770      	bx	lr
